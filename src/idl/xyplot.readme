
	XYPLOT Description and Instruction Manual

Introduction.

XYPLOT is a general purpose IDL program developed at JPL by Geoff Toon and 
Bhaswar Sen for plotting data from ASCII input files. XYPLOT also allows 
the user to perform simple mathematical manipulation of the data such as 
adding, multiplying, and dividing fields, as well as evaluating various 
trancendental functions (e.g. cosine, logarithm, etc). It also supports 
selective exclusion of data points from the plot based on the values of 
other unplotted fields. During all such operations XYPLOT correctly and 
transparently handles missing values and any uncertainties associated with 
the data and derived quantities. Various linestyles, colors and symbols 
are supported by XYPLOT, together with multiple paneling. 

Although IDL functions are designed to be used directly in the preparation 
of a plot, we found that various combinations of IDL functions would often 
be used over and over. It therefore became advantageous to define higher
level functions or commands in order to mimimize the number of keystrokes
and hence time necessary to produce a given plot. This also had the advantage 
of allowing users unfamiliar with IDL to nevertheless use it to make plots.


Getting Started.

XYPLOT consists of the main program (xyplot.pro) and 8 other procedures
(or subroutines) which are called from the main program to perform various
functions, and a data file.
 xyplot.pro        Main Program.
 getparam.pro      Prompts user for names/labels of desired data fields.
 read2mem.pro      Reads content of all the input data files into memory.
 cp2reg.pro        Copies a data field from memory into a register.
 gplot.pro         PLots the data.
 pythag.pro        Computes SQRT(a**2+b**2).
 substr.pro        Converts a string into an array of sub-strings.
 fnbc.pro          Finds the location in a string of the first non-blank character.
 fbc.pro           Finds the location in a string of the first blank character.
 xyplot.sym        File defining symbols,colors,linestyles etc.

These files can be obtained by anonymous FTP from the sub-directory
    mark4sun.jpl.nasa.gov:ftp/pub/outgoing/toon/xyplot/

XYPLOT is started by typing "xyplot" at the IDL> prompt.
After printing the version number, XYPLOT then prompts the user for the names 
of all of the input data files. XYPLOT does not search for files, and so full 
path names must be given if the files do not reside in the local directory. 
After these file pathnames have all been entered the user must enter a CR to 
signify that the list is complete.

Next XYPLOT prompts the user for a project name. If CR is entered, the
default project name ("xyplot") is used. The project name is used for
two main purposes: (i) A file "project.sym" is located and opened. Its
contents will control the symbols, linestyles, colors, and other attributes
of the plot. (ii) Any postscript output files created will be named
"project_NNN.ps", where NNN is an integer running from 000 to 999. 

XYPLOT then reads the entire data content of the previously named input
files into memory, and prints out how many columns and rows of data were 
found in each file. For large data files this reading can take many seconds. 
However, it avoids having to re-read the files later. Your computer must 
therefore have enough memory to hold the entire contents of the input data 
files as Real*4 variables. A computer with 128 Mbytes of memory would 
therefore be able to store over 32 million data values.

With all of the data loaded into memory you are now ready to issue commands
and plot it. But before embarking into a detailed explanation of this, it 
is first necessary to understand the concept of registers. 


Registers.

When the input data files are read into memory, their elements are stored 
in the same order as the data values appear in the files, namely left to
right and top to bottom. Therefore, successive values of a particular data 
field (column) will not occupy successive elements of memory. Moreover, the
various input data files will not generally have the same number or order of 
columns as each other, or even the same labels for equivalent data fields,
further complicating the fetching of the data values pertaining to a 
particular quantity.

Since the IDL intrinsic plot subroutines require that the plotted data
points occupy successive elements of an array, it is necessary to copy 
the desired fields of the non-contiguous data from the multi-dimensional 
memory buffer to simple one-dimensional arrays whose contents can be plotted 
by a simple call of the IDL function plot(x,y). These simple one-dimensional 
arrays are termed registers. In addition to the 2 registers (named x and y) 
which contain the data to be plotted directly, there are 7 other registers 
(a thru g) that can be used to hold data fields in a plottable form. These
additional registers may be used to save intermediate steps in the 
construction of the quantities in registers x and y, or they may contain 
data fields used to modify or control the plot of the main (x, y) registers.


Commands

The commands take the form of a two-character instruction, followed by 
0, 1 or 2 register labels, to form a continuous string of 2-4 characters.
Examples of two-character commands are:
   'rf'  Read new input Files (you will be prompted for their names).
   'rr'  Re-Read old input files (without having to type in the names again).
   'hc'  Hard-Copy  (creates a local postscript file of the current plot)
   'pd'  Screen Plot
   'qu'  QUit

Examples of three-character command are:
  'rdx'  Load a data field (subsequently requested) into the x-register.
  'sax'  Adds a scalar (subsequently requested) to contents of the x-register.
  'smy'  Multiply contents of y-register by a scalar (subsequently requested).
  'cry'  Change Range of y-axis (to limits subsequently requested).
  'aux'  Automatically change range of x-axis to display all valid points
  'ccb'  Only plot those points (from the x- and y-registers) whose b-register
         values fall within certain limits (subsequently requested).

Examples of four character commands include:
 'cpdy'  CoPy contents and attributes of the d-register to the y-register
 'vaex'  Vector Add (add the contents of the e-register to the x-register)
 'vmfy'  Vector Multiply (multiply the contents of y-register by the f-register)
 'vdxy'  Vector Divide (divide the contents of the y-register by the x register)
Note that the last character is always the destination register, i.e. the one
where the result will be placed.
[Justus: Note that the last 3 commands can be now used in an abbreviated form
in which the auxiliary register label (the third character) is omitted, in which
case the user will be immediately prompted for the name/label of the auxiliary
data field. This is identical to the way that AMESPLOT used to work, and avoids
having to load the auxiliary data field into a register prior to the issuance of
the vector command, reducing the number of keystrokes in situations where the
auxiliary data field is not ever going to be re-used].


Data Formats.

XYPLOT currently only handles ASCII data files of two types: GGG-format spread-
sheets, and Ames format files. The former is simply a two-dimensional table of 
numbers, prefixed by a few header lines. The first header line contains two 
integers; the number of header lines and the number of data fields or columns 
in the table. The last header line must contain the labels which identify the 
content of each of the data fields or columns. The intervening header lines can 
contain anything else that you like to keep in the file. This format is termed 
"GGG-format" because all of the ASCII input and output files used by the GGG 
software are in this format.
	Despite several limitations, the so-called Ames format ("Format
specification for data exchange", Gaines and Hipskind, May 1990) has become
widely accepted for the archival of atmospheric data sets. Several of the
most common Ames formats (1001, 1010, 2010, 2110) are supported by XYPLOT,
which facilitates comparison of GGG-derived column abundances or profiles
with measurements made by other instruments. The first line of an Ames format
data file contains two integers; the number of header lines and the format 
code. Because the latter always exceeds 1000, XYPLOT can always distinguish
an Ames file from a GGG-format spreadsheet file, provided the latter has less
than 1000 data fields.
	It should be quite easy to extend RD2MEM.PRO, the subroutine which
reads the data files to memory, to include other data formats. None of the
other files or procedures should be affected.


The project.sym file.

This ASCII file controls many aspects of the plot. The header lines control
global aspects of the plot such as its orientation, the size of captions and
annotation, and multi-paneling.
	Each subsequent line of the file defines a specific symbol or linestyle
i.e. its size, shape, orientation, color, and error bar.
	Each time the data field in the a-register changes its value, the next 
line of the project.sym file is read and is used to define a new symbol. The
initial values in the a-register are simply the input file numbers (0, 1,2 etc),
but these can subsequently be over-written by any other data field.
	Note that the lines of this file can be re-ordered or edited to effect
changes in the symbols/lines displayed in the plots. Placing a ';' at the 
beginning of a line has the effect of commenting out this line, so that it is
skipped during the read.


Batch Operation.

Each time that XYPLOT is run, it creates a logfile (xyplot.log)
containing all of the user keyboard input. This allows the user to
make a modification or correction to the plot simply by directly
editing the logfile and then re-making the plot by typing
		idl < logfile
This is often much faster than re-typing all of the commands from scratch,
especially for complicated plots involving many instructions.


Treatment of Uncertainties and Missing Values.

An important feature of XYPLOT is the transparent manner in which it
handles errors/uncertainties in the data fields. For example, if a field
labeled "HCl" is selected by the user, then XYPLOT will automatically
search for another field named "HCl_error".  If found, it will be treated 
as the uncertainty in "HCl" and will be propagated through all subsequent 
mathematical operations. For example, if the field labeled "HCl" is
divided by a field labeled "HF", then
	RESULT = HCl/HF 
	ERROR  = SQRT( (HCl_error/HF)**2 + (HCl*HF_error/HF/HF)**2 )
This result implicitly assumes that the HCl and HF errors are uncorrelated.

Missing values are handled by XYPLOT in a complete and thorough manner.
Although individual input files may use different constants to denote
missing data, they are all converted to the global missing value (GMISSING)
before being written to memory.  The results of mathematical operations in
which primary or auxiliary variables are missing are set to GMISSING, as are
the results of invalid mathematical operations, such as division by zero.


Examples.

      As a practical example of the use of XYPLOT to generate a simple plot,
we have included seven additional files in the anonymous FTP subdirectory:
    example.log    contains the keyboard input from the user
    example.sym    defines the plot style, colors and symbols
    example.ps     shows what the final plot should look like
    jplallav.vad   MkIV Pasadena data file (GGG-format)
    lyl96avg.vad   MkIV Lynn Lake data file (GGG-format)
    m4970325.gnd   MkIV Fairbanks data file (Ames format)
    92-98.1l.vad   Spitsbergen data file (GGG-format)
    
In this example, a simple 3 panel color figure comparing the O3, and HF
column abundances above Pasadena, Lynn Lake, Fairbanks and Ny Alesund is
created.  The data are read from 4 different input files, three in GGG-
format and the fourth in Ames 1010 format. The third panel shows the
column ratio O3/HF.  

After plotting the example plot (example_000.ps) we suggest that the
user type
    idl<example.log
and the example plot should be recreated. If errors are encountered, 
or if the plot does not look the same, there may be a problem with
the way IDL is installed on your computer. 

Careful examination of the example plot, together with the command file
(example.log) which generated it, should give the user a good idea for
how it all works.  These input data files also provide examples of the
types of formats acceptable to XYPLOT.


Frequently Asked Questions.

Q: How much memory does my computer need to run XYPLOT ?
A: It depends maninly on the size of your input data files.
XYPLOT first reads the entire contents of all of the input data files 
into memory, even the fields that might never get used. This speeds up
the subsequent access of data, but requires much more memory than if the
input files were re-read each time a new data field were needed. Therefore,
XYPLOT need 4 bytes of memory for each datum of each input file, plus a
little extra for handling the data in the registers.

Q: If I change one of my input data files, do I have to re-start from scratch ?
A: No. If the input files are edited or overwritten, there is no need to
exit XYPLOT. Simply use the "rr" command to re-read the previously named
input data files into memory, or use the "rf" command if different input 
files are desired. {All other parameters remain unchanged].

Q: When reading an input field into a register using the "rd" command, why 
is it necessary to enter the label of the field for every input file ?
A: This is necessary because different input files may have different labels
for the same field. For example, in one file a field may be labeled "Ozone",
whereas in an other input file it may be labeled "O3". However, if the user 
knows that all of the subsequent input files are named consistently, a short-
cut may be used: Entering the character "#" before the field label (e.g. "#O3") 
is equivalent to typing "O3" for all subsequent input file label prompts.

Q: Can I change my .sym file during a plot ?
A: Yes. The .sym file is re-read every time a screen plot ('pd' command) or 
a hardcopy is made. This allows the user to edit the .sym file without exiting 
XYPLOT in order to modify any aspect of the symbols/line-styles/colors.

Q: How can I draw connecting lines between the plotted symbols ?
A: The integer in the "ls" (Line-Style) column of the .sym file defines
the connecting lines according to the following IDL-defined linestyles:
          -1  No connecting line
           0  Solid 
           1  Dotted  
           2  Dashed 
           3  Dash-Dot
           4  Dash-Dot-Dot-Dot

Q: Can I get rid of the plotted symbols and just have lines instead ?
A: Yes, Simply set the value in the "size" column of the .sym file to
0.0 and the symbols will not be drawn. 

Q: Can I get rid of the error bars which are plotted through the symbols ?
A: Yes, simply set the integers in the "xeb" (x-error bars) and "yeb"
(y-error bars) columns of the .sym file to 0. Be careful not to set
size=0.0, ls=-1, xeb=0, and yeb=0 all on the same line or else nothing
will be plotted for that particular input file.

