c  Program linefinder.f
c
c  Reads a spectrum and uses the 3'rd derivative spectrum
c  to identify the absorption lines.
c
c  Works for any spectrum having a GGG-format runlog,
c  which is used as the input file.
c
c  Byte-reversal handled automatically, if the computer
c  that you are working on has a different endian-ness
c  from the computer that wrote the binary spectra.
c
      implicit none
      include "../ggg_int_params.f"

      integer*4
     & lun_rlg,   ! LUN to read input runlogs from
     & luns,   ! LUN to read binary spectras from
     & lunw,   ! LUN to write ascii spectra to
     & i,j,k,
     & iabpw,  ! absolute values of the bytes per word
     & lnbc,   ! function Last Non-Black Character
     & iend,   ! Endianess of host computer
     & mpts, npts,   ! Number of spectral values
     & mterm, nterm, ! Number of polynomial terms to fit continuum
     & mhw, nhw, ! Half-width of smoothing operator
     & nlines,
     & ls,lr   ! 

      parameter (lun_rlg=25,luns=15,lunw=16)
      parameter (mpts=1280*1024, mterm=5,mhw=20)
      real*4 bufr4(mpts),deriv1(mpts),deriv3(mpts),sd1(mpts),sd3(mpts),
     & thresh,frx,yyx,a,b,cmin,cmax,rnorm,smoo_oper(mhw),
     & x(mpts),y(mpts),wt(mpts),jac(mpts,mterm),wk(mterm),c(mterm)

      character 
     & inpath*80,chead*1

      integer*4 ip(mterm), nlhead, ncol,
     & kgas, kiso,   ! Gas # and Isotope code (first two columns of linelist)
     & istat,        ! status flag (0=success, 1=EOF)
     & iyr,          ! year
     & iset,         ! day of year
     & ifirst,       ! index of first spectral point in disk file
     & ilast,        ! index of last spectral point in disk file
     & m1, m2,       ! starting and ending spectral point indices in output file
     & possp,        ! Length of attached header in bytes
     & bytepw        ! Bytes per data word, usually 2 (I*2) or 4 (R*4)

      real*8  rms1d,rms3d,width,tot,
     & slope, rms_slope, sbar,
     & curv, rms_curv,
     & freq, stren,
     & oblat,        ! observation latitude (deg).
     & oblon,        ! observation longitude (deg).
     & obalt,        ! observation altitude (km)
     & asza,         ! astronomical solar zenith angle (unrefracted)
     & azim,         ! azimuth angle
     & opd,          ! Optical path difference (cm) of interferogram
     & graw,         ! spacing of raw spectrum (cm-1) from GETINFO
     & zpdtim,       ! Time of ZPD (UT hours)
     & zenoff,       ! Zenith angle pointing offset (deg)
     & fovi,         ! Internal angular diameter of FOV (radians)
     & fovo,         ! External angular diameter of FOV (radians)
     & amal,         ! angular misalignment of interferometer (radians)
     & zoff,         ! Zero level offset (dimensionless fraction)
     & snr,          ! Signal-to-Noise Ratio (dimensionless)
     & tins,         ! Inside temperature
     & pins,         ! Inside pressure
     & hins,         ! Inside humidity
     & tout,         ! Outside temperature
     & pout,         ! Outside pressure
     & hout,         ! Outside humidity
     & osds,
     & wspd,
     & wdir,
     & sia,          ! Solar Intensity (Average)
     & fvsi,
     & aipl,         ! Airmass-Independent Path Length (km)
     & lasf,         ! Laser Frequency (e.g. 15798 cm-1)
     & wavtkr,       ! suntracker frequency (active tracking)
     & nus, nue      ! selected frequency range of interest

      character
     & sss*33,
     & ttt*33,
     & outfile*18,
     & llfmtw*59
      character
     & col1*1,                    !first column of runlog record
     & apf*2,                     !apodization function (e.g. BX N2, etc)
     & dl*1,
     & gggdir*(mpath),            !ggg directory path (GGGPATH?)
     & specname*(nchar),          !spectrum name
     & rlgfile*120                !name of runlog file

c

      kgas=65   !  CHF3
      kiso=1    !  Real linelist (not pseudo)

      write(6,*)
     & ' Linefinder Program   Version 1.2.2   12-Dec-2009   GCT'
      call getendian(iend)  ! Find endian-ness of host computer

      llfmtw=
     & '(i2,i1,f12.6,1pe10.3,e10.3,0pf5.4,f5.4,f10.4,f4.2,f8.6,a33)'
      sss=' generated by linefinder  V 1.2.1'
      ttt=' generated by linefinder  extras '

c  Interrogate environmental variable GGGPATH to find location
c  of root partition (e.g. "/home/toon/ggg/" ).
      call get_ggg_environment(gggdir, dl)
      lr=lnbc(gggdir)     ! length of root string (e.g. 14)
c
      Write(*,*)'Enter Starting & Ending frequencies:'
      write(*,*)'Enter 0 99999 to retain original spectral limits'
      read(*,*) nus,nue

      write(*,*)'Enter path to input file/runlog:'
      read(*,'(a)') rlgfile
      open(lun_rlg,file=rlgfile,status='old')
      read(lun_rlg,*)  nlhead, ncol
      do j=2,nlhead
      read(lun_rlg,*)          ! Skip header line of runlog
      end do

c  Define Gaussian Smoothing Operator
      width=1.00  ! in spectral points
      nhw=nint(2.5*width)
      if(nhw.gt.mhw) then
        write(*,*) 'mhw, nhw =',mhw,nhw
        stop 'increase parameter MHW'
      endif
      tot=0.0
      do k=1,nhw
         smoo_oper(k)=exp(-(float(k)/width)**2)
         tot=tot+smoo_oper(k)
      end do
      tot=1.0+2*tot  ! Operator is double-sided with center values of 1.0

c  Normalize smoo_oper to unit area
      do k=1,nhw
         smoo_oper(k)=smoo_oper(k)/tot
      end do

c  Read first line of runlog only.
      call read_runlog(lun_rlg,col1,specname,iyr,iset,zpdtim,
     & oblat,oblon,obalt,asza,zenoff,azim,osds,
     & opd,fovi,fovo,amal,ifirst,ilast,graw,possp,bytepw,zoff,snr,apf,
     & tins,pins,hins,tout,pout,hout,
     & sia,fvsi,wspd,wdir,lasf,wavtkr,aipl,istat)

      m1=1+int(nus/graw)-nhw
      m2=int(nue/graw)+nhw

c  Check that buffer will be large enough
      iabpw=iabs(bytepw)
      npts=m2-m1+1
      write(*,*)'ifirst, ilast, graw =',ifirst, ilast, graw
      write(*,*)'m1, m2, npts=',m1, m2, npts
      if(npts.gt.mpts) stop 'Increase parameter MPTS'
      if(npts.lt.5) stop 'NPTS < 5'

      write(outfile,'(a3,i4,a1,i4,a4)')
     &   'lf_',nint(graw*(m1+nhw)),'_',nint(graw*(m2-nhw)),'.101'

c  Search for spectrum "runlab"
      call gindfile(gggdir(:lr)//'config'//dl//'data_part.lst',
     &     specname,inpath)
      if(lnbc(inpath).eq.0) stop ' Cant find input spectrum'
 
      if(iabpw.eq.4) then
c  Open binary spectrum with recl = total length be read
      open(luns,file=inpath,access='direct',status='old',
     & form='unformatted',recl=possp+iabpw*(m2-ifirst+1))

c  Read spectral header and data values all at once.
      read(luns,rec=1) (chead,j=1,possp+iabpw*(m1-ifirst)),
     &(bufr4(j),j=1,npts)
      close(luns)

c  If necessary, byte-reverse data
      if(iend*bytepw.lt.0) call rbyte(bufr4,iabpw,npts)

      else     ! ascii file

      open(luns,file=inpath,status='old')
      read(luns,*) nlhead, ncol
      do j=2,nlhead+m1-ifirst
         read(luns,*)
      end do
      do j=1,npts
         read(luns,*)freq,bufr4(j)
      end do
      close(luns)

      endif
  
c  Compute 1'st and 3'rd derivative spectra
      deriv1(1)=0.0
      deriv1(2)=(bufr4(3)-bufr4(1))/2
      deriv3(1)=0.0
      deriv3(2)=0.0
      do i=3,npts-2
         deriv1(i)=(bufr4(i+1)-bufr4(i-1))/2
         deriv3(i)=bufr4(i-1)-bufr4(i+1)-(bufr4(i-2)-bufr4(i+2))/2
      end do
      deriv3(npts-1)=0.0
      deriv3(npts)=0.0
      deriv1(npts-1)=(bufr4(npts)-bufr4(npts-2))/2
      deriv1(npts)=0.0
      
c Smooth Derivative spectra and find RMS
      rms1d=0.0
      rms3d=0.0
      do i=1+nhw,npts-nhw
         sd1(i)=deriv1(i)/tot
         sd3(i)=deriv3(i)/tot
         do k=1,nhw
            sd1(i)=sd1(i)+smoo_oper(k)*(deriv1(i-k)+deriv1(i+k))
            sd3(i)=sd3(i)+smoo_oper(k)*(deriv3(i-k)+deriv3(i+k))
         end do
         rms1d=rms1d+sd1(i)**2
         rms3d=rms3d+sd3(i)**2
      end do
      rms1d=sqrt(rms1d/(npts-nhw))
      rms3d=sqrt(rms3d/(npts-nhw))

cc  Fit a Legendre polynomial to the continuum level
cc  De-weight points where the slope or curvature is large
c      x(1)=1
c      y(1)=bufr4(1)
c      wt(1)=0.0
c      do i=2,npts-1
c         slope=(bufr4(i+1)-bufr4(i-1))/2            ! First Derivative
c         curv=(bufr4(i+1)+bufr4(i-1))/2 - bufr4(i)  ! Second Derivative
c         wt(i)=1.0/(1.0+(curv/rms_curv)**2+((slope-sbar)/rms_slope)**2)
c         x(i)=float(i)
c         y(i)=bufr4(i)
c      end do
c      x(npts)=1.0
c      y(npts)=bufr4(npts)
c      wt(npts)=0.0
c      call legendre_poly_fit(mpts,npts,x,y,wt,
c     & mterm,jac,ip,wk,rnorm,a,b)
c
cc  Decide how many terms to keep
c      cmax=-1.e-36
c      do k=1,mterm
c         c(k)=y(k)
c         if(abs(c(k)).gt.cmax) cmax=abs(c(k))
c         write(*,*)k,c(k)
c      end do
c      cmin=1.e-4*cmax
c      do k=mterm,1,-1
c         if(abs(c(k)).gt.cmin) exit
c      end do
c      nterm=k
c      write(*,*)nterm, c(nterm)
c      call legendre_poly_eval(nterm,a,b,c,npts,x,y)

c  Find the +ve zero crossings of 3'rd derivative
      open(33,file=outfile,status='unknown')
      open(34,file='lf.out',status='unknown')
      write(34,*) 2,9
      write(34,*) 'f s frx q w e r t y'
      thresh=0.25*rms3d
      nlines=0
      do i=1+nhw,npts-nhw
         if(sd3(i)*sd3(i+1).lt.0.0) then   ! zero crossing
            if(sd3(i+1)-sd3(i).lt.-0.05*rms3d) then  ! sufficiently negative-going zero crossing
            if(sd1(i+1)-sd1(i).gt.+0.00*rms1d) then  ! increasing slope (+ve curvature)
               frx=sd3(i)/(sd3(i)-sd3(i+1))
               yyx=(1-frx)*bufr4(i)+frx*bufr4(i+1)
               if(yyx.lt.1.002) then
                   nlines=nlines+1
                   freq=graw*(i+frx+m1-1)
                   stren=log(yyx/1.002)
                   write(34,'(f11.5,2f8.4,6(1pe11.3))') freq,stren,
     &             frx,sd1(i),sd1(i+1),rms1d,sd3(i),sd3(i+1),rms3d
                   write(33,llfmtw) kgas,kiso,1.00*freq,-1.5E-19*stren,
     &             0.0, 0.06, 0.10, 300.0, 0.70, -0.003, sss 
               endif
            endif
            endif
         endif
         if( (i+m1-1)*graw .gt. freq+2*width*graw) then  ! add line
           yyx=bufr4(i)
           if(yyx.lt.0.996) then
               nlines=nlines+1
               freq=graw*(i+m1-1)
               stren=log(yyx/1.002)
               write(34,'(f11.5,2f8.4,6(1pe11.3))') freq,stren,
     &         frx,sd1(i),sd1(i+1),rms1d,sd3(i),sd3(i+1),rms3d
               write(33,llfmtw) kgas,kiso,1.00*freq,-1.5E-19*stren,
     &         0.0, 0.06, 0.10, 300.0, 0.70, -0.003, ttt
           endif
         endif
      enddo
      close(33)
      close(34)
      write(*,*) nlines

c  Write ASCI derivative spectrum (for diagnostic purposes)
      write(6,*)inpath(:lnbc(inpath))
      open(lunw,file='./der_'//specname,status='unknown')
      write(lunw,*)2,4
      write(lunw,*)' f  S  SD1  SD3 '
      do i=1,npts
         write(lunw,'(f12.6,3(1pe12.4))') graw*(i+m1-1),
     &   bufr4(i)-1,10*sd1(i),250*sd3(i)
      end do
      close(lunw)

      close(lun_rlg)
      stop
      end
