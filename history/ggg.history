 GGG Code Updates.

DIURNRET     Version 4.30      2020-06-30   GCT'
 Increased the size of "ray_format” from 20 to 64 to accomodate
 the longer format statement. Aslo fixed a dozen compiler warnings.
 
GSETUP                   Version 4.70        2020-06-29   GCT
 Moved all the code that handles the cell_status_info.dat file
 into a new subroutine (read_csi.f). This facilitates handling
 of runlogs containing multiple instruments and/or sites.

 Also made a function (site_prefix) that derives a two-letter site/
 instrument prefix from the spectrum name. This avoids conflicts,
 e.g. ATMOS spectra whose names begins "pa".

 Code now checks that the cell info from the CSI file is consistent
 with the 12'th character of the spectrum name, which is "0" for
 for no cell, and if a cell is present, a letter denoting cell type.
 A warning is issued if a discrepancy is found.


summarize_linelist       version 1.22       2020-06-20 
 Now computes minimum iso. Appends LL name to output file names.

 
summarize_linelist       version 1.21       2020-06-10   GCT
 Added code to check that nlines * ncpl = fsib
 This will hopefully expose these problems before gfit is run.
 

average_results          Version 1.36        2020-06-08   JLL
apply_airmass_correction Version 1.36        2020-06-08   JLL

 Modified error propagation in the case when apply_airmass_correction
 is run before average_results; the O2 error is not added in during
 apply_airmass_correction, instead this is deferred to average_results.
 This is to avoid multiply adding the O2 error into gases that have >1
 window.


GSETUP                   Version 4.69        2020-06-09   GCT
 Commented out all the cell info statements (length, gas, temp,
 pres, etc) in the gsetup code and replaced them by reading the
 data from an auxiliary cell status info (csi) file, located in 
 $gggpath/cell_status_info/xx_cell_status_info.dat,
 where xx in the two-letter site code.
 The cell or no-cell decision is made based on comparing the time
 of the spectrum from the runlog with that from the csi file, not
 the name of the spectrum (MkIV) or the 12'th character of the
 spectrum name (TCCON).
 The numbering of the cells is now done in the same order that they
 are mentionned in the csi file. Whichever cell is mentioned first
 becomes cell_1 (-9.9km) and the other one becomes cell_2 (-8.8km).
 Once cell info is read, it is written to the .mod file every time.
 If the cell wass removed from the solar beam, then the cell length
 is set to zero in the .ray file, but the cell T/P/VMR are still
 written to the .mav file in perpetuity,  and are updated according
 to any further records in the csi file.  One problem is that the
 .mod files get written every 3 hours for the FPIT analysis and every
 day for the NCEP analysis.  What if a cell is inserted after the
 model has been made?

 Also changed the format of the .ray file to allow an extra decimal
 place for the length of the two cells. Previously, the cell lengths
 were an integer number of cm (NDACC HBr = 2cm; TCCON HCl = 10cm) which
 could be written in km to the .ray file using an f12.5 format. But
 now that we use effective cell lengths, a 10 cm cell might have an
 effective length of 10.3 cm, or 0.000103 km, requiring a f12.6 format.
 
 
GSETUP                   Version 4.67        2020-05-30   GCT
 Removed the lv and lm integers which denote the length of the
 strings containing the names of the vmr and model files.

GSETUP                   Version 4.66        2020-05-28   GCT
 Fixed a bug which, in the NCEP case, caused the .vmr file not
 to update, even when the date changed, such that all days had
 the same DMF profiles. No effect on the FPIT case.

GSETUP                   Version 4.65        2020-05-18   GCT
 Fixed bug by which "solzen" was being re-calculated based on
 "urth", for the ground-based cases. This should only happen
 for the orbital case.

 Also  I fixed a minor bug in GSETUP, which caused GSETUP to
 crash in the no-model case, even for NCEP, rather than use
 the back-up model.

GSETUP                   Version 4.64        2020-05-09   GCT 
 GSETUP now stops is there is an error reading the runlog,
 perhaps due to a "******" in one of the fields. Previously,
 this error was treated no differently to an EOF, which resulted
 in the spectra after the "******" being totally ignored without
 warning.

ZENCORR     Version 1.55     2020-05-09      GCT 
 Replaced zenoff by wlimit(zenoff,'f6.4') to prevent "******"
 being written to the new runlog when zenoff < -1.0000 deg.

GFIT                     Version 5.28        2020-04-24   GCT '
 Modified abscoj.f to include EWVB into the non-Voigt calculation
 of lineshape. Previously it was only done in the Voigt case.

 Also made a correction to atmnv.275: the first three O2 lines
 (below 7700 cm-1) had TDSBHW=0.0 when they should have been
 set to the TDPBHW value. The O2 lines above 7700 cm-1 were fine.
 This currently makes no difference because the O2 SBHW and TDSBHW
 values are unused. But the fix will be needed in the future when
 we restore the capability to compute pure O2 spectra.

collate_results          Version 2.06        2020-04-20 
 Replaced "asza" in the column header of the .xsw files by
 "solzen" (=asza+zenoff).  Previously, this quantity was
 mis-reported as "asza". Makes no difference to the retrievals.
 But causes confusion when analyzing bal and orb spectra when
 zenoff is non-zero.

collate_results          Version 2.06        2020-04-19 
 Fixed a bug by which when the gas in the name of the .col
 file, e.g. hdo_4599.xxxxx.col was NOT the first target gas,
 it could occasionally read the first target gas as HDO.
 This was only a problem when using the GGG code abnormally,
 for example, remaming .col files using symbolic links.

 GSETUP                   Version 4.63        2020-04-13  
 Changed the criterion for the time/distance to trigger a new
 model/vmr. This was necessary for the ATMOS occultations each
 of which uses a different model. Although consective occultations
 are in different hemispheres, creating a large spatial separation,
 an occultation can sometimes be missing (never downlinked) so
 consecutive sunsets can be quite close together in time (2 hours)
 and spatially.

 average_results          Version 1.34        2020-04-11   GCT
 Bug was causing the wrong number of header lines to be written to
 the .xav file when the "sf=" line was present. This was because
 this line is not transferred from the .xsw file to the .xav file.
 So the number of header lines in the .xav file is now given by
    nlhead_xsw + 1 - sl_flag
 versus
    nlhead_xsw + 1
 previously, where sf_flag=0/1 

 GFIT                     Version 5.27        2020-04-04   GCT 
 Several changes to enable the writing of the channel fringe
 coefficients into the .cbf file. Firstly, the subroutine
 subtract_channel_fringes was disbanded: the code was placed
 directly inside the do_retrieval.f, from where it used to be
 called. The subroutine fit_channel_fringe.f is still used
 but is now called directly from do_retrieval.f. The point of
 all this is to bring the channel fringe coefficients up one
 level, closer to spectrum_loop.

 To facilitate this change, I have restricted the CF fitting to one
 fringe per window. Previously it was two, which today seems a bit
 inexplicable: previously you could fit 0 or 2 channel fringes, but
 not 1. Now you can fit 0 or 1. I think that 1 is enough for
 estimating the amplitude of the dominant channel fringe. Not sure
 that fitting a second, weaker, fringe is really that helpful.

 The data below show the output file for the benchmark case using
 the new fco2_6154  window. The reported fringes are very weak
 (0.07%) and of low frequency (only two and a half periods across
 the whole 76 cm-1 wide window). Probably not a true channel fringe
 at all – just a couple of tiny inflections in the continuum. 
-------------------------------
           9           8
Channel Fringe info and  Continuum Basis Function Coefficients
CF_Amp is divided by continuum level
CF_Period is in units of cm-1
CF_Phase is in units of rads
CBF_1 is the continuum level (CL)
CBF_2 is the continuum tilt (CT)
CBF_3 is the continuum curvature (CC)
     Spectrum_Name    CFamp/CL CFperiod CFphase  CBF_01  CBF_02  CBF_03  CBF_04
“pa20040721saaaaa.043” 0.00064  36.564  0.651  2.7187E-01 0.0124 -0.0007 -0.0002
“pa20040721saaaaa.119” 0.00068  35.858  0.778  2.6431E-01 0.0123 -0.0007 -0.0002
“pa20041222saaaaa.019” 0.00071  31.499  0.768  3.9785E-01 0.0142 -0.0007 -0.0003
“pa20041222saaaaa.020” 0.00069  31.883  0.816  3.9851E-01 0.0142 -0.0007 -0.0003
-----------------------------------------
 If the “cf” option were *not* invoked, the coefficients in columns
 2,3,4 would all be zero, to facilitate automatic reading of these
 .cbf files.
The number “9” at the top of the file is the number of header lines.
The number “8” at the top is the number of columns (NCOL). So the
 CBF values always start at column 5 and run through to the NCOL
 value at the top (8 in this example). 

CBF_1 is in E-format since it can take any value depending on the
scaling of the spectra (several million for Kitt Peak). The higher
CBFs are fractions of CBF_1 and are therefore nearly always between
 +/- 1.  
Spectrum names are in quotes to facilitate free-format reading .
So each data record could be read by:
   read(lunr_cbf,*,end=99)specname,cfamp,cfper,cfphase,(cbf(j),j=1,ncol-4)


$gggpath/windows/gnd/tccon.gnd
 Defined three windows in which GFIT can accurately measure
 channel fringes.  In these windows, ground-based spectra can
 be well fitted with small residuals, so that any channeling
 may be discerned above the other residuals. They also need to
 be at least 30 cm-1 wide in order for GFIT to be able to detect
 long period fringes (up to 10 cm-1).

 2644.35 100.10  15 1 1 0  ncbf=3  fs  sg  cf    : fco2  h2o  hdo  ch4
 6154.70  75.50  15 1 1 0  ncbf=3  fs  sg  cf    : fco2 h2o hdo ch4
12881.20  31.60  15 1 1 0  ncbf=3  fs  sg  cf    : fco2 h2o o2

 The "fco2" retrieval parameter stops these windows being confused
 with, or averaged with, the other co2 windows. There is one window
 for each detector type: InSb=2644; InGaAs=6154; Si=12881. In each
 of these windows the solar linelist was adjusted to minimize the
 solar-induced residuals.

 Also added the following window for the measurement of Zero Level
 Offsets in the InGaAs detector:
  4852.20  87.60  15 1 1 0  ncbf=3  fs  sg  nv          : zco2 h2o hdo
 
 These extra parameters (fco2, zco2) were added to the pa_qc.dat file.
 Otherwise I got complaints from the code.


 GFIT                     Version 5.27        2020-03-24   GCT 
  Added a check for the presence of the atmnv.275 linelist in
  telluric_linelists.md5. The atmnv_flag is set to 1 if the
  telluric_linelists.md5 file contains "atmnv.275", otherwise
  it remains 0.  Previously, if the atmnv.275 linelist wasn't
  listed, the code went ahead with the LM calculation anyway,
  and you ended up with a very poor fit.

  Now, the following if-statement in abscoj.f prevents this.
    if(calc_nv.eqv..true.)then
       if(atmnv_flag.le.0) stop
     & 'atmnv.275 linelist not found in telluric_linelists.md5'


 GFIT                     Version 5.26        2020-03-14   GCT 
  Added an extra column in the isotopologs.dat file containing
  the fraction by which H2O-broadening exceeds air broadening on
  a per molecule basis.  This Extra Water Vapor Broadening (EWVB)
  is strongly gas dependent (It is also J- and hence line-dependent
  but we ignore this complication). The total line width is given by

     PBHW = SBHW*VMR(gas) + ABHW*[1-VMR(gas)+EWVB(gas)*VMR(wv)]

  This is actually implemented in 2 steps:
     PBHW = SBHW*VMR(gas) + ABHW*[1-VMR(gas)]
     PBHW = PBHW + ABHW*EWVB(gas)*VMR(wv)

  Having a permanent dipole, H2O is a more effective broadener
  than air, so the EWVB values are always +ve. Moreover, molecules
  with a permanent dipole are more affected than those without.
  For example. the broadening of O2 is enhanced by just 11% by
  collisions with WV rather than air, whereas CO is enhanced by
  100%, and NH3 by 250%. And we know that the self-broadening of
  H2O is typically 5 times larger than the air-broadening, but this
  is not included in the EWVB because it is already accounted for
  in the SBHW.

  Thinking about this more conceptually, there is a square matrix
  describing the efficiency of gas1 being broadened by gas2.
  The self-broadening of each gas is described by the diagonal.
  The matrix is asymmetrical because the enhanced broadening of
  CO by H2O won't, in general, match that of H2O broadened by CO.

  The air-broadening is defined by a weighted average of the N2
  and O2 columns. The water vapor broadening is defined by the
  H2O column. This is a special case because the atmospheric H2O
  mole fraction can reach 4% and it is a very efficient broadener.
  Unfortunately there is no parameter for the H2O broadening in
  HITRAN. We therefore assume that it correlates with air
  broadening, such that lines with small ABHW values will also
  have small H2O-broadening, and vice versa.

  This change required modifications to all the programs and subs
  that read the isotopologs.dat file, (gfit, abscoj, gsetup, vll,
  summarize_linelist, read_isotopologs, tdls, etc) either directly
  or via calling the read_isotopologs.f subroutine. 
  
  
 GFIT                     Version 5.25        2020-02-14   GCT 
  Defined parameter MP=50 inside Cal_FullML.f. This avoids having to
  hardwire NP inside abscoj.f and pass its value down to Cal_FullLM
  in the subroutine argument list.  Thus NP is no longer defined
  twice: first in absco and again in the LM file headers.

  This initially caused a bug in the code (Cal_FullLM.f)
  that reads the relaxation matrices via the statements below
      do i=1,np
         read(Wfile,'('//cnp//'f9.6)') W_air(i,:)
         read(WTfile,'('//cnp//'f5.2)') WT_air(i,:)
         read(Wfile2,'('//cnp//'f9.6)') W_self(i,:)
         read(WTfile2,'('//cnp//'f5.2)') WT_self(i,:)
      end do !End loop over reading W matrix elements

 Each read tried to get mp=50 data values, but if np=49
 then you will hit EOF before the loop completes, due to
 the mismatch between the physical and declared dimensions
 of the matrices. So these read-statements were changed to
      do i=1,np
         read(Wfile,'('//cnp//'f9.6)')(W_air(i,j),j=1,np)
         read(WTfile,'('//cnp//'f5.2)')(WT_air(i,j),j=1,np)
         read(Wfile2,'('//cnp//'f9.6)')(W_self(i,j),j=1,np)
         read(WTfile2,'('//cnp//'f5.2)')(WT_self(i,j),j=1,np)
      end do !End loop over reading W matrix elements

  While I was doing all this, I fixed over a dozen compiler warmings
  about variable type mismatches, for example, converting a complex
  number to an integer. So rather than
     KK=dcmplx
  we now have
     KK=int(dreal(dcmplx))
  so that the complex value is first converted to real, discarding
  the imaginarty component, and then to integer. This seems to be
  what the KK=dcmplx does when you ignore the compiler warnings.

  Also there were compiler warnings about exact comparisons of reals
  inside if-statements, such as
     if(a.eq.b) then
  or 
     if(a.ne.b) then

  These were changed to
     if(abs(a-b).le.0.0) then
  and
     if(abs(a-b).gt.0.0) then
  which seems to make the compiler happier.

GFIT                     Version 5.24        2020-01-31   GCT 
  Fixed a bug by which when the VMRs were negative, e.g. to fit
  ratioed lab spectra in which the empty cell contained more H2O
  contamination than the filled cell, the effective line width
  could become negative (for narrow lines under low-P conditions)
  resulting in the line being skipped, even though is was quite
  strong, in a negative sense. The skippping of such lines could
  happen quite abruptly as the assumed pressure were reduced by
  a small amount. This was fixed by changing
         wmf_tot = Sum {fia(j).wmf(j)}
 to
         wmf_tot = Sum {fia(j).abs[wmf(j)]}
  where the sum is over the various isotopologs of a given gas and
  fia is the Fractional Isotopic Abundance of the j'th isotopolog.
  previously, wmf_tot could be negative, leading to the pbhw being
  negative via the equation
         pbhw=abhw+wmf_tot*(sbhw-abhw)
  and if pbhw was negative, the y-value would become negative via
         y=pbhw*p(i)*trat(i)**tdpbhw/dopphwem
  and if y was negative, flinwid would become nagative via equation
         flinwid=dble((3+amin1(y/frac, xxx)))/godw 

  I re-iterate: this was only a bug when negative vmrs were invoked.

isotopologs.dat
  Added butane (n-C4H10) and isoprene (C5H8) to isotopologs.dat
  This required increasing the number of vibrational modes to
  mvmode=36 in ggg_int_params, and modifying ther format-
  statement near the top of isotopologs.dat. Programs that
  read the isotopologs.dat file (.e.g. cmc2mavray.f) also 
  were modified to extend the string length of the .mav file
  column headers.

  Also added the capability to comment out lines from the
  isotopologs.dat file using a ";" or a ":" in the first
  column of the line/record. This can be useful when
  evaluating one set of vibrational frequencies and RPF
  exponent against another (you can retain the old entry
  until you are happy that the new one is really better.

collate_results          Version 2.05        2020-01-22   GCT
  Added "amal" to the list of auxillary parameters that are
  transferred from the runlog to the .xsw files, increasing
  nauxcol from 23 to 24.

collate_results          Version 2.04        2020-01-12   GCT
  Created a new option "o" which collates the original vertical
  columns (OVCs). This allows closer investigation of the a
  priori columns.

GFIT                     Version 5.23        2020-01-11   GCT 
  Removed the factor 2.5 that scaled the measurement noise in
  spectrum_loop.f. Without a commeasurate decrease in the SNR,
  this will lead to GFIT paying less attention to the priors.

adjust_solar_linelist  2019-12-30 
  When fitting a wide window (340 cm-1; 45,000 spectral points) with
  21 spectra and MLINE=680, I was getting run-time array-bound
  violations from line 988 of hfti.f because the pointers JCBASE &
  LPIVOT were exceeding 2^31, which is the I*4 signed integer limit,
  and were wrapping around to huge negative values. So I changed
  these variables to I*8 and the problem went away. Never seen this
  behavior before. Previously, there would be a linker error when
  more than 2GB of memory were claimed, which could be suppressed by
  using the "mcmodel-medium" compiler option (see 2015-11-22 entry)
  for these large memory cases.

  So there are two mysteries: 1) Why do I no longer need the 
  "mcmodel-medium" option to handle cases where more than 2GB
  of memory is grabbed. Perhaps the GFORTRAN compiler upgrade has
  made this option unnecessary. 2) Why didn't JCBASE & LPIVOT ever
  exceed 2^31 in the past when doing large memory cases.

  At the same time, I made some mods to avoid compiler warnings e.g.
  "Equality comparison for REAL(4)"

adjust_solar_linelist  2019-12-28   GCT
  Changes to use memory more efficiently. Spectra that are skipped by
  ASL (e.g. high-airmas) no longer have empty columns in the PD matrix.
  This was achieved by replacing the "cycle" statements by "go to 22".
  Six vectors of dimension MLINE which were previously R*8 are now R*4.
  Also, replaced if statements of the form  if(x.eq.y)
  by if(abs(x-y).le.0) to avoid compiler warnings.

GFIT                     Version 5.23        2019-12-22   GCT 
  Up to now, write_spt writes the measured and calculated sprectra
  as transmittances, i.e.
     Tm(i) = [Obsrvd(i)/Cont(i)-XZO]/(1-XZO)
     Tc(i) = [Calcul(i)/Cont(i)-XZO]/(1-XZO)
  There are two problems with this. Firstly, if Cont is zero anywhere,
  then Inf will appear in the spt output file which will cause any of
  the using programs (e.g. adjust_solar_linelist, PFIT, RESID_AVG) to
  crash. Secondly, if Cont crosses zero, which can happen in broad
  blacked-out regions, this will cause an anti-symmetric spike in Tm
  and the residuals. No spike appears in Tc because 
     Calcul = Cont*Trans
  These spikes are in themselves harmless because the spectral fitting
  is done in Obsrvd-space and the division by Cont is only done
  for the purpose of plotting. But the spikes tend to dwarf the real
  spectral features.
    More importantly, when using RESID_AVG to average the residuals,
  if the averaging is done in transmittance space, then everywhere
  that an input spectrum had a spike, so will the average residuals.
  But if the averaging is done in Obsrvd space, spikes will only
  appear in the average residuals when the average Cont crosses zero,
  which will be much less common.
    The solution is for write_spt to output Obsrvd(i), Calcul(i),
  Cont(i) and XZO to write_spt.  PFIT can then compute Tm and Tc
  from the equations above. If there's an Inf, then IDL will now
  simply skip that point, but will plot all the others.
    RESID_AVG will then average all the OBSRVD, CALCUL, and CONT
  vectors and the XZO values, then plot
      Tm_avg(i) = [Obsrvd_avg(i)/Cont_avg(i)-XZO_avg]/(1-XZO_avg)
      Tc_avg(i) = [Calcul_avg(i)/Cont_avg(i)-XZO_avg]/(1-XZO_avg)
  This will only produce spikes where Cont_avg crosses zero, not
  where every individual Cont crosses zero.  This means that XZO
  has to now be included in the SPT file header.
    This has no effect on the retrieved column amounts and VSFs.

GFIT                     Version 5.22        2019-12-21   GCT 
 Tightened the a priori constraints on the continuum tilt and
 curvature in the file $gggpath/apriori/gfit_ap.gnd
-  0.0   0.0318  ct  !  Continuum Tilt
+  0.0   0.025   ct  !  Continuum Tilt
-  0.0   0.500   cc  !  Continuum Curvature
+  0.0   0.125   cc  !  Continuum Curvature
 Note: reducing the cc uncertainty also tightens the constraints
 on all the higher order continuum basis functions by the same
 factor 4. The motivation for this change was to reduce the risk
 of the continuum crossing zero in blacked out spectral regions.

collate_results          Version 2.03        2019-12-09   GCT'
  Program now has two modes of operation.  If an "sf=" is found
  in the command line of *any* of the .col files, then an extra
  header line is included in the .xsw file containing the sf-values,
  even if they're all 1.0.  If no "sf=' is found, the program works
  as previously.

average_results          Version 2.00        2019-11-30   GCT
  Major change to the average_results program. In the event that the
  .xsw file ontains a header line with sf-values for each window, 
  these values are used for the window biases, instead of computing
  them on the fly.  These fixed sf-values for each window originate
  in the window file. From here, gsetup puts them into the .ggg files,
  from where gfit transfers them to the .col files, and collate_results
  reads them and writes them to a header line in the .xsw file.
 
  The motivation for this was to achieve better consistency from site to
  site and over analysis periods.  Previously, analyzing data from, say,
  2004 to 2018 and again from 2004 to 2019, resulted in .vav files that
  differed slightly for all years.
 
  Although the subroutines (average_with_xxx_bias) are still called, it is
  only with  mit=1, versus 25 previously. Previously, the Ybar and scale
  values were found iteratively by minimizing
    Sum_i Sum_j ((Yval(i,j)-Bias(j)*Ybar(i))/Yerr(i,j))^2
  But now that Bias(j) values are fixed, the problem is linear in Ybar
  and can be solved without iteration. So the averaging subroutines now
  compute Ybar using the fixed bias value, then compute better bias values.
  Without further iteration the updated bias values cannot affect Ybar.
 
  The program has two modes of operation. If the 6'th row of the .xsw
  input file header begins with "sf=", then the subsequent bias values
  are assumed for the correction, The program achieves this by setting
  mit=1, suppressing iteration. If no "sf=" line is found, then mit is
  set to 25 and the program iterates to find its own bias values, as
  it did previously. Thus the program can be made to function as
  previously simply by removing the sf= line from the header (and
  reducing nlhead from 8 to 7). In other words, the program will
  process old-syle .xsw files in the old way (iterating) and will
  process new-syle .xsw files by applying the sf-values given in
  the header, without any code changes.

  average_results could have read the windows file directly to get the
  bias factors, rather than passing them thru the .ggg, .col, and .vsw
  files. But I wanted to keep the number of input files to 1, and it
  makes sense to have all the relevant info together in one file (.xsw).

GSETUP                   Version 4.56        2019-11-27   GCT
  Changed the coefficient of the HDO/H2O ratio from
      &                  0.16*(8.0+log10(h2o_dmf(ilev))) ! HDO
  to
      &                  0.14*(8.0+log10(h2o_dmf(ilev))) ! HDO
  in order to get the TCCON VSF_hdo valuess closer to 1.0
  (currently ~0.8).


GFIT                     Version 5.21        2019-11-20   GCT 
  Increased lspmax from 0 to 12, to allow inclusion of "Spectrum"
 sub-string in the column headers of empty .col files.

i2s     version 3.21       2019-11-13    GCT
  Replaced
     if(nsubstr.eq.5) runno = run_start 
  with
     if(nsubstr.eq.5) runno = run_start + mod(runno-1,2)
  in case the first FWD scan is missing

i2s     version 3.20       2019-11-12    GCT
  Changed strings of length 99 to 128 (see bug report #249)

AVERAGE_RESULTS             version 1.34    2020-03-20  JLL
APPLY_AIRMASS_CORRECTION    version 1.35    2020-03-20  JLL
APPLY_INSITU_CORRECTION     version 1.38    2020-03-20  JLL
DERIVE_AIRMASS_CORRECTION   version 1.26    2020-03-20  JLL

Made the necessary modifications to apply airmass corrections
to either averaged Xgas values or individual windows' Xgas
values. To support this, apply_airmass_correction and
apply_insitu_correction now use separate correction*.dat files.
This allows the insitu correction to be per gas and the airmass
correction to be per window. It also allows apply_airmass_correction
to work on either the .vsw or .vav file as there are correction*.dat
files for both.

derive_airmass_correction underwent the most drastic changes.
It now supports operating on a .vav file to derive per-gas
correction factors or a .vsw file to deriver per-window
factors. If working on a .vsw file, it also needs the .vav
file to get the averaged H2O column to water correct Xluft.
On top of that, the weighting of high-SZA spectra is no
longer reduced, and days with fewer spectra than the number
of basis functions are now explicitly skipped to avoid 
introducing NaNs into the results.

COLLATE_RESULTS             version 2.06a   2020-03-12  JLL
AVERAGE_RESULTS             version 1.33a   2020-03-12  JLL
APPLY_AIRMASS_CORRECTION    version 1.34a   2020-03-12  JLL
APPLY_INSITU_CORRECTION     version 1.37a   2020-03-12  JLL
WRITE_OFFICIAL_OUTPUT_FILE  version 1.37    2020-03-12  JLL
WRITE_EOF                   version 0.49a   2020-03-12  JLL
ERROR_SCALE_FACTOR          version 1.23a   2020-03-12  JLL
APPLY_TCOR                  version 1.28    2020-03-12  JLL
DERIVE_AIRMASS_CORRECTION   version 1.25    2020-03-12  JLL
APPLY_GHOST_CORRECTION      version 1.13    2020-03-12  JLL

Modified many of the post processing programs to be more
consistent in their treatment of the output file headers.
collate_results through apply_insitu_correction now use
the new read_postproc_header and write_postproc_header
subroutines which enforce standard format. The rest have
more customized header treatment, but now use the same
format for the first line, which now comes from the
new postproc_params.f inclusion.

i2s     version 3.19       2019-11-11    GCT
 Replaced the statement
     runno=run_start
by
     if(nsubstr.eq.5) runno=run_start
where run_start is parameter #28 in the i2s_xxxx.in
file. So the assignment is now only performed for the
slice-ipp case (nsubsrt=5) and not the opus-ipp case.

ADDLMFLAG    Version 1.01     2019-11-03    GCT
 Reduced number of user-supplied input files from 2 to 1.
 Now only the name of the primary linelist is given; 
 the secondary linelist is hardwired to 
 $gggpath/linelist/addlmflag_official.161
 which is currently only 1177 lines. This is now the
 only linelist that is read to memory in its entirity.
 The primary linelist is read/modified/re-written
 line-by-line, which vastly reduces memory footprint.
 
 Having only one input linelist also reduces the
 chances of mis-ordering the two linelists, which
 would have produced garbage results.

GSETUP                   Version 4.55        2019-10-20   GCT
  Simplified code to generate name of FPIT .mod file.

GSETUP                   Version 4.54        2019-10-05   GCT
 Mods to handle changes to model & vmr names.

summarize_linelist       version 1.17       2019-10-03
  Now flags identical, duplicated lines as anomalies.

cmc2mavray    Version 1.18    2019-09-26   GCT 
  Now reads runlog to ensure correspondance between spectra
  listed in runlog and .cmc file.

GSETUP                   Version 4.53        2019-09-24   GCT 
 Fixed a bug by which the vmr profiles were adjusted in the 'bal'
 case when they shouldn't have been.

GSETUP                   Version 4.52        2019-09-18   GCT 
 Fixed bug by which the adjustments/corrections to the vmr profiles
 were not being performed in the NCEP case, having been skipped for
 FPIT.

 GSETUP                   Version 4.51        2019-09-06   GCT 
  hg added the new levels file: ap_51_level_0_to_70km.gnd
 which locates the altitudes in an arithmatic progression:
 0.00, 0.42, 0.88, 1.38 ....... 62.98, 65.28, 67.62, 70.00
 Since this file MUST be used for TCCON processing, its
 name is present in an if-statement inside gsetup.f.

 GSETUP                   Version 4.50        2019-09-05   GCT 
  Modified code in gsetup.f that over-writes the h2o vmr
 profile from the .vmrs file with that from the .mod file.

CREATE_RUNLOG    Version 8.78     2019-08-21    GCT
  For SNR values that exceed 9999, create_runlog writes 9999
 into runlog to avoid format overflow (*****). Similarly, for
 SNR < -999 it writes -999.

i2s     version 3.18       2019-08-14    GCT
  Added the igram name into the OPUS spectrum headers.  Used the
 3-letter mnemonic "IGN" and it is located just before the scan
 number (RSN). For slices, IGN contains the path to the slices.

derive_airmass_correction        1.24      2019-07-20     GCT
  Changes to enable airmass corrections be made for OCS.
  Also to prevent compiler warnings (R*8 to R*4 conversion).

SS2AMES                  Version 3.23     2019-07-19     GCT  
  Increased parameter mcol from 102 to 106.

 GSETUP                   Version 4.47        2019-07-11   GCT 
  Added some pseudo-code to the comment section at the beginning.
  Changed a few variable names

 GSETUP                   Version 4.46        2019-07-08   GCT
   Major restructuring. The user is no longer prompted for models
 or vmrs. Instead, a back-up model (jplsummr.mod) and vmr set
 (summer_35N.vmr) are hard-wired into the code. If a default
 mod/vmr file (specified by date/time) is not found, the program
 will no longer keep using the previous model in this situation.
 An advantage of this is that the program always asks 4 questions:
   1) Obs Geometry
   2) Runlog
   3) Levels
   4) windows
   5) Std FPIT analysis
 which facilitates automated operation using a batch file.
 Previously, there were two more possible questions to select
   6) Model
   7) VMR set

create_sunrun     Version 2.14     2019-07-04     GCT
  Minor mods.

i2s     version 3.17       2019-07-04    GCT
   Added the new compute_snr subroutine inside save_to_file and
 writes the value into the OPUS header as a new parameter (SNR).

CREATE_RUNLOG    Version 8.76     2019-07-04    GCT
   Reads the value of SNR from the OPUS header, rather than
 writing a fixed value of 1000 into the runlog. SNR=1000
 is still the default in the event of an old spectrum not
 having the new SNR value in its OPUS header.

   GSETUP                   Version 4.45        2019-06-22   GCT
 Replaced the implicit "1   continue" loop over spectra to an
 explicit loop over spectra. Replaced the "if() goto 1" statements
 with if() exit or if() cycle
 The explicit loop required indenting a large chunk of code by
 three extra spaces, so lots of lines were changed.

mod_maker_10.8   2019-06-21   GCT

  In the write_mod subroutine, replaced
     for k=0,n_ussa-1 do begin
   with
     for k=1,n_ussa-1 do begin

 The former was resulting in two entries for the 10 mbar level
 in the .mod file: one from NCEP and one from USSA.

   collate_results          Version 2.00        2019-06-08   GCT
 To make the code more concise, I replaced the 22 assignment
 statements, of the form   yaux(15,irow)=tins
 with 5-line read and write statements into yaux_string.
 These assignments happen twice, so in total 34 lines are saved.

   DIURNRET     Version 4.23      2019-06-07   GCT'
 Minor changes in diurnret.f: e.g. to accommodate format change in
 .mav file.

   GSETUP                   Version 4.43        2019-06-03   GCT
 Minor modifications to gsetup and some of its subroutines to
 prevent compiler warnings on the Mac (R*8 to R*4 conversion).

   i2s     version 3.16       2019-05-10    GCT
 Moved the vintrp.f subroutine from i2s_processing.f into
 phase_corr_oper.f subroutine, from where it is called.

cmc2mavray    Version 1.17    2019-05-03   GCT 
  D2O was not being handled correctly.  Changed
                   if( gasindex(jspeci).eq.49) vmr_mav(jspeci)=
      &                  vmr_mav(jspeci)/
      &                  fia(specindex(kgas_cmc(igas,jcell))+1)
   to
                   if(gasindex(jspeci).eq.49 .or. gasindex(jspeci).eq.71)
      &                  vmr_mav(jspeci)=vmr_mav(jspeci)/
      &                  fia(specindex(kgas_cmc(igas,jcell))+1)

and also modified the isotopolog.dat file to insert the 
correct isotopic fractionations for D2O, which were previously
set to the H2O values.

VLL        Version 2.34        2019-04-24        GCT 
  Added pll.101 linelist to menu.

   GSETUP                   Version 4.42        2019-03-07   GCT
 Modified the time trend of the N2O a priori from 0.1%/year to
 0.26% per year. No idea why it was previously so much in error.
 Probably I was confusing % with ppb.  Also decreased the N2O
 vmr profiles by 1 ppb at the lower altitudes for better
 agreement with 0.5*(MLO_SMO) in the tropics.

 Increased the linear CH4 time trend from 0.3%/year to 0.45%/year,
 and added an anti-symmetric perturbation to model the 1999-2006
 hesitation of the CH4 increase.

   GFIT                     Version 5.18        2019-02-25   GCT 
 In abscoj.f, changed the water-broadening to air-broadening
 ratio from 1.35 to 1.80 as reccommended by J-M Hartman. Also
 added D2O (gas #71) as a H2O broadener. The original 1.35
 value was determined empirically in the early days of TCCON
 by nulling the H2O-dependence of xCO2.  So the net result of
 this is to change from
            if(kgas.ne.1 .and. kgas.ne.49 )
     &      pbhw=pbhw+0.35*abhw*wmf(specindex(1)+1,i)
 to
            if(kgas.ne.1 .and. kgas.ne.49 .and. kgas.ne.71)
     &      pbhw=pbhw+0.80*abhw*wmf(specindex(1)+1,i)

 Also, fixed a bug in hitran_to_atmos_gas_numbering.f 
 Previously the kiso.ge.7 and kiso.ge.4 elseif statements
 were incorrectly inverted, which meant that for D2O
 (kiso=7, kiso=1) kgas was set to 49 and kiso set to 4. 
 Since gas 49 (HDO) only has 3 isotopologs, the code
 would interpret the D2O lines as gas # 50, isotopolog 0.
 The corrected if-statement is below
      if(kgas.le.0) then
         stop 'hitran_to_atmos_gas_numbering: kgas.le.0'
      elseif(kgas.gt.mgashit) then
         write(*,*) 'kgas,mgashit=',kgas,mgashit
         stop 'hitran_to_atmos_gas_numbering: kgas.gt.mgashit'
x     elseif(kgas.eq.1 .and. kiso.ge.7) then
x        kgas=71
x        kiso=1
y     elseif(kgas.eq.1 .and. kiso.ge.4) then
y        kgas=49
y        kiso=kiso-3
      else
         kgas=llindex(kgas)
      endif

This only affected the analysis of D-enriched lab spectra.


 GFIT                     Version 5.17        2019-02-21   GCT 
In do_retrieval.f, reactiviated the following if-statement:

c  Limit TILT if it exceeds 1.0/Sqrt(3)
c  The TILT basis function has end values of +/- Sqrt(3).
         if( abs(cont_tilt) .gt. 1.0/1.732 ) then
            tilt_new=sign(1.0/1.732,cont_tilt)
            write(6,*)' Reducing TILT: ',cont_tilt,tilt_new
            cont_tilt=tilt_new
            if(ncbf.gt.1) cx(ipcl+1)=cont_tilt
         endif

 This was previously installed and then commented out.
 I don't remember why.  Its purpose is to stop the tilt
 from ever being so large that the continuum crossed zero.
 Where this happens, a huge glitch is seen in the PFIT
 residuals, because although the fitting is done by
 minimizing (Tm - Tc.Cont)^2, PFIT actually displays
 Tm/Cont and Tc, in order to convert to transmittances.
 The zero crossing of the continuum often happens in
 saturated windows where there really isn't much
 resistance to crazy tilt values that push parts of the
 continuum negative.  You would think that the a priori
 constraint would stop this but it doesn't.

 I think that the problem is that there are some spectra
 where the continuum signal really does drop by a factor
 2 or 3 across a wide window near the edge of the bandpass.
 And if you allow a loose fitting of the continuum, GFIT
 will obtain excellent fits for these cases. But if you
 were to tighted up the apriori constraint sufficiently to
 always prevent negative continuum values, then this would
 also prevent GFIT from fitting this type of spectrum.
 So it might be better to impose a hard tilt limit than
 tighten the a priori constraint.


GSETUP                   Version 4.41        2019-02-17   GCT
 Added a quadratic term to the CO2 secular trend (currently
 assumed linear at 0.52% per year) to apply_secular_trends.f.
         if(jgas.eq.2) vmrout(jgas,ilev)=vmrout(jgas,ilev)*
     &   (1+((tdiff-aoa)/155.0)**2)
 This term does nothing in 2005 (the date of the reference
 vmr set) but increases CO2 in the earlier and later years.
 To improve the fits to in situ co2 data, the linear trend
 was reduced from 0.52% to 0.51% per year.

 GFIT                     Version 5.16        2019-02-14   GCT 
 Added an if-statement to gfit.f to check that a valid solar
 linelist exists if " sg ", " so ", or "so/" appear in the command
 line.  Previously, this wasn't checked until after abscoj was
 called and the gas absorption coefficients had been computed,
 which wasted time if the solar linelist was needed and missing.

 GFIT                     Version 5.15        2019-02-12   GCT 
 In the isotopologs.dat file, reduced the Delta value for 1co2 from
 10 to 0 per mil. The previous value is an anachronism: 15 years ago
 it was an easy way to compensate for spectroscopic biases between CO2
 isotopologs.  Then it was forgotten.  Since then, the linelist has
 improved considerably, to the point that the 10 per mil adjustment
 is now an impediment to getting good spectral fits in windows where
 multiple CO2 isotopologs absorb significantly but are fitted together
 (as “co2”), not separately. The previous 10 per mil also degrades the
 window-to-window consistency of the retrieved CO2 amounts.

 To confirm that setting the delta to zero improves the situation, I
 analyzed MkIV balloon, MkIV ground, and TCCON ground-based spectra
 with the Delta first set to 10 and then again set to zero. 

 [When analyzing lab spectra, the .mav file is created by cmc2mavray
 which only reads the first 6 columns of the isotopologs.dat and there-
 fore doesn't read the Delta values. So changing Delta has no effect
 on the lab retrievals that use cmc2mavray to create the .mav file]

 In windows where 1co2 is the only absorber, reducing Delta from 10
 to 0 per mil increased the VSF by 1% with no impact on the spectral
 fitting residuals.  In windows where 1co2 absorption is negligible
 there is no change to the VSF_co2 or the RMS fitting residuals.
 In windows with absorption from both 1co2 and heavy isotopologs the
 situation is more complicated. The VSF_co2 increased by <1% and the
 spectral fits generally improved, only worsening in the 3496 cm-1
 balloon case. The improved RMS fits is proof that the 10 per mil was
 wrong. Also, the window-to-window VSF_co2 variation became smaller
 after zeroing Delta, even though in some cases the mean VSF moved
 away from 1.0. So previously, the windows dominated by heavy CO2
 isotopologs produced slightly higher VSFs than the windows dominated
 by 1co2.  Now the VSFs are more consistent, but higher by about 0.7%
 on average.

i2s     version 3.15       2019-02-11    GCT
  Fixed bug that caused the double-sided spectrum headers to
  have a factor-2 too many spectral points and a dispersion
  to small by a factor 2.  This error was propagated into
  the runlog.

i2s     version 3.14       2019-02-04    GCT
  Doubled the size of NFFT in the double-sided case.
  Defining the nlimit valiable to avoid duplicating code.
     nlimit = nlong    in single-sided case
     nlimit = nshort   in double-sided case
  2*nlimit defines the number of points that have to be FFT'd

 CREATE_RUNLOG    Version 8.75     2019-02-02    GCT
  Modified code to convert APF='NBW' in the OPUS spectrum header
  into APF='N1'. 

i2s     version 3.13       2019-02-01    GCT
  Fixed a bug that was causing the OPS parameter in the spectrum
  header to be over-estimated. Firstly, the half-length of the
  PCO was not being subtracted. Secondly, for double-sided scans,
  the ZPD position was being reported as the OPS value, when in
  fact half the time it would be NIP-IZPD.

  Thankfully, the OPS parameter isn't really used for anything,
  at least not in the normal single-sided scans. And in most
  double-sided scans, the ZPD is very close to the middle and
  so OPS ~ OPL ~ IZPD. But if in future an instrument without
  ZPD in the middle does double-sided scans, i2s will now get
  it right. 

 GFIT                     Version 5.14        2019-01-25   GCT 
  Modified write_spt.f to change the format of the pressure (peff)
  written to the header line of the SPT files from f9.6 to 1pe10.3.
  The f-format is inappropriate for a quantity with a valid range
  covering 5 orders of magnitude.
  The corresponding change was also made to pfit.pro.  This change
  was to accommodate high-pressure lab spectra over 100 atm, while
  still allowing sufficient precision for low pressure measurements
  below 1 mbar = 0.001 atm.

i2s     version 3.12       2018-12-24    GCT
  Renamed (hg mv) i2s_lite_siv.f to i2s_processing.f
  The old name was deceptive: the SIV correction subroutine
  is called from the main program, not from i2s_lite_siv.f,
  so why the "_siv" in the name?

  Although my changes to i2s on 2018-11-25 fixed the case
  of Mlong=130047, further reduction of Mlong to 57127 to
  match the EM-27 cause the phase errors to recurr.
  Changed the indexing of the igram inside i2s_processing.f
  to prevent phase errors when igrams were being truncated.
  Found a couple of things that I didn't like about the
  previous version. Firstly, when Nlong was limited by Mlong
  (user-prescribed limit), Nshort wasn't touched because we
  assumed that it would always be shorter than Mlong. But when
  truncating a -5 to +45 cm OPD igram to -1.8 to +1.8 cm,
  Nshort must also be truncated to Mlong.
  Secondly, for the convolution of the igram vector with PCO,
  ac_igram(1) was previously passed to the convolve subroutine.
  Now ac_igram(ifurip) is passed, where ifurip is the index of
  the first unused raw igram point. So the igram points at the
  beginning (e.g. short side of FWD single-sided igram) are now
  never seen by the convolve subroutine and so don't have to be
  included in the computation of NFFT_PC, making it as small as
  possible.  I suspect that previously NFFT_PC was computed
  assuming that only the used points were passed to convolve
  when in fact the unused points at the beginning were also
  being passed and FFT'd.

compare_file_content      Version 1.06    2018-12-21   GCT
  In addition to providing info on the difference between
  two identically structured files (e.g. old and new versions
  of the same file), the program now creates an output file
  whose content is the unweighted mean of the two input files
  being compared.

avg_ker   Version 1.41     2018-12-20   GCT
  Increased parameter mfp from 15 to 16 to handle the 2051 cm-1
  OCS window which has 9 fitted gases, 4 continuum parameters,
  fs,sg, and zo, which equals 16 fitted parameters.

GFIT                     Version 5.13        2018-12-13   GCT
  Fixed a bug that was causing VSF-errors of Inf in blacked out
  windows.  This was caused by my changes in do_retrieval.f from
  12 days ago, replacing dsqrt by a sqrt to avoid compiler warnings.

 GFIT                     Version 5.12        2018-12-06   GCT 
  Moved ggg_int_params.f from $GGGPATH/src/ to $GGGPATH/src/gfit/
  over-writing the previous symbolic link.  This required that
  the associated include statements all be modified from
     include '../ggg_int_params.f'  to  '../gfit/ggg_int_params.f'
  in all programs. Most of the Makefiles also had to be modified.

  While doing this I did some cleaning up: deleting commented
  include statements (mainly ggg_const_params.f, which has been
  zipped up since 2016-03-02) and instances where ggg_int_params.f
  was included but not needed.

  Also took the opportunity to fix a few more compiler warnings.

  There are no longer any include files stored in the $gggpath/src/
  directory. This now contains only the directories to the programs.


 GFIT                     Version 5.11        2018-12-01   GCT 
  After copying the latest gfit to my MacBook, the gfortran
  compiler there (8.2.0  2018) made dozens of warnings, that
  the gfortran compiler on the Caltech system (4.4.7  2012)
  doesn't warn about. For example, there were dozens of warnings
  about real*8 to real*4 conversion, which I fixed either by
  re-defining the variable or by using the SNGL function.

  The compiler also complained about dozens of if-statements 
  of the form 
      if(x.eq.0.0) then
  which were muted by changing the if-statement to
     if(abs(x).le.0.0) then
  Of course, this doesn't fix anything -- it actually makes the
  program slightly slower, but at least it shuts up the compiler.

  There are still a few warning from the MacBook gfortran compiler,
  things I wan't sure how to fix, but the number is much reduced.

  Finally, I created a symbolic link in the $gggpath/src/gfit
  directory of the include file $gggpath/src/ggg_int_params.f
  So the include statement inside gfit.f now says
      include 'ggg_int_params.f'
  instead of
      include '../ggg_int_params.f'
  The advantage is that I can scp the contents of $gggpath/src/gfit/
  and $gggpath/src/comn/  over to my MacBook and have an up-to-date
  and working version of GFIT. I don't have to remember to also scp
  $gggpath/src/*.f.


i2s     version 3.11       2018-11-25    GCT
  Fixed a bug by which progressively reducing the allowed FFT
  size (MLONG) would suddenly turn the spectra to garbage. This
  happened at the point that NFFTPC decreased by a factor 2.
  This was discovered in the ETL spectra when MLONG (param #21)
  was reduced from 130048 (good spectra) to 130047(bad spectra).

  An important clue was that when convol.f was forced to do a
  slow convolution, rather than the default fast convolution,
  the problem went away.  This suggested that the problem was
  somehow related to the extra workspace needed by the fast
  convolution to FFT and interpolate the phase corr operator.

  The problem was fixed by performing the FFT/interpolation of
  the phase correction operator in a separate vector, not in
  the upper-half of the AC-IGRAM vector as was done previously.
  This new vector is called WORKSPACE inside convolve.f, and
  BUFN inside i2s_lite. BUFN is actually already declared for
  use by the igram re-sampling subroutine.

  I really don't understand why this fixed the problem because
  AC_IGRAM is declared double-size (2*MIP) to accommodate the
  unfolding of single-sided igrams after phase correction. So
  AC_IGRAM certainly has ample room to accommodate duplicated
  single-sided igrams, especially when MLONG is being squeezed
  down.  The bug must have arisen because the upper half of
  AC_IGRAM, in being used as workspace for the phase correction,
  was overwriting parts of the igram that were still needed for
  the subsequent full FFT that converts the phase-corrected
  igrams into spectra.

  The new convolve.f subroutine, based on the now obsolete convol.f,
  has two additional input arguments (hence the name change):
  1) WORKSPACE is a vector of dimension MIP in which the FFT &
     interpolation of the phase correction operator is performed.
     Previously the upper half of AC_IGRAM was used for this.
  2) METHOD is an integer that tells the subroutine whether to do
     a slow (method=1) or a fast (method=2) convolution. i2s_lite
     hardwires METHOD to 2. But in the tconvolve unit-test program
     both are used.
 
  I also wrote a unit-test program, tconvolve.f, that calls
  convolve.f for a variety of different cases. It also tests
  how well it rejects large values in locations of the input
  vector that are not used in the slow convolution, but get
  sucked into the fast convolution because it uses the next
  power of two above the actual size. 

GSETUP                   Version 4.40        2018-10-31   GCT
  Modified write_mav.f to write the VMRs in the .mav file in
  e12.4 format (previously e11.3) to reduce the rounding
  error associated with writing the file and reading it back
  in. Also writes the observer latitude to the .mav file
  header.

WRITE_AUX                Version 1.12      2018-10-31      GCT 
  Added the observer latitude to the header of the .mav file.
  As a result, the user no longer has to enter the latitude
  as an input to write_aux. Also added O2 as a new column.
  O2 makes it easy to tell whether the profiles are WMF or DMF.

summarize_linelist       version 1.16       2018-10-27
  Modified to handle .101 linelists transparently. Previously
 '161' was hardwired into the code, but now it is copied from
  the extension of the input file.

summarize_linelist       version 1.15       2018-10-26
  Modified to enforce lexicographic/dictionary order for lines with
  identical positions. And to count and print the number of sorted
  and mis-sorted lines. And to explicitly print the number of un-
  classifiable lines (e.g., gas 1 isotopolog 4 in ATM.161 linelist).

mod_maker_10.7   2018-10-05   GCT

1) Fixed a typo: the altitude of the 5 mbar level in the write_mod
   subroutine was 36.8 km when it should have been 35.8 km.
2) Added two more levels (0.5 and 0.2 mbar) to better resolve the
   stratopause.
3) Used an integer variable (n_ussa) to denote the number of levels
   for which the USSA is tabulated.
4) Re-checked the altitudes for the old levels, which resulted in
   a few 0.1 km adjustements.
5) Changed the name of the vector containing the USSA altitudes
   from z_ussa to h_ussa to emphasize their geopotential nature.

  n_ussa=10  ; number of levels for which USSA is tabulated below.
  p_ussa=[10.0,  5.0,   2.0,   1.0,   0.5,    0.2,    0.1,  0.01, 0.001, 0.0001]
  t_ussa=[227.7, 239.3, 257.8, 270.7, 264.3, 245.2, 231.6, 198.0, 189.8, 235.0]
  h_ussa=[31.0,  35.7,  42.4,  47.8,  53.3,  60.1,   64.9,  79.3,  92.0,  106.3]

Also, in read_model_fc.f, znew was declared and initialized but
never used. Replaced znew with hnew.


 2018-09-23  isotopologs.dat
  Modified the isotopic fractionations of CO2.  The previous
  values were:
  2 1 CO2     (16)O (12)C (16)O  626  0.98420         10     0   
  2 2 CO2     (16)O (13)C (16)O  636  0.01106         -7   -50   
  2 3 CO2     (16)O (12)C (18)O  628  0.0039471       41   -50   
  2 4 CO2     (16)O (12)C (17)O  627  0.0007339        0     0   
were modified to
  2 1 CO2     (16)O (12)C (16)O  626  0.984204E-00    10     0 
  2 2 CO2     (16)O (13)C (16)O  636  0.011057E-00    -8    20 
  2 3 CO2     (16)O (12)C (18)O  628  0.394710E-02    41   -40 
  2 4 CO2     (16)O (12)C (17)O  627  0.733989E-03    21   -68

These modification were based on the papers by Assonov et al.
(2010) using CARABIC samples, by Lammerzahl et al. (2002),
and by Liang et al., (2006).
The altitude-dependence of 2co2 has changed from -50 to +20.
4co2, which was previously zero, is now 21 per mil in the
troposphere and more in the stratosphere.
Also changed the altitude-dependence of 2n2o from -50 to -45.

collate_results          Version 1.97        2018-08-07   GCT'
  Modified collate_results.f to reduce the time threshold
  above which scans are deemed separate, from 9s to 5s.
  This prevents results from a REV scan and the inmediately
  following FWD scan from being mereged when the short side
  of ZPD is very short.
         if(rlgfile(lr-2:lr-2).eq.'o') then
            max_delta_t=0.0004  ! 1.44s (ACE)
         else                 ! Ground-based
c            max_delta_t=0.0025  ! 9.0s 
            max_delta_t=0.0014  ! 5.0s  GCT 2018-08-07
         endif

indent_checker           Version 0.00        2018-07-15   GCT
  A new program has been written to check the indentation
  of source code. Previously, indents of 0,2,3,4 were all
  used in the GGG code, depending on who wrote it and when.
  So it was often difficult to decide which if-statement a
  particular endif was matched with. Consistent indentation
  makes code more comprehensible and easier to maintain.

  Assumes an increased indentation following 'if .... then'
  statements or ' do ' statements.  Assumes a decreased 
  indentation following 'endif' or 'enddo' statements.

  'else' or 'elseif' statements are ignored since they are
  do-nothing wrt indentation. Comment lines are completely
  ignored.

  Continuation lines are also ignored for indentation, but
  are scanned for the presence of an 'then' at the end,
  in case of a multi-line if-statement.

  nind = 3 is the default number of spaces/columns per indent.
  kdent = indentation level inferred from if- and do-statements
  ident = actual indentation level of code = (start_col-7)/nind
  When kdent and ident don't agree, the program complains/stops.

  Setting the indent to 3 spaces generally moves lines slightly
  to the right, which caused some wrap-around. To minimize this
  some scratch variables  were abbreviated, for example:
     "indexa" --> "ijk"
     "scancnt" --> "kss"

  All non-obsolete programs and subroutines were run through
  indent_checker.  Nearly all required minor modification to pass.
 
  
 collate_results          Version 1.96        2018-07-05   GCT
   Added Nick D's code to prevent Dec 31 problem.
         if(mod(iyr,4).eq.0) then  ! Leap Year
            r8year=iyr+(doy+zpdtim/24.0d0)/366.0d0
         else                     ! non-Leap_year
            r8year=iyr+(doy+zpdtim/24.0d0)/365.0d0
         endif

 GFIT                     Version 5.02        2018-06-30   GCT
Improved the commenting of compute_ils.f to make it more
comprehensible.  Also wrote a test program test_compute_ils.f
to demonstrate the usage of compute_ils.f.

 GFIT                     Version 5.01        2018-06-09   GCT
The regrid.f subroutine has been replaced by regrid2.f, which
returns two status flags rather than one previously. Hence the
change of name.  Much of the code is the same, but regrid2.f
has two main advantages:

1) In the event that the requested output points cannot be
  computed from the provided input vector and operator, regrid2.f
  will do the points that it can and then use linear extrapolation
  from the closest two input points to do the remainder crudely.
  The regrid2.f subroutine will then tell you how many of the
  output points at each end were done in this crude manner
  (rather than using OPER) by returing these values in the integer
  flags: nexpl and nexpr. The old regrid.f subroutine did nothing
  in this situation except set istat to the appropriate non-zero
  value and immediately return. So previously, if regrid was asked
  to resample any points outside the range calculable, it returned
  with an error flag having done nothing. So if asked to compute a
  10,000 point output vector and 1 point was out of range and 9999
  in range, it did nothing.  The new capability is very convenient'
  when, for example, ratioing a spectrum covering 1850-5650 cm-1 by
  another with the exact same coverage but requiring a small doppler
  shift to bring the solar features into alignment.  The resulting
  ratio spectrum may only be computable from 1850.3 to 5649.7 cm-1
  due to the width of the SINC operator. But it would be convenient
  if regrid2 did the whole thing, since the same runlog could then
  be used for the raw and ratio spectra. Of course, regrid would warn
  that 0.3/0.0075=40 extrapolated points were added to each end of
  the output vector.

2) Fixed a benign known bug in the old regrid subroutine. When a
  sampled output point fell exactly on an input point such that xx
  was an integer and fr=0, the subroutine addressed an out-of-bound
  element of OPER (element 2+NHW*ODEC). This was benign because the
  resulting dot-product was multiplied by fr=0.0, but it meant that
  OPER had to be declared as OPER(*), rather than the much preferred
  OPER(1+2*NHW*ODEC), to prevent reporting of array-bound-violations
  in case the "-fbounds-check" compiler option was used.


 GSETUP                   Version 4.38        2018-05-16   GCT 
  Implemented Kat Saad's parameterization of the seasonal, vertical,
  and latitudinal behavior of CH4, as described in her document
  CH4priors_TCCON_20180207.pdf.  Basically this involving changing
  three coefficients.

 GFIT                     Version 5.00        2018-04-17   GCT
  As part of the effort to separate code and data, the hard-wired
  coefficients inside abscoj.f representing the curvature of the
  T-dependence of heavy gases represented by PLLs, have been moved
  the isotopologs.dat file.  This required that their values (ATC)
  be added to the argument list of the read_isotop.f subroutine,
  which is now named read_isotopolog.f in recognition of this change.

  These coefficients are now in different units. Whereas previously
     vpf(is,k)=vpf(is,k)*(1.-3*(1.-t(k)/280)*(t(k)/220.-1.))
  now
     vpf(jspeci,k)=vpf(jspeci,k)*(1.-atc(jspeci)*tcurv(k)
  where
     tcirv(k) = (1.-t(k)/280)*(t(k)/220.-1.))/0.01461
  where the 0.01461 normalization means that the ATC value is the
  correction at T=250K since  0.01461 = 1/((1-250/280)*(250/220))


gnd_summer.vmr 2018-05-05
  Realized that I inadvertently deleted levels 137 to 145 km
  from the gnd_summer.vmr file.  This seems to have happened
  during the 2016-10-22 changes to move the coefficients
  parameterizing the latitude gradients and secular trends
  of the various gases from apply_latitude_gradient.f into
  the header of the vmr file. I replaced these missing levels.

  Also extended the file up to 170 km, to allow it to be used
  for the orb case via a symbolic link.  I then smoothed the
  discontinuities in many of the vmrs profiles at 150 km.
  A few gases also had discontinuities at 100 km, probably 
  from extending the vmr profiles above 100 km many years ago.


  HITRAN 2016 has introduced two extra CO2 isotopologs:
  11: 838, and 12: 837
  These are denoted by 'A' and B' in the isotope fields
  of the linelist.  These triply-substituted isotopologs
  are incredibly rare and will never be seen in atmospheric
  spectra (only in isotopically enriched lab samples).
  But if we want to be able to use the HIT16 linelist
  with GGG code, we have to be able to deal with the
  'A' and 'B' isotopes, even though we have no interest
  in them. Otherwise they'll crash the program.

  To do this, statement that reads each line of the linelist
  has to be changed to read the isotopolog field as an 'a1'
  character instead of an 'i1' integer.  
       read(lun_ll,llformat,rec=jline) kgas,ciso,freq,stren,
     & abhw,sbhw,eprime,tdpbhw,pshift,quantum(:lq)

  Then the character (ciso) has to be converted into an integer
  using the integer function ciso2kiso.f, which must now be
  called in every program or subroutine that reads the linelist.
  This includes abscof.f, summarize_linelist.f, matchll.f,
  window_analysis.f, vll.f, mw.f, plus several programs in
  the $gggapth/linelist/f77/ sub-directory. 

  Additionally, the isotopologs.dat file had to be modified
  to add the two new CO2 isotopologs. In here, and the rest
  of the GGG code, the new isotopologs are referred to by
  the integers 11 and 12.  Only the code that reads the
  linelists that needs the aforementionned modification.

  Given that HITRAN were already changing the format of their
  linelist (from i1 to a1), a golden opportunity was missed
  here to expand the isotopolog field to i2, which would have
  avoided the 11 extra lines of code.  Sure, this would have
  expanded the record length from 160 to 161 CPL, but so what?


summarize_linelist       version 1.11       2018-03-28 
  Added extra fields for min/max pressure shifts.

GSETUP                   Version 4.34        2018-03-15   GCT
  Modified the header of gndsummer.vmr to reduce the seasonal cycle
  of CO2 and to increase the inter-hemispheric gradient.
  Specifically, increased the CO2 GRADLAT from 0.000 to 0.004
  Reduced the CO2 SEACYCLE parameter from 0.0081 to 0.0070

  This was driven by observations of the TCCON CO2 VSFs which
  show positive anomalies in the NH in July & Aug and negative
  anomalies throughout the SH.  

  This is a major departure in the formulation of the CO2 a priori
  profiles, which were previously based solely on in situ measurements.

i2s     version 3.08       2018-03-07    GCT
  Modified i2s.f to implement a min/max filter on the MNY/MXY values
  in the OPUS-format igram headers.  The allowed min/max values are
  read in from parameter #17 in the input file.
  Rejects scans if they contain igram values out of the allowed range:
  MIN_thresh < MINY < MAX_thresh  ie  (MINY-MIN_thresh)*(MINY-MAX_thresh) < 0
  MIN_thresh < MAXY < MAX_thresh  ie  (MAXY-MIN_thresh)*(MAXY-MAX_thresh) < 0
  ythresh(ichan,1) is the minimum allowed y-value from entry #17 of input file.
  ythresh(ichan,2) is the maximum allowed y-value from entry #17 of input file.
  yxscan(ichan,1) contains the minimum y-value reported in OPUS header.
  yxscan(ichan,2) contains the maximum y-value reported in OPUS header.

  Also took the opportunity to rename several variables:
  channel --> ichan
  chan   -->  detname (in check_resistor_info.f)
  chan   -->  chname  (elsewhere)
  zpdlim -->  yxscan

  Note, the arrays yxslice(msl,2,2) and yxscan(2,2) needs to be
  dimensioned with parameters but is it mdtc=5 or mch=2 ?
  There is currently confusion between channels (master/slave)
  and detectors (HgCdTe, InSb, InGaAs, Si).
  Currently, everything read from the input file is dimensioned
  with MDTC=5, whereas MCH=2 is used when accessing the OPUS files.
  But the input file only ever contains two values (master/slave).


i2s     version 3.07       2018-02-11    GCT
  Tidied up the code to remove all compiler warnings. This mainly
  involved inserting idum=  statements to use variables declared
  in the the include files, but which were not used in this
  particular subroutine.

 WRITE_EOF                Version 0.47     2018-02-04     GCT
  Fixes to account for the telluric linelist names now being
  contained in a single file, telluric_linelists.md5, instead
  of being written separately to the .col file, along with their
  md5sums. These fixes actually simplified the program.

  But the program was still crashing due to the .lse file being
  incorrectly read. This happened because inside subroutine
  read_oneline_col.f, the lun_col was being used from 31 to 99,
  and lunr_lse had already been set to 99 in the main program
  and opened.  So the first data record of the .lse file was
  being inadvertently read by read_oneline_col.f. This created
  a mismatch between the subsequent spectrum names in the .lse
  file and those in the runlog.  Changing lunr_lse=99 to
  lunr_lse=17 fixed this.


 average_results          Version 1.29        2017-12-28   GCT
  Extended the format for the window string in the column header
  of the .cew files from a12 to a14.

 adjust_pll_se       Version 1.64        2017-12-22       GCT
  Fixed a long-standing bug by which the order of the spectra in
  the .mav file was assumed identical to that in the .col file
  and so the same indexing was applied to both. And this is okay
  when every spectrum encompasses every window.  But when there
  are spectra from different sources encompassing different
  spectral regions, not all windows can be fitted in all spectra,
  so there is no longer a direct association between spectra in
  the .mav and .col files. In such cases adjust_pll_se would
  analyze the residuals from spectrum J in the .col file using
  the T/P from spectrum J in the .mav file.
 
  In the usual case of all the spectra covering all the windows
  this bug has no effect.  In the case that a window can be fitted
  only by a subset of the spectra, but the fitted spectra are at
  the beginning of the runlog and hence .mav file, the bug still
  has no effect. Only in the case that spectra early in the runlog
  have not been fitted, is there a problem. And even then, you
  still get a reasonable-looking spectral fits, since the only
  problem is that the wrong spectrum temperatures have been used.
  It isn't obvious that anything is amiss, which is why this bug
  went unnoticed for many years.


 GFIT                     Version 4.97        2017-12-07   GCT 
  I was unhappy with the channel fringe fitting. In some spectral
  fits there were undulations in the residuals which the channel
  fringe fitting attempted to correct, but with poor results
  because they weren't really periodic and might have been better
  fitted by increasing NCBF.  To avoid this behavior, I increased
  the value of the (hardwired) ISTART parameter in fringes.f to 8.

  A few days later I encountered another spectral fits with an
  obvious channel fringe with nearly 3 periods across the window,
  but it wasn't being removed because I had set ISTART=8, which
  was too high.  To fit these fringes, I had to reduce ISTART
  back down to 5.  ISTART is the first point of the residuals's
  power spectrum to be searched for a peak.

  So I decided to set ISTART = max(3,1+NCBF) skipping the low
  frequencies that the continuum fitting will deal with anyway.
      istart=1  ! Will find 0.5 or more periods per interval
      istart=2  ! Will find 1.0 or more periods per interval
      istart=3  ! Will find 1.5 or more periods per interval
      istart=4  ! Will find 2.0 or more periods per interval
      istart=5  ! Will find 2.5 or more periods per interval
      istart=6  ! Will find 3.0 or more periods per interval
      istart=7  ! Will find 3.5 or more periods per interval
      istart=max(3,1+ncbf)
  In widows where NCBF is small, ISTART will be small, allowing
  the fitting and correction of fringes with only 2-3 periods
  across the window. Yet in windows with larger NCBF, channel
  fringes will have to have several periods across the window
  to be corrected.

  To achieve this, I had to feed the NCBF variable down through
  do_retrieval.f, subtract_cf.f, to reach fringes.f  
  This means that I had to add NCBF to the argument lists of these
  two subroutines. While doing this, I also changed their names
  and the order of the arguments (inputs first). So

     subtract_cf(obsrvd,calcul,resids,nmp,mmp)
  is now
     subtract_channel_fringe(mmp,nmp,ncbf,resid,calcul,obsrvd)

     fringes(cfamp,cfperiod,cfphase,ybuf,nmp,mmp)
  is now
     fit_channel_fringe(mmp,nmp,ncbf,ybuf,cfamp,cfperiod,cfphase)
 
  During the course of all this, I fixed a potential bug in fringes.f
  whereby initializing imax could be done inconsistently with the 
  indexing of the loop search. Defining ISTART enforces consistency.

GFIT                     Version 4.96        2017-11-29   GCT
Modified abscoj.f to further reduce absorption from the CO2 line
wings, a phenomenon that is called the sub-Lorentzian lineshape,
but is really just line mixing.  Modifed the if-statement:
      if(kgas.eq.2) then
         sublor=10.5/dopphwem
      else
         sublor=100.0/dopphwem
      endif
 by changing the 10.5 to 9.5.  This is based on fits to MkIV balloon
 spectra in the 2300-2400 cm-1 region, where this change increased
 the retrieved CO2 amounts by up to 10%, depending on altitude, which
 brings them into much better consistency with other, weaker CO2 bands.

 Also, added acetone (CH3COCH3) as gas # 75, pushing LUFT to # 76.


 adjust_pll_se       Version 1.63        2017-11-20       GCT
   Modified the code to account for two changes:
 1) The subroutine write_spt now includes an extra variable
   (peff) to the headers of the spt files
 2) The .col file now contains telluric_linelists.md5, which
   has to be opened to read the name of the linelist.


cmc2mavray    Version 1.14    2017-11-07   GCT
  Increased parameter MCELL from 4 to 5.


avg_ker   Version 1.40     2017-09-26   GCT
  AP_FLAG is now an integer, not a logical variable.
  This streamlines switching between the two options:
     ap_flag=0  ignores the a priori constraints
     ap_flag=1  accounts for the a priori constraints
  and facilitates the use slightly smaller matrices
  in the call to shfti using the ap_flag=0 option.


collate_results          Version 1.95        2017-08-30   GCT
  Various minor tweaks including a new array (NCOUNT(MROW),
  that keeps count of the number of windows fitted to each
  spectrum and prints it out at the end (fort.70).


 GFIT                     Version 4.94        2017-08-07   GCT
  Changed the subroutine read_mavfile_body.f. Replaced
       call vmov(zero,0,wmf(jspeci,1),nlev_ray,nlev_ray)
  with
       do ilev=1,nlev_ray
          wmf(jspeci,ilev)=0.0
       end do

 Also I believe that the original statement is incorrect.
It should have been
       call vmov(zero,0,wmf(jspeci,1),nspeci_iso,nlev_ray)
since WMF is dimensioned (nspeci_iso,nlev_ray)

This isn't that important.  It only affects gases for which the
DMF's are missing in the .mav file, which is typically none.
If this wasn't the case, we would have noticed earlier.


 GSETUP                   Version 4.33        2017-08-06   GCT
  The wrong equation was being used in subroutine read_model_fc
  to perform the T-interpolation. Replaced
     t(k)=intemp(ii)+beta*(intemp(ii+1)-intemp(ii))
  with
     t(k)=intemp(ii)+lr*(hk-inheight(ii))
  This was causing small errors (<0.1K) in most cases, which
  why it was never noticed. But using ussa_h_levels.mod, 
  which has the first entry at 0 km and the second at 11 km,
  the miscoding was causing errors of up to 1K, which was spotted.

 GFIT                     Version 4.93        2017-07-27   GCT
  Defined a new variable effres, the effective spectral resolution
      effrres=sqrt(rect**2+((1.+0.4*apo_c)*resn)**2)
      corrld=effres/gint

  effres is passed to write_spt, where it is written into the spt
  file header, to support the pregram move_lines.f

 i2s     version 3.06       2017-07-09    GCT
  In the subs that write the spectra (save_opus.f and save_to_file.f)
  removed the 18 lines that pre-delete any already-existing spectra
  by doing an inquire, an open, and then a close(status='delete').
  Instead of these 18 lines, the open statement now contains the
  'replace' option instead of 'unknown'.  This F90 option pre-
  deletes the file if it already exists, whereas 'unknown' doesn't.

 GFIT                     Version 4.91        2017-07-05   GCT
  Increase parameter tau inside do_retrieval.f from 8e-5 to 4e-4
  to decrease the incidence of wild VSF values when the uncertainties
  are large (due to very shallow absorption lines or large noise).
  This will impair GFIT's ability to overcome a very poor a priori
  vmr profile.

 GSETUP                   Version 4.30        2017-07-03   GCT
 compute_window_eprime     Version 1.02     2017-07-03    GCT
  Added a header line (2 2) to the top of the windows files to
  allow them to be read in an automated manner by any program.
  This also allows for the future possibility of comment lines
  in the file header.

 DIURNRET     Version 4.20      2017-06-30   GCT
  Replaced archaic code (ASSIGN and Arithmetic IF-statements)
  in nnls.f subroutine. Also set IZMAX and JJ to 0 to avoid
  compiler warnings (may be used uninitialized) 

 GSETUP                   Version 4.30        2017-06-28   GCT '
 GFIT                     Version 4.90        2017-06-28   GCT 
  Instead of the .ggg file containing the paths to the four
  telluric linelists, it now contains the name of a single file
  (telluric_linelists.md5) that contains the linelist names
  together with their md5sums.

  Previously, if I had 25 .ggg files in a sub-directory and I
  wanted to change one of the linelists to be used and re-run
  them all, I either had to edit gsetup.f and recompile, or edit
  each of the 25 .ggg files. Now I simply have to edit one file.

  The md5sum written to the .col file is for the contents of
  the 'telluric_linelists.md5' file.  If a linelist changes,
  then its md5sum inside telluric_linelists.md5 will change,
  and so the md5sum of telluric_linelists.md5 will change.

  The downside of this is that the md5sums of the linelists are
  now calculated by gsetup not gfit.  So if a user changes a
  linelist after running gsetup, this won't be reflected in the
  md5sum written to the .col file. 


 DIURNRET     Version 4.19      2017-05-20   GCT
   Fixed bug by which the vmr altitudes (every 10 km on Mars)
   overwrote the level altitudes (every 2 km on Mars) because
   they shared the same vector (Z).  This resulted in some of
   the altitudes reported in the .ret file being wrong. Fixed
   this by defining new vector (ZVMR) for the altitudes in the
   .vmr file.

 apply_airmass_correction     Version 1.33    2017-04-12   GCT
   Dis-abled H2O correction of Xluft, since the O2 profile is
   now modified according to the NCEP H2O profile.
   This reverses the change performed on 2014-03-06

 GSETUP                   Version 4.22        2017-04-11   GCT 
   Modified read_mod_fc.f to skip any extra comment lines in the
  .mod file header, if present.


mod_maker_10.6  2017-04-11  GCT
   Instead of a fixed value for the mean Molecular weight (MMW) of air,
   we now used the NCEP H2O to compute a better value using equation:
           mmw=28.964*(1-h2o_wmf)+18.02*h2o_wmf
   at each altitude. This reduces the mmw value in the PBL.

   Also added the mod-maker version number to the header of each .mod file


mod_maker_10.5  2017-04-04  GCT
  A third attempt at getting the H2O DMF correct.

  Prior to Feb 2013 the equation was
     h2o_dmf=sh*rmm 
  where sh is the NCEP Specific Humidity and
  rmm=28.964/18.02    ; Ratio of Molecular Masses (Dry_Air/H2O)
  This neglected to do the dry to wet conversion.

  In Feb 2013 this was changed to:
     h2o_dmf=sh*rmm/(1-sh*(1-rmm)) ; Convert Mass Mixing Ratio to Mole Fraction
  which does the dry-to-wet conversion, but took (incorrect)
  steps to prevent h2o_dmf from ever exceeding 1.0.

  and now the hopefully-correct equation:
     h2o_dmf=sh*rmm/(1-sh) ; Convert Wet Mass Mixing Ratio to Dry Mole Fraction

  I was clearly confused in Feb 2013 by the possibility that 
  the H2O DMF could exceed 1.0. Now I realize that the H2O 
  DMF can exceed 1 -- it is the Wet/Real MF that can't.


GFIT                     Version 4.85        2017-04-04   GCT
  The write_spt.f subroutine now writes an additional column containing
  the continuum.  This is squeezed in between Tc and the first target
  gas transmittance. This required a corresponding change to pfit.pro
  and pplot.pro.  This is not backward compatible.

gfit_ap.gnd
 Increased uncertainty on a priori SG shift from 1 ppm to 2 ppm. This
 allows larger SG shifts and hence better fits, but risks large equal
 and opposite FS and SG when the window doesn't contain sufficiently
 strong solar and telluric lines to distinguish FS and SG shifts.

average_results          Version 1.28        2017-04-03   GCT
  Converted ccbar from a scalar to a vector so that it could be added
  to the .cew output file (5'th column).  Also merged the code that
  print out the outliers for the multiplicative and additive bias cases.

collate_results          Version 1.93        2017-04-03   GCT
  Modified the calculation of VSF_error_bar to include the Sqrt(NROW)
  factor, which was previously omitted causing much-too-small values
  for long runlogs (e.g. m4_all_avg.grl).

GFIT                     Version 4.86        2017-04-01   GCT
   Modified read_mavfile_body.f to convert the DMFs that are
   read in to WMF's that are used by GFIT. This is done with the eqtn:
   wmf(sindex(j),ilev)=dmf(sindex(j))/(1+dmf(1)) ! dmf(1) is H2O
   In spectrum_loop.f, VMR is replaced by WMF to be explicit.


i2s     version 3.04       2017-03-31    GCT
  Changed the if-statement that decides whether to do the LSE correction
from
-      if(lsemode.eq.2 .and. fpilha*(1.-fpilha).lt.0.001 ) then
to
+      if(lsemode.eq.2 ) then ! Re-sample non-ZPD-parity igram points
+         if(fpilha*(1.-fpilha).gt.0.001 ) write(*,*) 'Warning: '//
+     &   'FPILHA  > 0.001  SHBAR estimate is likely poor'

So now it will always do the correction if LSEmode=2, but will issue
a warning if there is too much power in the other/lower half of the
alias, such that the derived shift, SHBAR, is likely to be inaccurate.


spec_diff    Version 1.02     2017-03-30    GCT
  Increased parameter MPT to 2^21


i2s     version 3.03       2017-03-30    GCT'
  Modified hfti.f to prevent compiler warnings such as:

               CALL I1MCRA(SMALL, K, 16, 0, 0)                          
                           1
Warning: Rank mismatch in argument 'a' at (1) (scalar and rank-1)

So I changed:
 *              *** CRAY T3E ***
               CALL I1MCRA(SMALL, K, 16, 0, 0)
               CALL I1MCRA(LARGE, K, 32751, 16777215, 16777215)
               CALL I1MCRA(RIGHT, K, 15520, 0, 0)
               CALL I1MCRA(DIVER, K, 15536, 0, 0)
               CALL I1MCRA(LOG10, K, 16339, 4461392, 10451455)
to
 *              *** CRAY T3E ***
               CALL I1MCRA(SMALL(1), K, 16, 0, 0)
               CALL I1MCRA(LARGE(1), K, 32751, 16777215, 16777215)
               CALL I1MCRA(RIGHT(1), K, 15520, 0, 0)
               CALL I1MCRA(DIVER(1), K, 15536, 0, 0)
               CALL I1MCRA(LOG10(1), K, 16339, 4461392, 10451455)


i2s     version 3.02       2017-03-28    GCT'
 Added the following code from Christof Petri to modify
 get_opusigram_params.f to prevent warnings when processing
 Bialystock igrams:
  c     CP150901:  start
              if(index(cval(1:strlen),'No Source').eq.1)
       &       i4head(i_srccode)=src_sun
  c     CP150901:  end

 GSETUP                   Version 4.21        2017-03-24   GCT 
  Improved the handling of multiple windows of the same gas
  with the same integer frequency. Previously, when there were
  consecutive windows with the same gas and integer center
  wavenumber, gsetup changed the '_' between the gas and the
  wavenumber to '-' and then '^'.  This had two drawbacks:
  1) Only three windows were allowed per gas and frequency
  2) These had to be consecutive in the window file or else the
     earlier .ggg files were overwritten by the last one since
     they all had the same name (because gsetup only remembered
     the previous window name, not the earlier ones).

  When evaluating OCS windows I encountered a situation where the
  window file contained three slightly different ocs_2051 windows.
  I did not want them consecutively listed in the window or the
  multiggg.sh files. The solution is far from ideal but better than
  the previous scheme.  Instead of changing the "_" between the gas
  and the wavenumber, gsetup now inserts a,b,c, after the wavenumber
  but before the "." when multiple windows are encountered. A string
  array, winnam(mwin)*64, now remembers all previous window names
  (e.g. gas_1234) and triggers inserting the 'a' for non-consecutive
  windows with the same gas and integer center wavenumber.

  The all_mols_mir.gnd window file contains two non-consecutive
  ch4_2903 windows.  Previously, the .ggg file of the latter was
  overwiting the first, such that the second ch4_2093 window was
  included twice in the averaging, whereas the first was not used.
  I had not realized this error until the new code was implemented
  and I saw a ch4_2093axxxxxx.ggg where previously there was no
  ch4-2093.xxxxxx.ggg file.

  A down-side of this scheme, is the if I delete the first of the
  identical windows, the names of the .ggg and .col files changes
  for the subsequent identical windows. But this was also a problem
  with the previous scheme.

avg_ker   Version 1.38     2017-03-14   GCT
  Added the a priori constraint into the computation of the kernels.
  Since the GFIT retrieval is weakly constrained, this made little
  difference to the kernels.  For the TCCON CO2 window at 6220, this
  change alters the kernel values by 1% at 70 km altitude and less
  than 0.1% below 40 km.
  
GFIT                     Version 4.84        2017-03-08   GCT
  Changes to gfit.f and avg_ker.f to make the jacobian/kernel file
  names more specific, now encapsulating the name of the window and
  runlog, preventing the jacobians/kernels from different windows
  from overwriting each other.

compute_window_eprime     Version 1.01     2016-03-03    GCT
  Changed name of output file from compute_window_eprime.out to
  compute_window_eprime_'//winfile, so that results from different
  window files don't over-write each other.

isotopologs.dat  2017-03-01
  Pre-2014, when I added a new kiso=0 isotopolog to represent a
  pseudo-linelist, I would set the Fractional Isotopic Abundance
  (FIA) to some arbitrary value (e.g. 1.0). I knew that the FIA
  wasn't used for anything so I didn't worry about the value.

  But on 2014-01-09 abscoj.f was modified to correctly handle
  self-broadening in cases of isotopic enriched samples. This
  was further modified on 2016-09-09.  These changes meant that
  the abscoj.f code read the FIA values and implicitly assumed
  that their sum over the isotopologs of each gas was 1.0.

  So today I modified the FIA of several species to ensure that
  Sum(FIA)=1 over all isotopologs of a given gas.  Previously,
  some gases having a "kiso=0" isotopolog in addition to the
  regular isotopologs ended up with Sum(FIA) =2 (e.g. O2).
  The fix mainly involved changing the FIA of kiso=0 isotopologs 
  from 1.0 to 0.0 except when the kiso=0 was the only isotopolog.

  This change only makes a difference to the self-broadening of
  kiso=0 lines.  So the only significant changes will be seen at
  high pressures for gases with a large vmr (e.g. O2 & N2) and
  a pseudo-linelist (kiso=0). In the TCCON O2 window, changing
  the 0o2 FIA from 1 to 0 changed the retrieved O2 amount from
  the 1o2 by 0.15%.
 
mod_maker_10.4  2017-02-18  GCT
  Modified to read the runlog format from the runlog header, rather
  than having it hard-wired inside the mod_maker code.  If missing
  from the runlog header, only then uses the hard-wired format.

2017-02-17  GCT
  "air" was replaced by "luft" (german word for air) in contexts where
  it refers to the total vmr or column of all gases. This is because
  "air" is already used for multiple purposes. For example, it is the
  name of the sub-directories containing aircraft-related files. It is
  the mnemonic for "Air Temperature" in the NCEP model files.  So
  previously, grepping "air" resulted in hundreds of hits from "airmass",
  "age of air", "riair", "airborne", "vacuum-to-air" etc., which diluted
  the instances you were seeking.  Now, grepping "luft", results in only
  ~30 hits, all pertaining to the vmr or column of all gases. This change
  affects several of the .f programs and several data files (e.g. windows
  files, .vmr files, tccon_corrections.dat, isotopologs.dat, xx_qc.dat).
	
i2s     version 3.01       2017-02-10    GCT
  Merged slice-i2s.f and opus-i2s.f into a new program called i2s.f, which
  can handle input files from both slice-i2s and opus-i2s. It achieves this
  by counting the number of data columns at the bottom of the input file: 
  slice-ipp input files have 5 while opus-ipp input files have 16 or 18. 

  The motivation for the merging was that the slice-i2s and opus-i2s were
  slowly diverging. As a result, upgrades to one were not simply a repeat
  of the upgrade to the other.  

  While I was at it, I added dummy assignments (idum=i_gfw) to prevent
  compiler warnings about "unused parameters" in the .inc files.

  I've tested the new program on the two benchmark cases: 041222.1 slices
  from Park Falls and the wg20090206_1640NIR_DC.0 OPUS-format FWD+REV igram.
  The resulting spectra are slightly different (a few ppm), but this is mainly
  due to previous changes made to allow a continuously adjustable igram size,
  not the merging itself.  The new i2s program still needs work. For example,
  there are several if-statements of the form:

      if(nsubs.eq.5) then
         code fragment from slice-i2s
      else
         code fragment from opus-i2s
      endif 

  where NSUBS is the number of sub-strings (columns) of data at the bottom of
  the input file.  I think that these if-statements can eventually be eliminated,
  since the only fundamental difference between slice-i2s and opus-i2s is that
  in the former case there are several input files (slices) per interferogram,
  whereas in the latter case there are multiple igrams per input file.  Surely
  this can eventually be handled in a common piece of code.

  Henceforth all upgrades to i2s will be done to i2s.f.  There will be no
  further development work on slice-ipp.f or opus-ipp.f.  Of course, people can
  continue using these, and I don't suggest imposing gslopi2s on everyone any time
  soon.  But I will encourage people to make the switch at the next TCCON meeting.
  Although i2s.f is a new program, the starting version is 3.01, to maintain
  continuity with the slice-i2p and opus-i2s version numbers, which are stamped
  into the spectrum headers.

  It would be useful if people could try i2s on some of their favorite igrams and
  check that the results are sensible. Since I have so far only tested it on the
  pa and wg benchmark cases, I may well have introduced some hidden bugs that will
  only be exposed by using data from other sites.
 
  The code can be found in:  /home/toon/ddd/src/i2s/ 
  Besides the main program, this directory contains the subroutines that used to
  be in i2s/opus-comn/,  plus subroutines that were previously embedded in the
  main programs and are now stripped out.  Subroutines that were previously in
  i2s/comn/ were copied to  src/comn/ .   I've also put the raw interferograms
  into src/gslopi2s/raw_data/  just as before.  

  I didn't copy the i2s/master.sh file.  Not sure that this is necessary any
  more since there is only one program to compile, versus three previously
  (slice-ipp, opus-ipp, cobs).  Note that I no longer used the cobs program
  to compare the spectral values.  Instead I use the stand-alone spec_diff.f,
  which is invoked by the spec_diff.sh script. To compare the spectrum headers
  I use the head_diff.sh script, which invokes OpusHdr.


 GSETUP                   Version 4.20        2017-02-08   GCT
  Installed calc_itcz.f subroutine to mimic the seasonal and longitudinal
  variations in the latitude of the tropics. Previously, tropics were
  stuck at 0 deg lat all year.  Should have largest effect in sub-tropical
  sites like Reunion where the ITCZ moves to ~30N in July.


 avg_ker   Version 1.35     2017-01-26   GCT
  Program now creates an new output file containing the kernels
  of all spectra in a single file, written to the working directory.
  This is in addition to the files containing kernels for each spectrum,
  written to $gggpath/ak/.  The new file enables the plotting of many
  kernels together, color-coded by airmass.

 GFIT                     Version 4.83        2017-01-17   GCT
 collate_results          Version 1.91        2017-01-17   GCT
  Changed the computation of the average rms residual to be consistent
  between these two programs. So the value now printed out at the end
  of a GFIT run will now be consistent with that in collate_results.rpt.
  The main problem previously was that collate_results reads the .col
  files which contains wlimit(rmsocl,'f6.4') to prevent f-format
  overflow, whereas gfit was using rmsocl in the computation of
  the mean rms.  So in cases where one or more spectra had rmsocl
  exceeding 9.9999%, gfit reported a slightly larger mean rms than
  collate_results.  The differences were usually tiny provided that
  there were some good spectral fits with rmsocl << 1%, but they were
  nevertheless a source of confusion and irritation.

 GSETUP   2016-12-23
  Changed all the balloon SO2 vmr profiles, such that its vmr
  increases in the stratosphere from 10 ppt at 20 km altitude
  to 100 ppt at 63km, which represents non-volcanic conditions.

 GFIT                     Version 4.82        2016-12-03   GCT 
  Modified gct2_humlik.f  to eliminate compiler warnings:
  "Possible change of value in conversion from REAL*8 to REAL*4"
  To simplify this, changed variable XX from R*8 to R*4, which
  resulted in tiny changes to the results (~1 part in 10^6).

GSETUP                   Version 4.20        2016-10-22   GCT 
  Moved the coefficients parameterizing the latitude gradients
  of the various gases from apply_latitude_gradient.f into the
  header of the vmr file. Similarly, moved the coefficients
  describing the secular trends of the various gases from
  apply_secular_trends.f into the header of the .vmr file.
  This provides a better separation of the data and code.
  Previously, a change in the a priori vmr profiles could
  arise either from a change to the reference vmrs themselves
  or a change in the coefficients hardwired into the subroutines.
  Now the .vmr file is much more self-contained.
 
 adjust_pll_se       Version 1.62        2016-09-26       GCT
  To allow for multiple cells per spectrum, adjust_pll now
  assumes that the first cell is the only one pertainent to
  the target gas and that subsequent cells only relate to
  interfering gases (e.g. H2O inside the FTS).

 VLL           Version 2.30    2016-09-29    GCT 
 cmc2mavray    Version 1.11    2016-09-26    GCT 
 GFIT                     Version 4.81        2016-09-25   GCT '
 GSETUP                   Version 4.14        2016-09-25   GCT
  Added a header to the isotopolog.dat file. It includes
  a format statement, column labels, and some description
  of those labels.  This will make the file more self-
  contained and more easily understood. Future changes
  to the format of the file will only require changes
  to the format statement inside the file, not the code
  that reads it, i.e., read_isotop.f.
  Also decided to make the isotope code (e.g. '626')
  a separate variable, rather than part of speci_id.
  This change requires modification of all programs
  that read isotopologs.dat.

GFIT                     Version 4.80        2016-09-05   GCT 
  Added five new NH3 isotopologs to isotopologs.dat to
  represent deuterated ammonia.
  Some of these had tiny isotopic abundances of ~1E-12
  which required changing all fia values from f10.8 to
  e13.8 format. This required changes to the read_isotop.f
  subroutine.  Also, had to increase MSPECI from 176 to 200.
  Also added propene (C3H6) to the list of gases in isotopologs,
  which required increasing the KGAS=75 to KGAS=80.  This also
  required adding an extra column to the .vmr files for the C3H6.

cmc2mavray   Version 1.09   2016-09-09   GCT'
     Since HITRAN multiplies all line intensities by the
  fractional isotopic abundances, FIA, even for the parent
  isotopolog, then all the vmr values written to the .mav
  file for use by GFIT represent the total (all isotoplogs)
  gas amount, even though they are attributed to individual
  isotopologs. For example, the vmr attributed to 12CH4 and
  13CH4 are identical, even though the latter is 90x smaller
  in reality.
     This is convenient when gas samples are unfractionated
  since it allows calculations to be performed without
  knowledge of the the isotopic abundances.
  But when the gas sample is fractionated the isotopic
  compositions built into HITRAN must first be removed
  before the true vmrs iof the isotopologs can be used.
     Previously, cmc2mavray handled this by inputting 
  the partial pressures already divided by the isotopic
  fractions into the .cmc file. This meant that in
  highly enriched cases, the partial pressures could
  exceed the total pressure.
     Now we input the true partial pressure of each
  isotopolog into the .cmc file.  cmc2mavray then
  divides them by the isotopic abundances built into
  HITRAN in order to undo the intensity fudging.
     Although this has the disadvantage of needing an
  additional input file (isotopologs.dat) containing the
  isotopic fractionations that were applied to the line
  intensities, it does allow meaningful checks that the
  isotopic partial pressures don't exceed the total, or
  that their sum does not exceed the total pressure.

GFIT                     Version 4.74        2016-06-17   GCT 
  Fixed a bug created in 2015-11-27 when I replaced NII
  with NHW in do_retrieval.f and fm.f, but forgot to
  make the same changes to do_retrieval3.f and fm3.f
  This caused windows with NFOV=3 to crash.

avg_ker   Version 1.34     2016-06-10   GCT
  Previously, program generated NaN's for the levels more
  than 1 km below the site altitude because the AK values
  are indeterminate there (0/0). Not a problem for the vast
  majority of sites which are below 1 km, which is why this
  bug remained hidden for years. Program now skips writing
  records for levels with indeterminate AKs, which means
  that the .aks files are no longer a fixed length -- they
  are shorter for high-altitude sites.

  Program now also write the level altitudes in addition to
  the level pressures.  Previously, the program wrote ilev-1,
  which for the usual 1 km vertical grid happened to match
  the altitude, but for any other vertical grid wouldn't.
  This required the level altitudes to be written (inside
  spectrum_loop.f) to the lunw_ak file that contains all
  the info (mainly Jacobians) that avg_ker.f needs to
  compute the kernels.

GFIT                     Version 4.72        2016-05-11   GCT
  Added the following if-statement to the subtract_cf code
  such that if the measured spectrum is a perfectly straight
  line across the window, the FFT returns cfamp=0 or cfperiod=0,
  then the the code that subtracts the channel fringes is skipped.
      if(cfamp*cfperiod.gt.0.0) then  ! GCT 20160511
        cffreq=2*spi*float(nmp-1)/cfperiod
        call vramp(resids,1,nmp)
        call vsma(resids,1,cffreq,cfphase,0,resids,1,nmp)
        call vcos(resids,1,resids,1,nmp)
        call vmul(resids,1,calcul,1,resids,1,nmp)
        call vsma(resids,1,-(cfamp/tcbar),obsrvd,1,obsrvd,1,nmp)
      end if

  Otherwise, obsrvd getts filled with NaNs whenever cfperiod=0.
  And if cfamp=0 with cfperiod non-zero, the code can still be skipped.

GFIT                     Version 4.71        2016-05-06   GCT
  Noticed that when fitting narrow windows in low-resolution spectra
  such that NMP < NCBF, then the compute_dlpbf.f subroutine would
  return NaN's in the higher basis functions. This would eventually
  crash GFIT with an array-bound violation inside the regrid.f
  subroutine, way downstream of the original problem.

  So added the following if-statment in spectrum_loop.f immediately
  after the call to subroutine jetspe, in where the value of NMP is
  determined:
     if(nmp.lt.ncbf) then
        write(*,*)'skipping spectrum '//specname_rl
        write(*,*)'nmp < ncbf = ',nmp,ncbf
        write(*,*)'Widen window or use fewer continuum basis functions'
        go to 141
     endif
 
   Also added the following if-statement inside compute_dlpbf.f that
   stops execution if nmp<ncbf.
      if(m.gt.n) stop 'compute_dlpbf: m > n  (this should never happen)'


GFIT                     Version 4.70        2016-04-08   GCT
  Added "sa_ll" option, which replaces the named HITRAN version
  with one from 4 years previously without having to edit
  gsetup or the .ggg files.

  Added new format (bytepw=11) to fetch.f

  Changed declaration of mavstring from *64 to *(nchar+14) in
  spectrum_loop.f   This was causing the spectrum names longer
  than 50 characters not to be read correctly and therefore no
  call to abscoj, and so gfit would comtinue using last good
  model which was likely completely wrong.

GSETUP                   Version 4.13        2016-04-08   GCT 
  Converted the hitran04.162 to hitran04.161 by running dos2unix
  Converted the hitran08.162 to hitran08.161 by running dos2unix
  Changed the names to match in gsetup.f

GFIT                     Version 4.69        2016-03-02   GCT 
  Extensive minor revisions to almost all programs/subroutines
  to avoid compiler warnings resulting from unused parameters
  in the include files. This was accomplished by initializing
  not-used dummy parameters (idum,rdum) to the parameter values.

  Also removed some of the include files from subroutines where
  only the real constants (e.g. zero, unity, spi, dpi) are used
  since these never change. Having an include file reduces the
  portability and re-usability of these subroutines. Decided
  that only parameters that the user might change should be
  in include files.  For example, fm.f was including the
  ggg_const_params.f file, but only used the "zero" parameter,
  the rest caused compiler warnings or required do-nothing
  assignments (e.g.  rdum=unity, rdum=spi, rdum=dpi)
  jetspe.f was including the ggg_const_params.f file but
  not using *any* of the parameters defined therein.

  This partially undoes some of the work that Cate did.


adjust_solar_linelist  2016-03-22   GCT
  Modified program to overwrite the last 14 characters of
  the comment field (95-108) with a version stamp e.g.
  "asl 20160322".  The intent is to provide information
  on the program (asl) and date of last modification.
  This means that only comment info in columns 71-94
  (e.g. " H (2-12) Balmer Kappa  ") will be retained.

compute_lm_absco         Version 1.08   GCT  2016-02-28
GFIT                     Version 4.68        2016-02-28   GCT
  Increased parameter resmax from 0.5625 to 0.625
  This allows GFIT to do a better job analyzing the SOLSPEC
  spectrum at high wavenumbers.
  What is the reason for limiting resmax? Because sometimes
  noisy, cloud-affected interferograms have ZPD very close
  to the end of an interferogram, which give a very small
  OPDmax, which gives a very low resolution, which causes
  problems.

GFIT                     Version 4.67        2016-02-12   GCT
  Simplified gindfile.f such that it no longer supports the
  option of using "$(GGGPATH)" in the data_part.lst file.
  This requires that users replace any instances of the
  environmental variable $(GGGPATH) with the actual path
  e.g. /home/toon/ggg/  which shouldn't be a bid deal.
  The motivation for this was to remove the otherwise-
  unnecessary calls to get_ggg_environment and the include
  file: ggg_int_params.f from inside the gindfile subroutine.
  I'm trying to purge include files from subroutines because
  it thwarts them being used elsewhere, outside the GGG umbrella.

GFIT                     Version 4.66        2016-02-10   GCT
collate_results          Version 1.75        2016-02-10   GCT
  Changed the way that the average rms fit is computed. This
  is outputted at the end of a GFIT run after being computed
  inside spectrum_loop.f. It is also computed by collate_results.f
  from the individual rms values in the .col file.

  The problem with a simple mean, is that a single very large
  RMS value, perhaps due to a very small CL value in a blacked-
  out window, with no real significance, will boost the mean RMS.
  This can be avoided by computing an inverse rms
    RMS_bar = 1/SQRT[(Sum 1/RMS^2)/N]
  but this introduces the opposite problem: that a single very
  small RMS value will make RMS_bar small.  Tried a new equation:
    RMS_bar = N/(Sum 1/(rmsocl+0.001))  in spectrum_loop.f
    RMS_bar = N/(Sum 1/(rmsoclpc+0.1))  in collate results.f
  These equations are consistent because in collate results
  rmsocl is in % whereas in GFIT it is absolute.
  This can be viewed as averaging RMS with a weight of 1/RMS
  which give less emphasis to very small RMS values. The 0.001
  prevents zero-divides and prevents very small rmsocl values
  (usually associated with very large CL values) from having
  undue influence.

  The small RMS values tend to be associated with large CL values
  because what is repoted in the .col file is RMS/CLa. So one way
  to avoid this is to multiply RMS/CL by CL before averaging.

GFIT                     Version 4.65        2016-01-19   GCT
  Modified the code in abscoj.f that narrows line widths for
  the CH3Cl Q-branches to mimic the effects of line mixing.
  Previously, the code assumed that if the linelist name
  contained 'hitran', then it was in the 160 CPL format.
  Changed the if-statement to be able to handle hitran00.101
  so that I could use this linelist for my "HITRAN
  Spectroscopy Evaluation" paper.

GFIT                     Version 4.64        2015-11-27   GCT
  Modified the regrid.f subroutine. Previously, the if-statements
  that test whether the presribed output range can be calculated
  from the available input vector and operator were inconsistent
  with the actual array usage. This led to occasional problems
  such as array bound violations resulting in garbage being
  returned, or legitimate calls to regrid being denied by the
  over-protective if-statements. This is not a new problem, 
  it was inherited from newdec.f, but I decided that it was
  time to fix it. The new version produces identical results
  but without the risk of occasional mis-fires.

  Also modified the input arguments to regrid.f, changing
  nii to nhw (nii=2*nhw*odec). This also required making 
  the same change to fm.f and do_retrieval.f

  And while I was in the swing of replacing nii with nhw,
  I also replaced profzl.f with compute_ils.f, a new
  subroutine in which the nii argument is replaced by nhw
  and interp (making it backward incompatible -- hence the
  name change).  Another advantage of this is that the
  normalization of each subset of the ILS vector to untity
  is performed inside the compute_ils.f subroutine, simplifying
  the calling programs.

adjust_solar_linelist   Version 1.33   2015-11-22   GCT
  Was encountering a linker error when I tried to increase
  MLINE > 502:
  hfti.f:(.text+0xf32): relocation truncated to fit: R_X86_64_32S against `.bss'

  So I looked it up on the internet and apparently this error
  is due to the 32-bit linker being unable to address more than
  2GB of memory.  Problem fixed by using the "-mcmodel=medium"
  option in the Makefile.  Surprisingly, there is no speed
  penalty for using this option (so I don't understand why it
  isn't the default).

GSETUP                   Version 4.10        2015-09-28   GCT
  Looking at MkIV ground-based H2O results in the .cew file,
  I noticed that several of the MIR windows had mean VSF values
  biased low by ~5%.  A look at the linelist revealed that in
  these windows the primary absorbing h2o isotopolog was 18O,
  not 16O.  In the .mav file the three H2O isotopologs all had
  the same vmrs, so in fact the low bias was due to atmospheric
  isotopic fractionation, not a spectroscopic problem.

  I therefore changed the code in the write_mav.f subroutine,
  called by gsetup, to treat isotopic fractionation of H2O as
  another special case.
  In gsetup.f, HDO is set to H2O*0.15*(8.0+log10(h2ovmr(ilev)))
  In the write_mav subroutine, the 2h2o and 3h2o fractionations
  are set to 1/8 and 1/16 of that of HDO, respectively.
  This results in the apriori H2O vmrs in the .mav file being
  different for 1h2o, 2h2o and 3h2o.

  For TCCON this change should make little difference because
  at 4000+ cm-1 the 2h2o lines are avoided and weak. But in
  the MIR the T-insensitive 1h2o lines are generally too
  strong and so some of the best windows are 2h2o.

GFIT                     Version 4.64        2015-04-15   GCT
  In June 2014 modifications were made to the read_mod_FC.f
  subroutine to bring better consistency between the .mod
  and .mav files for high altitude TCCON sites. Instead of
  integrating the hydrostatic equation inside read_mod_FC
  using the P/T profiles only, the NCEP altitudes are now
  used directly.

  An unintended consequence of this change was that the
  altitudes in the balloon .mod files, previously unused,
  were being taken as correct. Trouble is, that they were
  only approximate, as a guide for adjusting the T profile.
  In fact, in the 93269 balloon flight, for example, the
  altitudes in the .mod file are all 99.99 km above balloon
  altitude. This was causing a progressive over-estimate of
  the density above the balloon reducing the retrieved VSFs,
  especially for the spectra measured at SZA<90 deg. For
  example, at SZA=80 the VSF was over-estimated by a factor
  5 for this particular flight.

  To stop read_mod_FC from using the altitude information
  in the balloon case, the first line of each .mod file
  containing NLHEAD and NCOL was modified: NCOL was set to
  2, irrespective of the actual number of columns. Since
  the first two columns are P/T, this change has the effect
  of hiding the Z information, forcing read_mod_FC.f to
  compute the altitudes using the hydrostatic equation,
  as it did prior to June 2014.


GFIT                     Version 4.63        2015-04-09   GCT
  Increased parameter tau in do_retrieval from 5E-06 to 6E-05.
  TAU is the Absolute tolerance parameter provided by user for
  pseudorank determination. Increasing TAU means that GFIT tries
  less hard to fit the residuals using variables whose Jacobians
  are small. In fact, it will completely give up on fitting the
  offending variable, leaving its value at the a priori value.
 
  So whereas previous a VSF of 50 +/- 80 might have been retrieved
  for a weakly absorbing gas, now the result will be 1.0 +/- 80

  Looking at MkIV balloon data, this only made a difference to
  very weakly absorbing retrieved gases, and even then the
  change was always withing the error bar.

mod_maker_10.2  2014-01-16  GCT
  Removed the code that supported the old way of running mod_maker:
  using the mod_maker.input file.  This allowed the trilinear_inter0
  subroutine to be deleted, and various other simplifications.

mod_maker_10.1  2014-01-15  GCT
  Removed if-statement at end of read_global_data subroutine
  that checked that lat/longitude limits of NCDF input file
  encompassed the site location. This was only testing first
  spectrum of each year anyway (whenever a new NCDF file was
  read), and was identifying site longitudes between 357.5 and
  0.0 as out of range, because it did not recognize the periodic
  nature of longitude: that long(0)=long(360).

  This if-statement is now replaced by tests on the lat/long
  indices inside the tri_linear_interp1 subroutines. This has
  the advantage of being done for every spectrum, not just the
  first of each year.

  Modified the argument list for the trilinear_interp subroutines.
  Instead of inputting the lat/long/time in NCDF indices, they are
  now input in natural units (deg for lat/long) and the conversion
  into NCDF indices occurs inside the routines.  This facilitates
  testing that the requested lat/long/time lies within the bounds
  of the NCDF file.

avg_ker   Version 1.32     2015-01-13   GCT'
  Modified code to accept "wtf" in the last/command line of .ggg
  file to trigger writing of the .wtf files containing weighting
  functions. Previously this was hard-wired in the program using
  the kwtf=0/1.

GSETUP                   Version 4.01     2015-01-12    GCT 
 Added CHClF2 to the list of gases having a secular trend
 (in apply_secular_trend.f). Also modified the profile in
 gnd_summer.vmr, roughly doubling the valu at all altitudes
 to bring it into agreement with in situ measurements in 2005,
 the year to which the vmrs are referenced.

GFIT                     Version 4.62       2014-12-17    GCT 
 In do_retrieval.f, added 1.0E-08 to tbar. This prevents small
 uncertainties in strongly blacked out windows where tbar=0.0,
 while still retaining the use of TBAR as a pre-conditioning to 
 prevent overflow in SCOV2.

GFIT                     Version 4.61       2014-09-29    GCT 
 Implemented the SG (Solar-Gas) stretch: the wavenumber shift divided
 by the local wavenumber. It is dimensionless.  Before writing to the
 .col file it is multiplied by 10^6 to give it units of ppm (parts per
 million). It represents the amount of solar-gas stretch over and above
 the OSDS value in the runlog, which also has units of ppm.
 So the total solar doppler shift is broken down into two components:
 OSDS is the value in the runlog, pre-calculated from the knowledge
 of the earth's orbit and spin.  S-G is the extra doppler shift (due
 to mis-pointing) determined empirically from the spectral fits.

 So the S-G shifts reported in the .col files are now the retrieved
 values, not the value estimated by the function solar_gas_shift, which
 is now obsolete.  As I probably mentioned previously, the advantage of
 expressing shifts in ppm rather than cm-1, is that their value becomes
 independent of the spectral location of the window, assuming that the
 mis-calibration comes from a laser wavelength error or a doppler shift.

 One limitation of the implemented approach is that the solar spectrum
 is still computed only once, stretched by the OSDS value, by calling
 solar_pts, before the iteration loop. Subsequent evaluations of the
 SG-shifted solar spectrum within the iteration loop are performed by
 interpolation, not by re-calling solar_pts. This was done for reasons
 of simplicity and speed. It seems to work well if the retrieved SG
 shifts are small compared with the widths of the solar absorption
 features. The narrowest solar lines (CO at 2000 cm-1) have half-widths
 of about 0.02 cm-1 or 0.02/2000 = 20 ppm. The maximum possible SG shift,
 when mis-pointing onto the East or West limbs of the solar disk, rotating
 at 1900 m/s, is 1900/3E+08 = 6 ppm. So I think that the interpolation
 should be okay. We could not, however, use the retrieved SG shifts to
 accurately infer the satellite velocity of an ACE- or MATMOS-like solar
 occultation FTS orbiting on a satellite (up to 7 km/s) without some good
 a priori knowledge inserted into the OSDS values.

 Also changed the frequency shifts (FS) to be in units of ppm, rather
 than mK.  This was actually done a while ago, but was hidden from the
 user (by multiplying the FS by a thousand times the central wavenumber).
 Now the reported FS and SG shifts are in ppm. While making this change,
 I increased the number of digits in the format, so now FS can range from
 -9.99 to 99.99 ppm. At 8000 cm-1 this corresponds to absolute shifts of
 -80 mK to +800 mK. Range-wise this is much bigger then before (-9.9 to
 +99.9 mK), and the precision is slightly better (0.08 mK versus 0.1 mK).
 At 4000 cm-1 the range of reported FS values will correspond to -40 mK
 to +400mK with a precision of 0.04 mK.  This will provide somewhat
 better fidelity on the wind doppler shifts. It will also allow
 instruments with non-stabilized lasers (e.g. EM-27) more slack.

 Regarding the solar spectrum, there are three options we want to support:
 1) Compute solar spectrum but don't retrieve any SG shift
 2) Compute solar spectrum and retrieve a SG shift
 3) Don't compute any solar spectrum.
 The latter option is used when fitting lab spectra or occultation spectra
 in which the solar features have already been ratioed out (e.g. ACE, MkIV).

 To remain backward-compatible with previous .ggg files, I suggest " so "
 be used for option 1. Then " sg " would be used for option 2, and "  "
 for option 3. I imagine that in most TCCON windows we will be using the
 " sg " option, and that the " so " will be mainly for testing.

 Inside fm.f, a new subroutine, lagrange_differentiation, is called twice.
 The first time to find the gradient of the solar spectrum to compute:
 the stretched solar spectrum and its Jacobian with respect to SG stretch.
 The second call is to determine the FS Jacobians from CALCUL.

 Also changed the abscoj.f and solar_pts.f subroutine such that the
 variable fzero in the argument is replaced by IFCSP, the index of
 the first calculated spectral point. This leads to a simplification
 of the code in the subroutines themselves and in the calling program
 (spectrum_loop.f). The down side of this is that the grids on which
 spectra are computed must now include 0.000 cm-1.  But this isn't
 such an important loss of generality because subroutine regrid makes
 the same assumption.

 In spectra without sharp telluric features in the fitted window,
 the FS and SG shifts become perfectly anti-correlated. For example,
 FS could become +12 and SG=-12 with identical spectral fits as if
 both FS and SG were zero.  To prevent warnings about these stretches
 exceeding the limits, the a priori constraints on FS and SG were
 tightened.

GFIT                     Version 4.60       2014-09-09    GCT
 Changed the way that the zero offset is applied. Instead of
    Y = CONT.(TRAN + ZOFF)
 we now have
    Y = CONT.(TRAN + ZOFF.(1-TRAN))

 So when the transmission TRAN=0, there is no difference,
 but when TRAN=1 there is now no offset.

 The reason for this change is to allow fitting of lab
 spectra that have been ratioed so that they are absolute
 transmittances, and so the CL is not fitted. If there is
 a zero-offset, and you simply add ZOFF, then the continuum
 regions (no absorption) are no longer are centered at 1.0.
 The new scheme keeps the continuum regions at 1.0, while
 still allowing a correction of the zero level offset.

 Note that this change also affects the partial differentials
 of CONT and ZOFF.

write_official_output_file   Version 1.36    2014-09-05   GCT
 WRITE_EOF                Version 0.45     2014-09-05     GCT
In the .csv output files, the first line of the header,
containing the number of header lines and number of data
columns, is now written in the CSV style, with comma as
delimiter instead of spaces, to be consistent with the
subsequent data block.

 GFIT                     Version 4.50       2014-08-15    GCT 
Changed the frequency shift into a frequency stretch.
This is because all physical phenomena that cause an
error in the frequency calibration (laser drifts, doppler
shifts, etc) produce a frequency error that is directly
proportional to the absolute wavenumber, i.e., a stretch.

This change makes little difference in narrow windows,
or in wide windows if the frequency calibration is good,
such that the retrieved shifts are tiny. But this improves
the fits to broad windows when the frequency calibration
is poor. Previously, when fitting a shift to correct a
stretch problem, the line positions were shifted too much
on the left of the window and too little on the right,
resulting in anti-symmetric residuals on the left, and
oppositely anti-symmetric residuals on the right, with
good fits in the middle.

To implement this, the NEWDEC subroutine was replaced
throughout by REGRID, which no longer accepts a shift
as an input parameter. Instead the RDEC argument is
modified according to the retrieved stretch CX(IPFS).
The complication of this is that you now need to know
the absolute starting indices of the measured and
calculated spectra. And these are both assumed to 
include 0 cm-1.

This also reqiured a modification of the FS partial
differentials, reducing them on the left and increasing
on the right so that they become stretch PDs instead of
shift PDs.

For compatibility with previous results, at least for
narrow windows, FS is still the shift (in mK) in the
middle of the window. But the code now assumes that
the shift increases linearly with absolute wavenumber.

At some point in the future, after this change has been
more thoroughly tested, I will change the units of FS
from mK to ppm.  And I will also remove the "sssss" and
"shshs" arguments that newdec needed.
 

 Linefinder     Version 1.44   17-Jul-2014   GCT
Major simplification to code. Now uses only SPT files created
by GFIT as input. Direct access to spectra now not allowed or
supported.  This has several advantages:

1) Simplifies the user-interface. You only need to give
linefinder the name of the spt file that you want it to use.

2) linefinder no longer needs the runlog to figure out the
frequency limits and spectral point spacing. It now gets
this info from the header line of the spt file.

3) The name of the spectrum that you give it is the one that
will be used. It doesn't have to be the first one in the
runlog or .col file, as previously.

4) The measured spectrum in the SPT file has already been
 smoothed by GFIT.  This avoids the need for smoothing
inside linefinder to prevent ringing, which would otherwise
be fitted as spectral lines.

The only slightly non-intuitive aspect of this change is that
the measured spectrum of interest must first be fitted with
an empty linelist, so that the residuals are Tm-1.


 GFIT                     Version 4.42       2014-07-14    GCT 
Various changes to spectrum_loop, fm.f to prevent accessing
ex(1) or pd(1,1) when nothing is retrieved (nfp=0), causing
an array bound violation, because EX is dimensioned EX(NFP)
and PD as PD(NFP,*) where NFP=Number of Fitted Parameters.

 GSETUP                   Version 4.00     2014-06-22    GCT 
Major changes to the read_model_fc.f subroutine.
It no longer computes the tropopause altitude. This is now done
later by the function compute_ztrop which is called from gsetup
and which operates on the 1km vertical grid, rather than the
NCEP pressure grid (1000, 925, 850, 700, 600, 500, 400,...mbar).

Also, for .mod files that already contain altitude information,
such as those from NCEP, read_model_fc no longer re-computes the
altitudes using the hydrostatic equation. Instead, it assumes
the NCEP altitudes are correct and interpolates in altitude to
find the T/P values on the 1 km grid. This is much simpler than
integrating the hydrostatic equation, but assumes that NCEP have
correctly imposed hydrostatic equilibrium.

The main motivation for this change was the realization that
for high-altitude sites, the below-surface NCEP pressure
profiles couldn't be reproduced by a simple integration of the
hydrostatic equation. This was resulting in an inconsistency
between the input (.mod) and output (.mav) P-Z profiles that
originated below the surface.  NCEP are apparently somehow
accounting for the fact that gravity is a maximum at the
surface and decreases above and below.

What about input models that don't contain any altitude
information other than surface altitude, such as sonde
profiles?  In these cases, the hydrostatic equation is
integrated, as previously. But this is now done early on,
as the input data are read in, not during the altitude
regridding/interpolation.

The net result is that the .mod files have numerous minor
differences.

   mod_maker_10.0  20-Jun-2014  GCT
Changed the H2O profile in three ways:
1) In the 300-1000 mbar range, if the NCEP H2O is such that RH < 10%,
 then the H2O vmr is replaced with the value that gives RH=10%
2) For P<300 mbar, the H2O becomes a weighted average of two terms:
 - trop_h2o: the H2O is extrapolated upwards assuming a constant
   RH at the 300 mbar value.
 - strat_h2o: the H2O vmr is a gaussian in [log(P)]^2 peaking at 
   the 1 mbar level with a value of 7.5 ppm
 The weights for trop_h2o are (P/300)^3 and for strat_h2o 1-(P/300)^3
 so at the 300 mbar level strat_h2o has no weight. But by 150 mbar,
 trop_h2o has a weight of only 0.125 and strat_h2o has a weight of 0.875.
3) For P<300 mbar, if the H2O RH exceeds 100% (due to strat_h2o) then
  the H2O vmr is set to SVP_H2O(T) so that RH=100%.

Note that in this new formulation the H2O is independent of the
explicit tropopause altitude, although it does depend on the
temperature, which implicitly contains tropopause information.
So the two methods of using mod_maker (mod_maker.input & runlog)
should now produce identical H2O profiles.

The tropopause altitude is no longer calculated inside mod_maker.
In mode 1 (mod_maker.input), the NCEP tropopause altitude is 
written to the .mod files, but is not actually used for anything.
This is just to allow the used to see the NCEP Ztrop and perhaps
compare it with the value subsequently computed. In mode 2 (runlog)
a tropopause altitude of 0.0 is written to the .mod files.

 newspect    Version 2.00     2014-06-17    gct
Removed the "Runlog" option from the button bar.  It is just
as easy to exit and re-start.  This simplifies the code and
allows the runlog name to be entered before the wavenumber
information, which to me is more intuitive.

  collate_results   V 1.73    GCT   2014-06-06
Moved the two if-statements that keep the uncertainties
written to the output file within single-precision limits:
           if(yerr(jval).gt.3.4028E+38) yerr(jval)=3.4028E+38
           if(yerr(jval).lt.1.175E-38) yerr(jval)=1.175E-38
They are now later in the code, where they now apply to all cases
(t, v, l, r, etc) rather than just the 'l' case previously.
This prevents Inf in the output file when the VSF error is
large (>1E+16) and the vertical column is also large (>1.E+23)

ggg/windows/gnd/tccon.gnd
Added a new HDO window: centered at 6458.1 cm-1 and 41.4 cm-1 wide.
Seems to be consistent with the others (to within 0.5%).
It roughly corresponds to the window used by Boesch et al. [2013]
for their analysis of GOSAT HDO.

 compute_lm_absco    Version 1.08   GCT  2014-05-28
Increased parameter resmax from 0.375 to 0.5625
with a corresponding change in gfit/spectrum_loop.f.
This allows GFIT to analyze spectra measured with the
Bruker M-cubed instrument at 0.9 cm OPD.
What is the reason for limiting resmax? Because sometimes
noisy, cloud-affected interferograms have ZPD very close
to the end of an interferogram, which give a very small
OPDmax, which give a very low resolution, which causes
problems.

 GFIT                     Version 4.41       2014-04-24    GCT 
Modified the  lq=reclen-67  statement to
         if(reclen.ge.161) then
            lq=94
         else
            lq=reclen-67
         endif

This avoids array-bound violations when reclen=162.

 DIURNRET     Version 4.17      2014-04-22   GCT
Returned smoothing to the default MkIV balloon value.
         smfact=0.05*cos(mtlat)+0.01*(1-cos(mtlat))**2  ! MkIV balloon
Was previously set for VATMOS.
c         smfact=0.010  ! VATMOS


 GFIT                     Version 4.40       2014-04-21    GCT 
Fixed a bug in abscoi.f that occasionally caused gfit to crash
when using the HITRAN 2012 linelist (size 161) together with
other linelists of size 101. This was because the lq variable
was set in the first loop over linelists, instead of the
second loop. In the if-statements pertaining to CH3Cl line
mixing, too little of the the "quantum" field was being read
from HITRAN, crashing GFIT when quantum was parsed.
Fixed by moving the
    lq=reclen-67
statement to the second loop over linelists.

 GFIT                     Version 4.39       2014-04-13    GCT 
In write_col,f, added a small value ta the vertical and
slant columns in the computation of airmass, i.e.,
oloscol(jtg)+.01)/(overcol(jtg)+.01)
This causes the airmass written to the .col file to be
1.0 rather than NaN when the columns are both zero, which
often happens in fitting lab spectra, when a particular
spectrum doesn't have a particular fitted gas.

DAYAV    Version 8.00    2014-04-06   GCT
Removed the variable averaging period, which was ambiguous.
Now that now it is fixed to one local calendar day. So results
between solar midnight and the next midnight are averaged.

 GSETUP                   Version 3.93     2014-03-27    GCT
Fixed bug by which GSETUP would occasionally fail to produce
an entry in the .mav file. This would happen if the previous
day included observations in the evening, and the current day
in the early morning such that there was less than 0.65 of a
day between them. This can happen at Park Falls in June.
This is not a disaster, GFIT will continue using the model
from the previous day, whis is probably not too bad. But this
was not how GSETUP was intended to work.

This was fixed by forcing a model change whenever the
current observation was a different solar/local day to
the previous one, irrespective of the 0.65.

 GFIT                     Version 4.38       2014-03-23    GCT 
Fixed bug that caused NaN in the VSF_error whenever OPD=0.00
This was accomplished by simplifying the expression for
CORRLD to remove the term (resn-0.5/opd)**2, simplifying
the expression to
      corrld=sqrt(rect**2+((1.+0.4*apo_c)*resn)**2)/gint
This partially undoes the change made on 20-Sep-2012 (the
 last sentence).

 GFIT                     Version 4.37       2014-03-21    GCT 
  Fixed a bug that was causing NaN in the uncertainty in
blacked out windows.
Replaced
       ex(jfp)=dsqrt(
-     &   dabs(dble(ex(jfp)))/(tbar+0.0001d0)/(tbar**2+1.0E-36)
by
       ex(jfp)=dsqrt(
+     &  dabs(dble(ex(jfp)))/(abs(tbar)+0.0001d0)/(tbar**2+1.0E-36)

 apply_airmass_correction     Version 1.31    2014-03-17   GCT
Program was producing NaNs in output file for the Xgas_error
whenever the column amount was zero. This happened because
the Xgas_error was computed by first computing the fractional
uncertainty (fu=infinity) and then multiplying this by the gas
column (col_gas=zero), and dividing by the total column of air.

Xgas_error = Xgas*fu
where
Xgas=col_gas/col_air
fu=SQRT[col_gas_error/col_gas)**2+(col_o2_error/col_o2)**2]

This ineedless singularity, introduced whenever col_gas=0,
 can be completely avoided by multiplying the SQRT term by
col_gas from Xgas, such that now:

Xgas_error=SQRT[col_gas_error**2+(col_gas*col_o2_error/col_o2)**2]/col_air

This new formulation is well-behaved for all values of col_gas,
although it will still produce problems if col_o2 is zero.


 GFIT                     Version 4.36       2014-03-17    GCT 

Fixed a problem which was occasionally causing VSF_error to be Inf
in highly saturated windows where all the PDs were small (~1.E-25).

This was not really a bug, rather it was an insufficient dynamic
range of the single-precision code to manipulate such small
numbers without under/over-flow. Three separate things had to
be done to remove all the Infs in the Darwin dataset.

1) the function SDOT called by SCOV2 was performing single
precision dot-products of rows of the PD array, whose elements
had values of ~1.E-25. Even though the resulting dot-product
was immediately divided by the diagonal element of PD, creating
an in-range value, it was too late: the dot-product had already
under-flowed. To correct this, I created a double precision
version of the dot product function called DSDOT. This allowed
SCOV2 to output sensible (i.e. non-Inf) values for the variances
of the target gas VSFs.

2) The VAR scalar passed to SCOV2 needs to be pre-conditioned
by multiplying by a small value before the call to SCOV2.
Otherwise the multiplation of VAR by DSDOT causes overflow
inside SCOV2. The subsequent EX values outputted from SCOV2
must then be divided by the same pre-conditioning scalar to
get the true uncertainties. Basically this is just a "gain change"
before SCOV2, to keep the values within the single-precision range,
and a compensating gain reduction afterwards. The pre-conditioning
scalar was chosen to be the square of the mean transmittance of the
window, TBAR.

3) But the above wasn't enough to fix the Inf problem, because further
downstream in do_retrieval.f, the now-sensible EX values produced
by SCOV2 (the squares of the uncertainties) are divided by TBAR^2,
before being square-rooted. For a saturated window Tbar is very
small, so if single-precision EX is already close to 1.E+38, the
division by 0.0001 causes the Inf. To avoid this, DBLE(EX(j)) is
used in the division and a DSQRT is used to produce the final
uncertainties.

These three changes don't guarantee that there won't be Inf's in
the future, but they reduce the risk.



Added extra integer (INDFSP) to the argument list for the
calls to do_retrieval.f and fm.f

apply_airmass_correction     Version 1.30    2014-03-06   GCT
 Redefined Xair in the .ada file such that it is now the DRY
value (previously it was wet). This was performed by subtracting
the H2O column from the air column prior to division by VC_O2
       yrow(kair)=yrow(kair)-yrow(kh2o)*18.02/28.964
We decided that the dry Xair was more useful in looking for
long-term drifts in the data record because changes due to
H2O variations have been mostly removed.

 GFIT                     Version 4.35       2014-03-04    GCT
Added the 15NO2 isotopolog in order to be able to fit
lab NO2 spectra. This forced an increase in MSPECI.

Also implemented a check in fetch.f to ensure that the
frequencies of ascii spectra always increase (or decrease)
monotonically, to guard against ascii spectra having
duplicated points.

 avg_ker   Version 1.31     2014-02-06   GCT
The Jacobian files, written by GFIT when the AK option
is invoked, are now deleted after being read by avg_ker.
Also, the .wtf files are now not created (by default).
These changes allows avg_ker to be run on a long runlog
of spectra without filling up the disk.

 GFIT                     Version 4.34       2014-01-09    GCT 
Changes to abscoj.f to correctly handle self-broadening
in cases of large isotopic enrichment. Currently, the
isotopologs are treated as if they were seperate gases
each with its own vmr. In the absense of isotopic
fractionation, the vmr of each isotopolog is set to
the total vmr of all isotopologs, so the vmr used to
calculate the self broadening is correct. But when there
is large isotopic fractionation (different from that
assumed by HITRAN) then the vmr of the individual
isotopolog does not represent the total for the gas.
For example, HDO is hugely enhanced relative to H2O in
spectra of Mars, Venus, and in several lab spectra.
In these circumstances, HDO lines will be over-broadened
because the current code implicitly assumes that the
H2O is also enhanced, but in fact it is reduced because
the HDO enhancement displaces H2O.

Remember that the HITRAN line intensities are all scaled
by the HITRAN isotopic ratios.  This allows/requires the
total vmr be used for every isotopolog.

To remedy this problem, it is necessary to compute the
total vmr of each gas for each level. This is done by
multipling the vmr of each isotopolog by the Fractional
Isotopic Abundance (FIA) to get the true vmr, and then
summing these over the isotopologs of each gas. Since
the sum of the FIAs is 1.000, it is not necessary to
subsequently re-normalize back to HITRAN-compatible VMRs.

Below is the code installed into abscoi.f.

c  Compute total vmr for each gas (used for self-broadening).
c  This is done by adding the true vmrs (FIA*VMR) for each isotopolog
        do ilev=1,nlev   ! Loop over Levels
           jgas=1
           jspeci=1
           vmr_tot(jgas,ilev)=fia(jspeci)*vmr(jspeci,ilev)
           do jspeci=2,nspeci   ! Loop over Gases
c  Sum over isotopologs of each gas
              if(jgas.eq.gasindex(jspeci)) then
                 vmr_tot(jgas,ilev)=vmr_tot(jgas,ilev)+
     &           fia(jspeci)*vmr(jspeci,ilev)
              else
                 jgas=jgas+1
                 vmr_tot(jgas,ilev)=fia(jspeci)*vmr(jspeci,ilev)
              end if
           end do
c  Water vapour is a special case, H2O, HDO & D2O have to be added.
c  And the FIA of D2O are currently those of H2O (format issue)
c  and so must be multiplied by the square of the HITRAN D/H ratio.
           vmr_tot(1,ilev)=vmr_tot(1,ilev)+vmr_tot(49,ilev)+
     &     9.653449e-08*vmr_tot(71,ilev)     ! H2O
           vmr_tot(49,ilev)=vmr_tot(1,ilev)  ! HDO
           vmr_tot(71,ilev)=vmr_tot(1,ilev)  ! D2O
        end do


This change should only significantly affect results
when there are large isotopic fractionations of a
self-broadened gas and the SBHW differs from the ABHW.
This change does nothing if:
 - SBHW=ABHW
 - VMR << 1
 - VMR(jspeci)=VMR(jspeci+n)


 GSETUP                   Version 3.92     2013-12-20    GCT 
Tweaks to the a priori vmr profiles in gnd_summer.gnd
and to the subroutines that define the age of air, 
latitude gradient, secular trends, and seasonal cycle.
These were done to improve the agreement with
in situ profiles (including 2013 aircore data).

Also tweaked the HF profile and the secular trend of HF
to improve agreement with ground-based observations
which previously showed a mean VSF of ~1.25 for recent
observations. Also included an increasing HF trend in
the 1980's and 1990's.

 GFIT                     Version 4.33       2013-11-22    GCT
 Changed the way that the FS Jacobians are calculated
 inside fm.f.

 Previously, a 9-point, windowed, SINC operator was used
 (actually the differential of the SINC function), but
 this left artifacts at the edges of the window, which
 had the potential to perturb the retrieved FS value if
 there were large anti-symmetric residuals near the edges
 of the window.

 The new method differentiates the Lagrange polynomial
 fitted to the local data points (two on each side).
 This seems to do much better at the edges of the window.


isotopologs_20131008.dat
 Changed C2H6 over to the new fundamental assignments.
 Increased the number of fundamental modes from 11 to 12
 and added back the nu4 torsional mode (with degeneracy of 0).


collate_results             Version 1.70     2013-10-08   GCT
 Added if-statement to skip blank lines in multiggg.sh file.
 Subroutines generate_qc_flag.f, and  prepare_collate_all.f
 also needed a similar if-statements.

GFIT                     Version 4.32       2013-08-13    GCT 
 Modified read_mavfile_body.f to use the column headers to index
 the vmrs, rather than isotopologs.dat. This provides more flexibilty
 and backward compatibility with old .mav files that pre-date changes
 to isotopologs.dat.

 For example, if the isotopologs.dat file has been modified (new gas
 added) the old .mav files will still work, avoiding the "Mismatch"
 error message.

 The content (i.e. column headers) of the .mav file can now even
 change between data blocks (delimited by "Next Spectrum") within
 the same .mav file. This could be useful for lab spectra.

 The column headers of the .mav file are now checked for:
  - species not present in isotopologs.dat (Error)
  - differences in the order of species from isotopologs.dat (warning)
  - duplicated specie names (Error)

 This revealed an error in isotopologs.dat in which the second COF2
 isotopolog (13COF2) was numbered kiso=1. Changed this to kiso=2.

 A benefit of this is that the isotopologs_local.dat file is no
 longer needed, and so gsetup.f has been modified to eliminate

 Also moved clistindex.f from src/gsetup/ to src/comn/  since it is
 now used by read_mavfile_body.f, in addition to gsetup/write_mav.f

 The downside of all this is that read_mavfile_body.f now needs to
 know the path to isotopologs.dat and needs to read it.


GFIT                     Version 4.31       2013-08-07    GCT 
 Added an if-statement to spectrum_loop.f to check that the body
 of the .mav file (containing Z/P/T/VMR profiles) had actually
 been read in, before calling absco.  If not, the program stops.

 Without this check, if the "Next Spectrum:" string in the .mav
 file doesn't match the first spectrum in the runlog (e.g. due
 to manual editing of the .mav file), then spectrum_loop will 
 proceed to call abscoj without the Z/P/T/VMR arrays ever having
 been initialized, which produces lots of NaNs :-(  without any
 warning that anything was amiss.

 Also increased mfp from 30 to 32.

DAYAV    Version 7.80    2013-06-27   GCT
 Modified dayav.f to read the format from the input file,
 instead of using a hard-wired format. Also removed the
 "navg"  variable from the output file.

collate_results             Version 1.66     2013-06-02   GCT
 Modified code so that it only pre-pends the spectrum names
 for non-MkIV ground-based runlogs (i.e. TCCON).
 
GSETUP                   Version 3.90     2013-06-04    GCT 
 Expanded the number of gases for which latitude gradients
 are accounted in the a priori profilea to include several
 hydrocarbons and freons. Added NGAS to the argument list
 in the call to sunroutine apply_vmr_latitude_gradients.

 Same changes to stand_alone_a priori/*.f

GFIT                     Version 4.30       2013-05-27    GCT
  Eliminated the MVMR (=28000) parameter from spectrum_loop.f
 and from write_aux.f and replaced it with MSPECI*MLEV.

 Also modified the state vector step size limit from:
   dxlimit=0.10+0.5*abs(cx(jfp))
 to
   dxlimit=0.25+0.5*abs(cx(jfp))
 This allows the state vector values to pass more quickly
 through zero, speeding up iteration in some cases.

VLL    Version 2.22    2013-05-22    GCT 
Modified VLL to call the read_isotop.f subroutine
to read isotopologs.dat, rather than reading it
directly. This has the advantage that the species
-specific gas names are returned, rather than the
name of the last isotopolog.

 adjust_pll_se       Version 1.56        2013-05-21       GCT
The name of the runlog is now read from the .col file header,
rather than being hard-coded into the program.
This should make it more flexible.

summarize_linelist   version 1.07   2013-05-21
Changed the name of the anomaly report from "anomaly.rpt'
to 'anomaly_'//inputfilename
This way, when used in batch mode, the output files don't
over-write eachother.
Also, assume linelists are local, not in $GGGPATH/linelist.

GFIT                     Version 4.29       2013-05-21    GCT
Modified all programs that use the file_size_in_bytes.f
function to define the function (and fsib) as integer*8
to be able to handle files larger than 2^30 characters,
such as hitran2012.161. Also modified the function itself.

Also modified isotopologs.dat, summarize_linelist.f, 
abscoj.f and hitran_to_atmos_gas_numbering.f to handle
the new isotopologs present in HITRAN2012, especially
the tenth CO2 isotopolog which is denoted by kiso=0
in the linelist and in isotopologs.dat.

GFIT                     Version 4.28       2013-05-18    GCT
 Fixed a bug in do_retrieval.f by which the tilt computed
during the zero'th iteration hadn't been normalized by the
factor rnfac=SQRT(3(N-1)/N+1)) which became necessary when
we decided to normalize the DLPBFs to have an L2-norm of N, 
rather than the first value being 1.0

This bug led to the 1st iteration often having a much worse
RMS than the 0th iteration, since the tilt was overestimated
by a factor of ~1.73 in the statevector, although it had been
correctly accounted for in the zeroth iteration. When fitting
channel fringes, this could cause irreversible damage.

 GFIT                     Version 4.27       2013-02-18    GCT
Moved the code to find unrecognized/duplicated gas names
into gfit.f, instead of spectrum_loop.f where it was called
over and over.

In do_retrieval.f, tightened the constraint on the
maximum step size by a factor 2 from:
-            dxlimit=0.2+abs(cx(jfp))
to
+            dxlimit=0.1+0.5*abs(cx(jfp))

This seems to prevent occasional NaNs in the .col file
when fitting saturated spectra without convergence.


 extract_pth     Version 1.14   2013-03-01    GCT 
Modifications to find and use new NCEP_xxxx.mod
models and to use new runlog-reading subroutines:
(read_runlog_header; read_runlog_data_record)
Also now convert the "hout" humidity from %RH
into a vmr to match the units in the model.

adjust_solar_linelist    2013-02-18   GCT
 Several notable improvements:
- Supports Minnaert correction, when using the solar_minnaert.108
  linelist, while still supporting the old solar_merged.108 linelist.
- Allow the exponential width to go to zero (w_min=0.0), allowing the
  doppler width to be correctly fitted on the next iteration.
- Switched from retrieving absolute line intensties to fractional line
  intensities. This means that the SDC and SDI terms must be the same sign.
- Increase frstep from 0.5 to 0.666.
- Modified the calculation of the residuals, changing
     res(kk)=(tm-tc)/(abs(rms)+0.02)
 to
     res(kk)=(tm-tc)*tc/(abs(rms)+0.005)
 The extra factor Tc de-weights saturated spectra with good RMS fits.
 Reducing the 0.02 to 0.005 increases the weight of spectra with RMS
 resiudauls < 2% and leads to faster convergence.
 There are corresponding changes to solar_pts.f

 GFIT                     Version 4.26       2013-02-18    GCT 
Previously LSPMAX was the length of the longest spectrum name in
the runlog, regardless of whether it was fitted in the current
window or not. LSPMAX was used in an adjustable format statement
to minimize white space in the .col file by not writing the full
57 characters of each spectrum name. But LSP was not written into
the format statement in the .col file header. Instead it just had
an "a" to represent the spectrum name.

In the new version two improvements are made.
1) Only the size of the fitted spectrum names are used to determine LSPMAX.
   So that unfitted spectra with long names don't create white-space.
2) LSPMAX is now written into the colfile_format character string,
   which is then written into the header of the .col file.

This required adding LSPMAX to the argumant list of spectrum_loop.f


Added LSPMAX to the call to spectrum_loop so the

 GFIT                     Version 4.25       2013-02-15    GCT 
In spectrum_loop.f, introduced a new flag: oaflag. When:
oaflag=0  the absorption coefficients currently in memory are valid
oaflag=1  the absorption coefficients currently in memory are obsolete

Previously, abscoj was called whenever the current spectrum name from
the runlog matched the name in the "Next Spectrum" line of the .mav file.
But in runlogs containing spectra with very different spectral coverages
measured on different days (e.g. Kitt Peak) only ~25% of the spectra might
encompass a fitted window. So ~75% of calls to absco were unnecessary
because on these days the spectra didn't cover the window to be fitted.

And you couldn't simply call abscof when kspflag=0 only, because if
you are fitting a window present only in pinxxx, and phgxxx is named
in the .mav file, then abscoj would then not be called for either.

This change complicates the logic, but much improves execution speed
for runlogs containing a wide assortment of spectra.

This change has no effect on MkIV or TCCON processing, since these
spectra have the exact same coverage every day.


mod_maker_9.5  08-Feb-2013  GCT
Changed the equation for converting the NCEP Specific Humidity (MMR)
into a mole fraction (VMR) from
  rmm=28.964/18.02             ; Ratio of Moleculas Masses (Dry_Air/H2O)
  ssh=ssh*rmm                  ; Convert Mass Mixing Ratio to VMR
to
  rmm=28.964/18.02             ; Ratio of Moleculas Masses (Dry_Air/H2O)
  ssh=ssh*rmm/(1-ssh*(1-rmm))  ; Convert Mass Mixing Ratio to VMR

This makes little difference. Differences of ~1% under warm humid conditions.
The old equation produced VMR = 1.607 when MMR = 1.0 which is nonsense.
The new equation produces VMR = 1.0 when MMR = 1.0

 GFIT                     Version 4.24       2013-01-22    GCT 
In do_retrieval.f, tightened up the convergence criterion by changing:
            thresh=(64*kconv-63)*abs(cont_level)*(rmsocl+0.010)/100000
to
            thresh=(64*kconv-63)*abs(cont_level)*(rmsocl+0.003)/100000

This was in response to seeing convergence in just 2 iterations
with a very good fit (rms/cl = 0.13%) but with a large VSF_error.
I think that the problem was that it passed the convergence criterion
but dx was still changing, even though it didn't affect the fit much.
Since the last dx is added to the VSF_error, this blows up the error.
This change will have no effect on poor fits (rmsocl >> 0.003).
It will increase the number of iterations on very good fits but
reduce the error bar.

 GFIT                     Version 4.24       2013-01-22    GCT 
Fixed a few more bugs in the new representation of the state vector.

 spectrum_averaging   Version 0.31    21-Jan-2013   GCT 
Got fed up with typing 
0 9999
runlog_name
2
every time I ran the spectrum averaging program.
So I modified the code such that when getargs () detects one
argument on the command line, it assumes that this is the
runlog name, that the start/end frequencies are 0 999999,
and that there are two detectors.
If this is not the case, then simply run the executable with
no command line arguments and it will prompt the user for the
runlog_name, start/end frequencies, and number of detectors,
as before.

 GFIT                     Version 4.23       2013-01-19    GCT
Fized a bug by which the Zero Offset from the runlog was not
getting through to the FM subroutine when ZO was not fitted.
This was not a problem with the old SV scheme.

GFIT                     Version 4.22       2013-01-18    GCT
 Changed code (mainly fm.f) to account for the fact that the
 new CT & CC basis functions are normalized from +1 to -1
 instead of -0.5 to +0.5 previously. This change also required
 halving the a priori uncertainties and editing write_col.f to
 double the reported values, keeping the .col files unchanged.

avg_ker   Version 1.30     2013-01-10   GCT'
 Changes to accomodate the new, flexible, state-vector format.
 Also required change to fm.f, adding additional parameter (NFP)
 to output file, rendering all old AK files incompatible with
 the new code. previously there were NTG+5 Jacobians computed
 and read (some of which may gave been zero). Now there are
 NFP Jacobians read: NTG target gases and NFP-NTG others
 representing CL, CT, FS, ZO, etc.

GFIT                     Version 4.21       2013-01-08    GCT
 Major changes to all the main subroutines to allow more
 flexibility in the structure of the state vector (SV),
 to better handle higher order fits to the continuum level.
 In the previous version, the SV structure was fixed. The
 first NTG elements were the target gas and the next 5 were
 reserved for CL, CT, CC, FS, ZO.  If CC or ZO weren't fitted,
 then these elements of CX we set to the a priori values, and
 the corresponding columns of the PD array, were set to zero.
 The matrix solution was found using the full NTG+5 elements,
 which represents a loss of efficiency.

 If we allowed for fitting windows/spectra requiring 20 continuum
 parameters, this loss of efficiency would becomes severe when
 fitting just a few, especially considering that the numerical
 solution of the matrix eqiation takes a time proportional to
 the square of the number of unknowns.
 
 So in this latest version we have eliminated the empty SV elements.
 So the SV contains only the parameters actually being fitted,
 not all the parameters that could have been fitted. This required
 the addition of a lot of if-statements and pointers to the SV elements.

 We have also moved the reading of the a priori file to gfit.f,
 instead of spectrum_loop.f, where it was re-read for every spectrum.
 This allows the SV to be completely defined in gfit.f along
 with pointers to the SV elements (ipcl, ipfs, ipzo).
 This eliminates the need for the SS(NFP)*4 character vector
 and the need for WINFO below spectrum_loop.f

 Also replaced the variable "rms" by "rmsocl" = rms/cl.
 This simplifies the code.


GFIT                     Version 4.20       2012-12-30    GCT
 Installed the subroutine compute_dlpbf.f, which computes
Discrete Legendre Polynomial Basis Functions (DLPBF).
This replaces the old code in fm.f that computed them using the
vramp function. For the case of fitting CL, CT, and CC, the
results are identical within rounding error.  The advantage
of the new code it that it is extendable to any order polynomial
without additional complexity.

 newspect    Version 1.90     2012-12-28    gct 
Added loop to correctly read runlog headers of different lengths
by using NLHEAD -- the first number in the runlog.
Previously assumed always 3 header lines.
Also reads the runlog format from the header, when present.

 PFIT   Version 4.60     26-Dec-2012    GCT 
Added loop to correctly read runlog headers of different lengths.
Assumes that the first integer in runlog file is header length.
Previously assumed always 3 header lines.

 compute_lm_absco    Version 1.07   GCT  2012-12-18
The pointer to the H2O profile in the .mav file was incorrectly
pointing to the H2O2 profile. This was fixed by adding spaces after
the gas names, changing:
      do icol=1,ncol
        if(index(header_vector(icol),'Temp').gt.0) kcol_temp=icol
        if(index(header_vector(icol),'Pres').gt.0) kcol_pres=icol
        if(index(header_vector(icol),'1h2o').gt.0) kcol_h2o=icol
        if(index(header_vector(icol),'1co2').gt.0) kcol_co2=icol
        if(index(header_vector(icol),'1ch4').gt.0) kcol_ch4=icol
        if(index(header_vector(icol), '1o2').gt.0) kcol_o2 =icol
      end do
to
      do icol=1,ncol
        if(index(header_vector(icol),'Temp ').gt.0) kcol_temp=icol
        if(index(header_vector(icol),'Pres ').gt.0) kcol_pres=icol
        if(index(header_vector(icol),'1h2o ').gt.0) kcol_h2o=icol
        if(index(header_vector(icol),'1co2 ').gt.0) kcol_co2=icol
        if(index(header_vector(icol),'1ch4 ').gt.0) kcol_ch4=icol
        if(index(header_vector(icol), '1o2 ').gt.0) kcol_o2 =icol
      end do

Since we are not doing H2O line mixing yet, this bug has little effect.
But in the future it could have been important.
Thanks to Joseph Mendonca for pointing out this bug.

CREATE_RUNLOG    Version 8.80      26-Dec-2012   GCT
  Made four new subroutines to handle I/O with runlogs.
   - read_runlog_header.f
   - write_runlog_header.f
   - read_runlog_data_record.f
   - write_runlog_data_record.f

 The first two handle the reading/writing of the four header lines
 of the runlog, which now may include the data format statement.
 The second two handle the reading/writing of the data in the body
 of the runlog.

 An important difference is that the new subroutines assume that
 the runlog data format may be written into the runlog header.
 If it is found there, it is used.

 This affects all programs that use runlogs (e.g. collate_results.f.
 texo.f, bin2asc.f convert_runlog.f rarl.f solar_ratio.f, reverse_spectrum.f,
 spectrum_averaging.f spectrum_ratioing.f, gsetup.f, texo.f, zencorr.f,
 linefinder.f, spectrum_loop.f, pfit.pro, newspect.pro)
 
 Also, changed the name of the write_runlog.f subroutine to
 write_runlog_data_record.f
 This is more descriptive and so less likely to be confused with write_runlog_header.f


GFIT                     Version 4.13       6-Dec-2012    GCT 
Removed the indices:
n1=ntg+1
n2=ntg+2
n3=ntg+3
n4=ntg+4
n5=ntg+5
from do_retrieval.f and spectrum_loop.f.

Unfortunately, these indices were being used for two different purposes:
1) To denote a slice of workspace (e.g. in SPXV; or in a loop j=n1,n5)
2) to denote a particular element of CX or section of PD pertaining to
a particular variable.
Previously the slices of workspace in SPXV used (for convenience)
the exact same indices as the CX and PD arrays, but they don't have to.
In fact, it is confusing and makes the code inflexible.

Replaced n1,n2,n3,n4,n5 with either:
   ipcl instead of n1
   ipct instead of n2
   ipcc instead of n3
   ipfs instead of n4
   ipzo instead of n5
or
   ntg+1 instead of n1
   ntg+2 instead of n2
   ntg+3 instead of n3
   ntg+4 instead of n4
   ntg+5 instead of n5
as appropriate, depending on the situation.

The new system offers more flexibility, in the sense that the order of
the SV elements of CX or PD can now be changed or new SV elements added
without disrupting the indexing of the workspace (SPXV).

Removed the duplicated code:
      n1=ntg+1
      n2=ntg+2
      n3=ntg+3
      n4=ntg+4
      n5=ntg+5
which was in several different places (spectrum_loop.f, do_retrieval.f, 
do_retrieval3.f, fm.f, fm3.f, write_col.f)
These variables are now passed down from spectrum_loop.f through the argument lists.

Also, instead of having the character vector SS containing the mnemonics
(cl,ct,cc,fs,zo) were also hardwired in fm.f, fm3.f, they are now read from
the apriori file (they were always there, but not read) and then passed down
from spectrum_loop.f.  So if these are changed (re-named or re-ordered) then
it need only be done in one place.


DIURNRET    Version 4.14.14    9-Nov-2012   GCT
Can now reads the .ray file format from the file itself (if present),
rather than rely on the format hard-wired in the code.
Got rid of the skiprec subroutine -- replacing with do-loops.
Also changed several variable names to be more descriptive
(e.g., asza() to asza_lav(); lun_ray to lunr_ray, 
runlab to spectrum_ray, etc.).

GFIT                     Version 4.12       8-Nov-2012    GCT 
Included the vector CONT(NMP) in the argument list to write_spt.f.
So write_spt no longer has to calculate the continuum basis functions,
it simply uses CONT which was previously calculated in FM.f.
No changes to the results.

GFIT                     Version 4.11      28-Oct-2012    GCT 
Fixed a bug in abscoj.f when simulating Venus spectra (T=700K)
The HITRAN2008 linelist contains NO lines like this:
NO       8 1  2788.770790 1.240E-86 30788.0822 .0460 .0630 .70  -.004 
The line strength is 1.E-86 and the E"=30788 cm-1.
Although the line intensity is about 50 orders of magnitude smaller
than we could ever see in absorption, when GFIT computs its
Boltzmann factor Exp[ -hcE"/k (1/296 - 1/T)
it gets an Inf becuase hcE"/k (1/296 - 1/T) exceeds 89.
This happens for Venus (and not Earth or Mars) because
(1/296-1/T)  is positive rather than zero or negative.

These NO lines can then pass through the if-statement
    if(abs(tnu).ge.1.e-11) then
because tnu is Inf (or NaN)

Subsequently, since sxcgsorpidw=Inf, the statement
    sqrt(abs(y*sxcgsorpidw/srpi/tnulst))))/godw)
creates a NaN. This poisons everything else, causing
the spectral to be nothing but NaNs for all frequencies.
 The fix is to define eptf = hcE"/k (1/296 - 1/T)
and then force eptf < 85

collate_results              Version 1.57    2012-10-05   GCT
Changes to make the column header titles line up better with the auxiliary data.
The .rpt files has been expanded to include the VSF_min, VSF_bar, VSF_max,
VERR_min and VERR_max.
A file collate_results.missing is now created, rather than writing
all the missing windows/spectra to the terminal.


 average_results              Version 1.21    2012-10-05   GCT
Adjusted the positions of the column labels so that they line up
better with the data below. Now "gas" lines up with the beginning
of the column value and "gas_error" lines up with the end of the
error value. This makes it easier, when browsing the file with an
editor, to deternine which column of numbers are the HF.

 GFIT                     Version 4.10.0    28-Sep-2012    GCT 
Modified the error bar calculation.
Previously, when fitting gases in high airmass spectra with
almost-blacked-out windows, I might achieve a scale factor of
0.35 +/- 0.06
whereas all the adjacent low-airmass windows would be getting
0.99 +/- 0.01
this makes the high airmass VSF a huge outlier (10-sigma).

So I divided the EX uncertainties returned by do_retrieval by the
SQRT of the mean transmittance (Tbar) over the window. For Tbar=0.1,
e.g. N2O_2443 or HF_4038 cm-1 at 87 deg SZA), this increases the
final error bar by a factor 10. So the new retrieved VSFs are
0.35 +/- 0.60, which easily prevents this point from becoming
an outlier. 

For the pa_ggg_benchmark.grl runlog, this increase the HF error 
for the second spectrum (July, high airmass) by 150%. The other
spectra are less affected because they are lower airmass or drier.


DAYAV    Version 7.7.0    23-Sep-2012   GCT
Modified DAYAV to make it functional once again.
Removed the need for the spectrum name to be present in the input file (.vav)
Accomodate the format statement in the penultimate line of the header.
Removed the T2 array, which was used to calculate the standard deviations.
This caused problems when there was only one observation to average.
Now the error bars are the standard errors, which are simpler to compute.
 Changed the fixed format statement into a dynamically-written format that
depends on the value of NAUX. Also improved the averaging code to be more
careful to avoid overflow when squaring larger error bars.

ZENCORR    Version 1.4.0     21-Sep-2012     GCT
 Fixed a bug that occurred when the runlog had records that were commented out.
In this situation, the .col files and subsequent files such as .tav and zenang.out
have no record of the commented out spectra. So when zencorr was trying to create
a new version of the runlog with the updated zenith angles, the spectra wouldn't
match up causing zenith angle mismatches. Furthermore, zencorr would terminate
as soon as EOF was detected in the zenang.out file. So each time that the retrieval
was iterated and zencorr was re-run, the runlog would get shorter.

 GFIT                     Version 4.9.4    20-Sep-2012    GCT 
Changes mainly to spectrum_loop.f to better handle erroneous OPD values in runlog.
GFIT no longer stops when an erroneous OPD value is detected (unless IMODE > 0).
Values outside the range OPDmin to OPDmax are trapped and the resn calculated
from 0.5/OPDmin or 0.5/OPDmax, whichever is nearer to the runlog OPD value.
The value of the OPD variable is no longer changed after it is read from the
runlog, which required that RESN be passed to jetspe instead of OPD.
Finally, the expression for CORRLD was altered to prevent the error bar from
ever decreasing as a result of RESN being reduced from 0.5/OPD to 0.5/OPDmax.

DIURNRET    Version 4.14.13   14-Sep-2012   GCT
Now outputs the constrained vmrs retrievals (in addition to the usual unconstrained). And it outputs a vmr-format file in which the a priori profiles have been replaced/averaged with the retrieved profiles (requiring that the a priori .vmr file be read in).


 collate_results              Version 1.5.3   2012-08-20   GCT
Added code to compute the number of different sites represented
in a runlog and report the number of observations at each site
and its lat/long/altitude.

collate_results              Version 1.5.2   2012-08-16   GCT'
Added if-statement to skip spectra that are commented out in runlog
(with a ":" or ";" in column 1). Otherwise spectra are included in
output file with a spurious ":" in column 58.
              if(col1.eq.':' .or. col1.eq.';') cycle

GFIT                     Version 4.9.2    11-Aug-2012    GCT
read_isotop.f now stops if there is a format error 
while reading the isotoplogs.dat file.
Previously there was no distinction between a format error
and an EOF. Now there is.

vexp inside vsubs.f
Used a higher order Taylor expansion for x>0 to produce
a closer approximation to Exp. Specifically, changed from
     vecout(k)=1.+x*(1.+0.5*x) 
to
     vecout(k)=1.+x*(1.+x*(1+x*(1+x/4)/3)/2)

The former expression produced a result of 2.500 for x=1.
The new expression produces 2.708 [Exp(1.0) = 2.718].
Since VEXP is used only to compute transmittances from
optical depths, the x-values are nearly always -ve,
so this approximation isn't used very much. This change
will only makes a difference in spectral regions with
large absorption coefficients and -ve absorber amounts
being retrieved. In this situation, the use of the
Taylor expansion rather and Exp reduces the risk of Infs.

Of course, the downside of this change is that the new
Taylor expansion produces Inf's for x>1.0E+10, whereas
the previous expression was good until x > 3E+19
But this is still much better than Exp, which produces
Inf's for x>88

July 30, 2012    solar_pts.f
Improved the representation of the solar rotational doppler broadening as a
function of the fraction of the solar diameter observed (frac):
-         srot=5.E-06*freq*sqrt(frac)    ! broadening due to solar rotation
to
+         aa=0.538
+         srot=3.95E-06*freq*frac/sqrt(aa+(1-aa)*frac**2.5)    ! broadening due to solar rotation

after modelling work (sds.f) indicated that the new/latter
expression is more accurate than the former expression.

The new expression produces smaller broadenings as tabulated below

   Frac    Old Expression   New Expression
               (ppm)           (ppm)
------------------------------------------
    0.0         0.00            0.00
    0.1         1.58            0.54
    0.25        2.50            1.33
    0.50        3.50            2.50
    1.0         5.00            3.95
------------------------------------------

Since the new values are smaller, this means that the tabulated doppler
widths in the solar linelist will need to be larger for the DI case.
The natural doppler widths of the solar lines add added in quadrature to
the solar rotational broadening.  For the narrower solar lines (e.g.,
CO at 4300 cm-1) the natural solar doppler widths are around 0.031 cm-1
or 7.2 ppm. So if the DI total width was previously SQRT[7.2^2 + 5.0^2],
to match the same line width, the new line width must be X where
SQRT[7.2^2 + 5.0^2] = SQRT[X^2 + 3.95^2] 
Hence X=7.82 ppm, an 8% increase.
But this is a worse-case scenario -- broader solar lines will be less affected.
And the DC Doppler widths will be completely unaffected (Frac=0.0).


So to compensate for the change in the solar model, the following change
Needs to be made to the DI solar Doppler widths

DOPP_DI_new^2 + (3.95E-06*freq)^2 = DOPP_DI_old^2 + (5.0E-6*freq)^2
DOPP_DI_new   = SQRT [ DOPP_DI_old^2 + (5.0E-6*freq)^2 - (3.95E-06*freq)^2]

DOPP_DC_new^2 + (0.0E-06*freq)^2 = DOPP_DC_old^2 + (0.0E-6*freq)^2
DOPP_DC_new   =  DOPP_DC_old

[I think that this analysis is probably naive because most of the spectra fitted
to derive the solar linelist are intermediate cases (frac=0.1 to 0.2), when the
new expression is a factor 2-3 time smaller than the old one.]

mod_maker_9.3  29-Jul-2012  GCT

I realized that the longitudes were confusing. There are three
different flavors:
- NCEP requires longitudes that range 0-360 deg
- The time equation requires longitudes that range -180 to +180
- The runlog longitudes generally conform to the latter definition,
  but there's no guarantee. 
The new version of the code therefore has three different variables
representing the three different flavors of the site longitude:

Resulting from this confusion, there was a mistake in the code that
calculates the local date from the runlog info (year,doy,zpdtim,oblon)
To fix this changed
  julian=julday(1,idoy,iyr,zpdtim)-Site_Lon_360/360
to
  julian=julday(1,idoy,iyr,zpdtim)+Site_Lon_180/360   

For a site over the US (oblon=-120) this makes no difference
because  -Site_Lon_360/360 = -0.66
and      +Site_Lon_180/360 = -0.33
so the same julian date is chosen.
For a site at 120E, however, the former gives -0.33 whereas the
latter gives +0.33, resulting in different dates.



 GFIT                     Version 4.9.2    23-Jul-2012    GCT
Changed the header line of the $GGGPATH/spt/zXXXXXXXX
files containing the spectral fits. Instead of the column amounts
and their uncertainties (2 values per gas), it now contains
the original column, VSF, and VSF_err (3 values per gas).
pfit.pro was modified to be able to correctly read the new files.
This change was made to give programs that read the spt/ files
access to the VSF value (e.g. adjust_pll_se.f).

derive_airmass_correction        1.2.0     2012-07-10     GCT
Modified the program in two ways:
1) To compute grand average values for the derived coefficients
  in addition to the daily values.
2) To process all the relevant gases in one execution, rather
 than do it gas-by-gas with the user entering the name of the gas.

The program still computes daily values for the derived coefficients,
which are still written to the file dac_runlog.vav_gas.out
But the program now additionally computes a weighted grand average,
from the individual daily values and their uncertainties. The
grand-average coefficients are written to the screen twice: in
vmr units and as fractions of the mean vmr. Previously the users
were left to derive grand average coefficient values for themselves.

A concern that motivated this change was that on days when the
distribution of observations was not symmetrical about solar noon
(e.g. cloudy mornings), the symmetrical (SDC) and anti-symmetical
components (ADC) of the diurnal variation couldn't be separated,
and that this would cause spurious results which would bias the
grand-averages.  It turns out that (luckily!) the errors assigned
to the daily values "blow up" when the SDC and ADC coefficients are
corrupted by asymmetry in the observation times (because their basis
functions are no longer orthogonal). So provided that the daily
values of the SDC and ADC coefficient are weighted by their error
bars, in the computation of the grand averages, all is well.  So
it is not necessary to explicitly filter out days with asymmetrical
sampling of observations, prior to computing a grand average.


GFIT                     Version 4.9.1    29-May-2012    GCT 
  Fixed bug in write_spt.f by which the CC option
had been correctly implemented in the "solar" part
of the code but had been overlooked in the non-solar
part of the code.  This didn't affect the results or
the residuals, but distorted the appearance of the
measured spectrum (uncorrected for CC) in the non-solar
case (e.g. when fitting solar spectra).

mod_maker9.pro         GCT  2012-06-01
The raw NCDF data are 16-bit integers (I*2). In order
to maintain adequate precision and dynamic range, gains
and offsets have been derived and removed by NCEP and
must be re-applied by the user. Unfortunately, application
of the gains and offsets doubles the memory footprint
because the data are floated from I*2 to R*4.
Previously, this was done immediately following reading
the NCDF file, which means that the gains and offsets
can then be discarded -- they are not needed again.

In the new version, the gains and offsets are applied *after*
the raw data have been interpolated. This has two advantages:
1) The large arrays containing the raw data stay as I*2
2) The gains and offsets are only applied to the data to be used,
   not the entire dataset

The disadvantage is that the vectors containing the gains and offsets
for each parameter must be passed from read_global_data.pro, through
the main program and down into the trilinear_interp.pro subroutines.
Thanks to Debra and Chris for this suggestion.

mod_maker9.pro         GCT  2012-05-07
Converted mod_maker to make it driven either:
1) from a user-specified runlog, or
2) the ncdf files listed in mod_maker.input.
So the user can either enter the name of a runlog
or hit CR and mod_maker will operate in the old way.

The main advantage of the new option (1) is that the
model files are created based on the lat, long, and dates
in the runlog. This provides much greater flexibility, for
example, for instruments that move around (e.g., MkIV) you
can create all the nescssary models from a single input file
(the runlog). Ditto for a runlog containing spectra from
different TCCON sites (e.g., an aircraft overpass runlog).
This also makes it simpler to generate models on a per
spectrum basis, if we decide to go this way in the future.

Another advantage is that you can run the new mod_maker
over multiple years of data, and it will automatically
switch from one year's NCEP data file to the next year's.

A less important advantage is that model files are created
only for the days for which spectra exist in the runlog,
whereas previously they were created for every day of the year. 
 
I've also converted the code that reads the NCDF input
data into a subroutine. So instead of having four blocks
of nearly identical code in the main program, there are
now just four subroutine calls.

Also the "Dec 31" problem is fixed/kludged in the new version,
in both operating modes. This problem occurs for observations
(local solar noon) between 18 UT on Dec 31 and 00 UT on Jan 1. 
This happens in the Western USA when measurements made at
local solar noon on Dec 31 are at ~20UT.  Theoretically, there
could also be a Jan 1 problem on an island in the Western Pacific,
12+ hours East of the Greenwich meridian, and this possibility is
covered too.

Anyway, since these NCEP data typically exist in different annual
files, it is not easy to interpolate between the last (18UT) entry
on Dec 31 2004 and the first (00UT) entry on Jan 1 2005. This would
require holding data from both years in memory simultaneously.
The not-entirely-satisfactory solution to this problem is to
extrapolate in time by inserting the two following if-statements
into the code (trilinear_interp) that does the time interpolation
  index_tt=fix(tt)
  if index_tt+1 gt nt-1 then index_tt=nt-2  ; Prevent Dec 31 problem
  if index_tt lt 0 then index_tt=0          ; Prevent Jan 1 problem
  fr_tt=tt-index_tt

I also decided to stop using the NCDF tropopause pressure
(TP) file as input. For several years, the GGG code has
calculated its own tropopause altitudes, which seems just
as good (if not better) than the values provided by NCEP.
Omitting the TP files helps simplify the subroutines that
reads the input data and do the interpolation because the
site TP is a scalar, whereas the other quantities (AT, GH,
SH) are vectors (vertical profiles). The only down-side
of this is that the write_mod subroutine uses the NCEP
tropopause pressure to compute the H2O profile above the
highest NCEP level (300 mbar). This is now done depending
the latitude:
  efflat=oblat+15*cos(2*3.14159265*(idoy-50)/365.25)
  xx=(efflat/32.5)^2
  Site_Noon_TP = 100*(95.0+175.0*xx/(1+xx)) ; Pa
This changes the water profile for p<300 mbar especially
when the tropopause pressure is far from climatology.
But the impact on ground-based H2O retrievals is minimal.

The down side of this more flexible approach is that the
memory footprint increases because you can no longer
immediately interpolate the global data to the lat/long
of the observation site, because there might be multiple
sites in the runlog.  This means that you can't re-use
the same global data array for the three data input files
(AT, GH, SH).  You have to store *all* the global data
in memory all the time. This more than doubles the total
memory usage.

If you are running mod_maker on a 32-bit computer and are
using annual, global, NCDF files as input, this will be a
problem because IDL has a 2GB memory limit on 32-bit machines.
[Since the annual, global, NCDF files total only 1.3GB, I'm
not sure why the memory limit of 2GB is exceeded.  Possibly
some inefficiency/duplication]. Anyway, on a 64-bit machine,
there is no memory problem with the new version.
 521829976  Aug  5  2010  air.2006.nc
  30708976  Aug  5  2010  pres.tropp.2006.nc
 245574588  Aug  5  2010  shum.2006.nc
 521829984  Aug  5  2010  hgt.2006.nc

There is no speed penalty with the new version. It still
has to do the same interpolation. But whereas previously
it did it in two steps (immediate bi-linear interpolation
in lat/long followed by linear interpolation in time),
it now does it all in a single tri-linear interpolation
(lat/long/time)

Although the contents of the .mod files will be virtually
identical (tropopause altitude is missing), the file names
will no longer have a two-letter site prefix identifying the
site. Instead, the lat/longitude is built into the name of
the model file, e.g., instead of pa20041222.mod we now have
NCEP_20041222_46N_090W.mod
Separating the model from a specific site will give us more
flexibility in the future and less chance of an error (e.g.,
putting an incorrect lat/long in the mod_maker.input file).
The mod_maker.input file will no longer even be necessary
since the runlog will be the driving input file.


 GSETUP                   Version 3.4.5    07-May-2012    GCT
Read_refvmrs.f was able to return to the main program without
closing LUNR (via statement 110). When this happened, then the
next call to refvmr caused an "end of file during read' error
which crashed the program. This problem was not manifested in
the GGG distribution benchmark.

gfit.f     V1.0.6    GCT  2012-04-27
Major revision in which fm2 now calls fm. It is hoped that this
will lead to easier management of the profile retrieval code,
of which fm2 is a part.

To facilitate this re-structuring, several modifications of the
argument list was needed. The vector cont(nmp) representing the
continuum is now needed in fm to store intermediate values in
the calculation of CALC and PD. To avoid defining CONT dynamically
inside FM, it now gets passed down through spectrum_loop,
do_retrieval, do_prf_retrieval, fm2.

To minimize occurences of "ntg+5", the variable nfp is
defined nfp=ntg+5 in gfit.f and is passed down to all lower
subroutines along-side NTG. This means that if we increase
the number of non-gas retrieval parameters (i.e., cl,ct,cc,fs,zo)
from 5 to 6, only one value (in gfit.f) need be changed.

The 3-D array SLPD has been reduced to 2-D to reduce memory use.
This means that it doesn't cater to multiple gases undergoing
simultaneous profile retrievals. But the supporting code never
handled this situation anyway, so why not reduce the memory
footprint until it does.

Inside fm.f, the integer pointers:
n1, n2, n3, n4, n5
are re-defined as
ipcl, ipct, ipcc, ipfs, ipzo
This should make it clearer that they are pointers and which
physical quantity they are pointing to.

compute_lm_absco     V1.0.6    GCT  2012-03-30
Updated some of the comment fields.
dimensioned some of the path character variables to xxx*(mpath)
instead of hardwired values, x*80. This required including
../ggg_int_params.f

collate_results              Version 1.5.0   2012-03-28   GCT
Changed the code to use the format statement in each .col file
rather than a version-dependent hard-wired format. This was
more difficult than it may seem because the format statement
uses "a" to read the 57-character spectrum name, even though
the length in the .col file is adjustable. To implement this
in a compiler-independent fashion required using the position
of "Nit" in the col file header line to determine the length
of the spectrum names.

Also, I noticed that there were two character variables in use
with very similar names: colabel and collabel. Changed the
former to header_string, which aso required editing
params.f and generate_qc_flag.f

At the same time, I increased the number of significant digits
in the CL field -- the format was changed from f4.1 to f5.1.

This new version of collate_results in incompatible with .col
files that predate the Feb 2012 release, which don't contain
the format statement in the .col files.


compute_lm_absco     V1.0.2    GCT  2012-02-22
  Created a new program (based on the work of Hartmann and Tran) to compute
  absorptions coefficients for CO2, O2, and CH4, with and without line mixing.
  This is done off-line before running GFIT and the results saved to file.
  The LM differences are then added to the absorption coefficients calculated
  by GFIT (abscoj.f). This also necessitated changes to abscoj.f to read in the
  binary files containing the LM coefficients.

GFIT                     Version 4.8.3     9-Jan-2012    GCT
  Added a new spectral formal option: BPW=10 to denote a two-column
  ascii file without any header.  This distinguishes it from the
  existing BPW=9 case, which denotes a two column file with a header.
  This required modifying fetch.f.

GFIT                     Version 4.8.1     1-Nov-2011    GCT
  Modified the spectrum_loop.f to allow the " so/NN " option to the command
line of the ggg file.  This allows calculation of a solar spectrum, with
absorption depths reduced by a factor NN. This is useful for sensitivity
analyses in which we might want to invoke a small residual solar spectrum,
to represent imperfect ratioing of the solar features.

 GFIT                     Version 4.8.0    28-Oct-2011    GCT 
  Writes the retrieved cc value to the .col files.
Requires corresponding change to collate results to read cc value,
and to write it (option "n") into the .nsw file.

 GFIT
Added the "cc" option (continuum curvature) to the fitting variables.
The continuum is now represented by the function
    cl.[1+ct.(i-ibar)+cc.(i-i1).(i-i2)+cf....]  i=1,N
where
N is the number of measured spectral points across the window
ibar = 0.5*(N+1) 
i1=ibar-del
i2=ibar+del
del=SQRT((N^2-1)/12)
This definition is chosen so that (for a uniform weighting across the window)
the cl, ct, and cc terms are orthogonal, in the sense that:
Sum[(i-ibar)]=0
Sum[(i-i1).(i-i2)]=0
Sum[(i-ibar).(i-i1).(i-i2)]=0

The cc option is not intended for general use. Its purpose is to evaluate
the sensitivity of results to any continuum curvature. It is therefore not
implemented in the averaging kernel calculation.

 GFIT                     Version 4.7.5    18-Sep-2011    GCT '
Removed the variables dspdz and the array dspdzxv from:
spectrum_ loop.f
do_retrieval.f
do_retrieval2.f
do_retrieval3.f
fm.f
fm2.f
fm3.f
dspdz/dspdzxv were a failed attempt at a fast approximation to the finite FOV integration.  This change makes no difference to the results.

 GSETUP                   Version 3.5.0    13-Sep-2011    GCT
Changed mod_maker8.pro so that it does not convert the NCEP geopotential 
altitudes into geometric altitudes. This was wasting memory.  Instead,
the conversion is done in read_model_fc.f.  In fact, this only affects
the tropopause altitude whose computation is the only use for the
altitudes in the .mod file.

Also, I resolved a small earth radius discrepancy in mod_maker8.pro.
In the write_mod.pro subroutine, 6378.00 was used, whereas in the main
program 6378.137 km was used.

Finally changed the parameterization of the stratospheric H2O in
mod_maker8.pro. The new equation depends on the tropopause pressure
(the old one didn't).

 GSETUP                   Version 3.4.2    24-Aug-2011    GCT
Various changes to handle the lastest ACE spectrum name convention 
which has names like:
FTS-TRANSMITTANCE-NA-NA-1205247752.082.adf
Also, since the new spectrum names don't contain the occultation number,
the default .mod and .vmr files have to be generated from the runlog name,
not the spectrum name.

changed variable la to lspn

 rarl.f   Version 3.0.2   2011 Aug 22   GCT
Added RARL (read ACE runLog) to repository. Now writes runlog files
directly to $GGGAPTH/runlogs/orb/ instead of to local directory.

All
Added two extra atmospheric constituents (cirrus6 and cirrus 15)

 GSETUP                   Version 3.4.1     5-Aug-2011    GCT
Changed gsetup.f and read_vmrs_fc.f to ignore all the gsetup stretching,
co2 replacement, etc. when a named vmr file exists for the particular day.
This involved adding a new logical variable vmr_found that is used in
gsetup.f and read_vmrs_fc.f to determine whether the file exists.

 GSETUP                   Version 3.4.0     4-Aug-2011    GCT
Patch to reenable the analysis of lab spectra through gsetup and gfit.
Used iztrop to define whether the tropopause altitude had been detected yet,
instead of ztrop_gct, which may not have a value for lab spectra (or other
planet). Changed spectrum_loop.f to use ncell to determine whether to set
spver (the vertical column) to splos (the slant column).


average_results              Version 1.1.7   2011-07-09   GCT
 Multiplied the EBIAS by SQRT(NROW) when it is written to the .cew file.
This converts the standard error into a standard deviation.

 GFIT                     Version 4.8.0    04-Apr-2011    GCT 
 Adding the line mixing capability.  line mixing absorption
 coefficient corrections are computed off line by running:
 compute_hartmann_lm_absco runlog.ggg
 This creates files in the local directory named
 spectrum(:10)_gas_freq1_freq2_lm.dat
 e.g., pa20050308_co2_04795_04905_lm.dat
 
abscoj.f now looks for such files and if found, the corrections
found therein are added to the absorption coeffs computed by GFIT.
Works only for CO2, O2 and CH4.

 apply_airmass_correction     Version 1.1.5   2011-02-28   GCT
 apply_insitu_correction      Version 1.3.3   2011-02-28   GCT
 Applied patches supplied by Vanessa to allow the corrections.dat
 file to contain uncertainty estimates on the coefficients.
 Also added  if(yrow(k).lt.ymiss)  statements to prevent the
 corrections from changing a missing value to a non-missing value.

 GFIT                     Version 4.7.2    25-Jan-2011    GCT
 The format of the write statement use to write the data into
 the .col file is now written into the header of the .col file.
 The makes it possible (in the future) for the programs that
 read the .col files don't need to know the format ahead of
 opening the file. This will eliminate statements such as the
 following in collate_results.f:
          if (index(gfit_version,'2.40.2') .ne. 0) then !  old col file format
               csformat='(1x,a21,i2,1x,f5.3,3(1x,f4.1),1x,f5.3,'
     &         //'1x,f6.4,f7.3,1x,9(0pf7.3,1pe10.3,0pf9.4,1pe8.1))'
           else                                  ! assume new col file format
               write(csformat,'(a,i2.2,a)')'(1x,a',l4-5,
     &     ',i3,f6.3,3f5.1,f6.3,f7.4,f8.3,15(f7.3,e11.4,f9.4,e8.1))'
           endif

The .col file data format is now specified in gfit.f and is passed through
spectrumloop.f and into write_col.f.


' GSETUP                   Version 3.3.0    14-Jan-2011    GCT '
Some tweaks to the a priori vmr profiles to better match in situ observations
in the southern hemisphere.

In setvmr.f, added the following code:
c Limit tropospheric CO vmr to ~50 ppb in Southern hemisphere
c to 90 ppb in the tropics, and to 130 ppb in the northern hemisphere.
      co_vmr_max = 1.0E-09*(90 + 40*oblat/sqrt(200.0+oblat**2))
      do ilev=1,nlev
         if(z(ilev) .ge. ztrop) exit
         if(vmr(5,ilev).gt.co_vmr_max) vmr(5,ilev)=co_vmr_max
      end do
This change won't have any effect northward of 25.56N since the current
gnd_summer.vmr has a maximum CO vmr of 125 ppb


 GFIT                     Version 4.7.1    26-Dec-2010    GCT
 Changed the name of read_mav.f to read_mavfile_body.f
 Removed the argument MLEV which wasn't being used for anything
 except dimensioning arrays, for which purpose NLEV works fine.

 Changed the read_mavfile_body.f file so that it does a free-format read,
 rather than a formatted read. This provides more flexibility in
 the format of the mav file.

 Also, moved read_mavfile_body.f from ggg/src/gfit to ggg/src/comn,
 Modified ~/ggg/src/gfit/Makefile accordingly.


 write_aux              version 0.0.3   2010-12-26   DW
 Renamed 
  ~/ggg/src/write_aux/write_mav.f
to
  ~/ggg/src/write_aux/write_mav_aux.f
 since we don't want separate/different subroutines with the same name.
 Modified ~/ggg/src/write_aux/Makefile accordingly.


 CREATE_RUNLOG    Version 8.7.0    24-Dec-2010   GCT
  Three separate problems were encountered when trying to run
create_runlog on some old (pre-2001) Spitsbergen spectra.

1) The format of DAT in the OPUS header was shorter than
  ever previously encountered. This was fixed by editing
  read_opus_header.f, replacing
             if(rs.ge.6) then
                 ms=0
                 read(cval,'(i2,1x,i2,1x,i2)')hh,mm,ss
by
             elseif(rs.ge.5) then
                 ms=0
                 read(cval,'(i2,1x,i2,1x,i2)')hh,mm,ss
             else
                 write(*,*) cval
                 stop 'Unrecognised time format'
             endif

2) The number of interferogram points (NIP) was missing from some
  of the spectrum headers. So create_runlog used the equation
         nip=2*0.9*(hfl-lfl)*(1/res+1/phr)
  but this equation is wrong in the event that the igrams are
  recorded with a non-unity DFR (Digital Filter Reduction),
  a combination of circumstances (NIP=0; DFR>1) that I had
  never previously encounted.  The correct equation is:
         nip=2*0.9*(hfl-lfl)*(1/res+1/phr)/dfr
  So this was a bug that hadn't previously been exposed.
  I also modified the subroutine read_opus_header.f so that
  the default value of DFR is now 1 (not zero) so that when
  DFR is missing from the header, create_runlog doesn't crash.

3) There were spectra with GFW=0 and GBW=0. So create_runlog
  couldn't tell whether these were FWD or REV scans, so it
  estimated the ZPD time to be in the middle of the scan,
  which is wrong.  So I added code that uses the ZPD locations
  to determine the scan direction:
        if(gfw.eq.0 .and. gbw.eq.0) then
          if(pkl.gt.prl) gfw=1
          if(pkl.le.prl) gbw=1
        endif


 GFIT                     Version 4.7.0    06-Dec-2010    GCT 
 In spectrum_loop.f, replaced
        if(resn.gt.resmax) then
           write(*,*) 'Warning: increase parameter resmax: ',runlab
           cycle
        endif
 by
        if(resn.gt.resmax) then
           write(*,*) 'Warning: increase parameter resmax: ',runlab
           resn=resmax
        endif

So instead of skipping spectra for which resn exceeds resmax, resn is set to
resmax and it ploughs through, even though the spectrum is probably garbage.
Otherwise, the InGaAs and Si .col files might end up with different numbers
of spectra in the event that a pair of interferograms is nothing but noise
and the ZPD location is therefore random, resulting in a resolution that
exceeds resmax for one detector but not the other.


derive_airmass_correction        1.1.3     2010-11-23     GCT
derive_insitu_correction         1.1.3     2010-11-23     GCT
  Replaced unformatted write statements of strings with formatted ones.
  because the ifort compiler was breaking the strings after 72 characters,
  creating two lines, causing the wrong number of header lines in
  the output files.  For example:
     write(lunw,*)'   year     doy  nmp     uscale      ybar    '//
     &' ybar_error    asdc     asdc_error    sdc    sdc_error'
  was replaced by
     write(lunw,'(a)')'   year     doy  nmp     uscale      ybar    '//
     &' ybar_error    asdc     asdc_error    sdc    sdc_error'


 write_official_output_file   Version 1.3.2   2010-11-12   GCT'`
Changed
      ncol_written=1   ! Always include "flag" in column #1
to
      ncol_written=1+wsp_flag   ! Always include "flag" in column #1
in order to get the right number of columns written into the header of .oof file
in the case when the spectrum name is written.

 GSETUP                   Version 3.1.0    05-Nov-2010    GCT 
Added code to allow the post_processing.sh to do both the "v" and
"t" options when it runs collate_results and average_results.
Added code so that post_processing.sh will run the new write_eof
and the write_aux programs.
Removed the OG variable.


 write_official_output_file   Version 1.3.1   2010-11-03   GCT'
Increased the size of the character strings outfmt0*400,outfmt1*400
from 250 to 400.

Also, changed the statement:
         headoutcsv=' flag  spectrum'
to
         headoutcsv=' flag,spectrum'


Changed the if-statement:
         if(pindex(icol).eq.0) 
           write(*,*) ' Parameter missing from QC file: '//headarr(icol)

to
         if(pindex(icol).eq.0) then
           if(index(headarr(icol),'Spectrum').eq.0) then
           write(*,*) ' Parameter missing from QC file: '//headarr(icol)
         endif
         endif
in order to suppress the warning messages that "Spectrum" was not present in
the pa_qc.dat file, which have arisen because I now write the spectrum names
to the output files as default.

master.sh
There was previously a problem whereby if no .vsw or .vav files were produced,
then the diff command failed and nothing was written to the differences.out file.
This could easily give the false impression that the installation of the ggg
code had gone smoothly, when in fact it had completely failed.
So the following 4 lines 
diff current_results/pa_h2o.mav original_results/pa_h2o.mav > differences.out
diff current_results/pa_h2o.ray original_results/pa_h2o.ray >> differences.out
diff current_results/pa_h2o.vav original_results/pa_h2o.vav >> differences.out
diff current_results/pa_h2o.vsw original_results/pa_h2o.vsw >> differences.out
were changed to
diff --brief --new-file current_results/pa_ggg_benchmark.mav benchmark_results/pa_ggg_benchmark.mav > differences.out
diff --brief --new-file current_results/pa_ggg_benchmark.ray benchmark_results/pa_ggg_benchmark.ray >> differences.out
diff --brief --new-file current_results/pa_ggg_benchmark.vav benchmark_results/pa_ggg_benchmark.vav >> differences.out
diff --brief --new-file current_results/pa_ggg_benchmark.vsw benchmark_results/pa_ggg_benchmark.vsw >> differences.out

In particular, the --new-file option forces an empty or missing file to trigger
an entry in the differences.out, whereas without this option nothing is written.


GFIT                     Version 4.6.8    11-Oct-2010    GCT 
Replaced the r1mach function in hfti.f with a new implementation that
I found on the web. Not sure why the old version had hard-wired values.
Perhaps something that I kludged to avoid a compilation/execution problem.
On nicolet (Linux, AMD), the new function produces identical values to
those hard-wired in the old function.

Also added tiny to dx(jfp) in line 248 of do_retrieval.f
           xfr=abs(dxlimit/(tiny+abs(dx(jfp))))
Otherwise it can produce Inf's when dx is zero, although these don't affect
the result in any way since this statement is in a loop trying to find the
*smallest* value of dxlimit/dx.

GFIT                     Version 4.6.7    26-Sep-2010    GCT 
Previously, in the data_part.lst file, "~" would be expanded as the $HOME
environmental variable (e.g. /home/toon/). So "~/ggg/spectra/"
would be expanded to e.g.  /home/toon/ggg/spectra/
But a problem arises when people define their GGGPATH to be something
different from $(HOME)/ggg/

The solution was to use the string "$(GGGPATH)" in the data_part.lst
file. gindfile.f will now explicitly expand this string into the GGGAPTH.

GFIT                     Version 4.6.6    25-Sep-2010    GCT 
 Encountered some problems with the GGG code on the Mac.
 In particular, the MD5SUM works differently and so a new file
 (ggg_md5sum) was developed (thanks to Debra and Chris Lee) to
 make the differences between the Mac (Darwin) and Linux environments
 transparent to the GGG code.

 GSETUP                   Version 2.8.3    10-Sep-2010    GCT 
  Increased the length of the str_isotopolog string in gsetup.f from 200 to 294.
  Otherwise, it can't handle the PAN which has 27 fundamental frequencies.

 GFIT                     Version 4.7.0    31-Aug-2010    GCT
Noticed problems with the sub-Lorentzian CO2 lineshape in the 2400 cm-1 region.
Originally GFIT ignored the sub-Lorentzian line wings which resulted in a huge
overestimate of the "continuum" absorption around 2400 cm-1. This caused two
problems:
 1) the retrieved continuum level for windows in the 2400 cm-1 region would
   attain very large values at high airmasses to compensate for the overly-small 
  transmittances.
 2) The discete CO2 lines in the 2400 cm-1 region would be fitted very badly
   because the CO2 retrieval would be so strongly influenced by the CO2 continuum,
   which was incorrectly parameterized. This problem became severe at high airmasses.

 So in Aug 2000 I included a statement
       if(kgas.eq.2) flinwid=dmin1(flinwid,21950.d0) ! Sub-Lorentzian CO2
which truncated the CO2 line wings at 21950 doppler widths (about 50 cm-1)
from line center, irrespective of how strong the absorption wing still was
at this point.  Although this produced much better absolute absorption
coefficients and hence transmittances, it caused discontinuities in the
CO2 wing absorption, which degraded the spectral fits in this region.

 So what was needed was a more gradual roll-off of the far wing absorption,
which was achieved by replacing the statement in gct_humlik.f
          K(I) = YRRTPI / (YQ + XQ)
by
          xfudge=(xx/sublor)**2
          K(I) = YRRTPI / (YQ + XQ*(1+xfudge))

where sublor is defined in abscoi.f as 10.5/doppewhm for CO2.  This change
appears in two places in the the humlick subroutine where the far wing
absorption is approximated by a Lorentzian.

This change also requires that the parameter sublor be passed from abscoi.f
to the humlik subroutine. This is needed because we've chose to represent
the far wing roll-off in terms of wavenumbers from line center rather than
doppler widths. Due to the additional argument, the name of the humlik
subroutine was changed to gct2_humlik.f


 GFIT     Version 4.6.5    03-Aug-2010    GCT
added some code stubs to spectrum_loop.f to facilitate profile retrieval.
   if(index(winfo,' prof_ret_only ').gt.0) ifm=4  ! Profile Retrieval only
   if(index(winfo,' prof_ret+scale ').gt.0) ifm=5  ! Profile Retrieval

All,
Defined a new gas:  f141b (CH3CCl2F)
Developed a new pseudo linelist covering 700-1500 cm-1.

 GFIT                     Version 4.6.4    27-Jul-2010    GCT 
Changed the expression for in abscoi.f from
      dopphwem=4.3e-7*sngl(freq)*sqrt(t(i)/molewt(ispeci))
to
      dopphwem=4.3014e-7*sngl(freq)*sqrt(t(i)/molewt(ispeci))

Yes, this makes only a 1 part in 3000 change to the doppler width,
which itself is only a small contribution to the total line width.
But Fabiano kept referring to this as a "mistake" in abscoi.f
This should allow a closer comparison of the MkIV absorption
coefficients with those computed with other algorithms.

GFIT                     Version 4.6.3    11-Jul-2010    GCT 
 There was a problem with the channel fringe fitting when used
 on stratospheric spectra with ringing due to the narrow O3
 lines not being adequately resolved.  If the calculated
 spectrum didn't perfectly match the ringing, the channel
 fringes would try to help by adding some sine waves with
 frequencies ~95% of Nyquist (the 31.75 cm OPD is ~95% of
 the power-of-2 FFT size).  For some reason, this would make
 things worse, with the result that the final fit would have
 a very high-frequency sine wave in the residuals.

Fixed this by limiting the search for the frequency peak
(in fringes.f) to 66.6% of Nyquist.


Various
We got a new COFCl linelist from Agnes Perring which distinguishes
the two CL isotpoologs:  C-O-F-35Cl  and C-O-F-37Cl.
Previously everything was lumped together as COFCl.
This increased the total number of isotoplogs in isotopologs.dat
from 142 to 143, which required that some of the parameter
statements to be changed accordingly.
At the same time, I changed the name of this gas from
CFClO to COFCl, to conform to previous usage. This required
all the vmr files be edited to be consistent.

 spectrum_averaging   Version 0.1.2   17-Jul-2010   GCT '
Switching from the G77 to the GFORTRAN compiler revealed a problem:
Code that ran flawlessly under G77 would crash under GFORTRAN. The
problem lay in the different way the compilers handle the statement
            read(lun_rlg,'(a)',end=99) string
In G77 you can hit the EOF as many times as you like, and control
will always go to statement 99. But GFORTRAN allows you to hit EOF
only once. If you try again it crashes, complaining that you tried
to read beyond the EOF marker.
This is a problem for spectrum_averaging.f because it first reads
the runlog in mode=1 (averaging) and then again in mode=2 (RMSing).
When it hits EOF in mode=1, it then attempts to read again in mode=2,
which causes a crash under GFORTRAN.
I fixed this by adding the statement
         if(jtype.eq.1 .and. istat.ge.1) exit  ! hit EOF
after the mode=1 call to subroutine rravgcom.


GFIT                     Version 4.6.3    11-Jul-2010    GCT 
  Discovered yet another bug resulting from the incorrect handling
of the two-cell case. In spectrum loop.f, the following code
computed the dspdz array.
        dsplo=(splos(3)-splos(2))/(z(3)-z(2))
        do j=3,nlev-2
           dsphi=(splos(j+1)-splos(j))/(z(j+1)-z(j))
           dspdz(j)=0.5*zfov*(dsplo+dsphi)/2
           dsplo=dsphi
        end do
        dspdz(2)=0.0
        dspdz(nlev-1)=0.0
        dspdz(nlev)=0.0
But this code assumes that splos(2) is an atmospheric slant path,
and is used in the computation of dspdz, which is used to model
the finite FOV effect.
The new code below handles this situation correctly
        dsplo=(splos(ncell+2)-splos(ncell+1))/(z(ncell+2)-z(ncell+1))
        do j=ncell+2,nlev-2
           dsphi=(splos(j+1)-splos(j))/(z(j+1)-z(j))
           dspdz(j)=0.5*zfov*(dsplo+dsphi)/2
           dsplo=dsphi
        end do
        do j=1,ncell+1
           dspdz(j)=0.0
        end do
        dspdz(nlev-1)=0.0
        dspdz(nlev)=0.0


GFIT                     Version 4.6.2    30-Jun-2010    GCT 
  Previously, GFIT computed the initial continuum level, cx(ntg+1),
as the average of the first and last observed points. The problem
with this is that if these two points happen to fall in saturated
regions, the continuum level is set to zero, from which the retrieval
has difficulty recovering.
  If the CL is initially set to 1.0, this works great for transmittance
spectra. But some spectra (e.g. Kitt Peak) have typical spectral values
of several million.  This causes large reductions in the gas VSFs on
the first iteration, often to -ve values, in an effort to increase the
calculated transmittance. The retrieval is slow to recover from this
poor start.
  So I adopted a new scheme: At the beginning of the first iteration,
the CL is set to the average measured spectral value, divided by the
average calculated transmittance. The PD's are then adjusted to
represent the new CL value, and the retrieval continues as normal.
The PD adjustment is very easy because they are all linear in CL.
  Essentially, this change means that *all* the measured spectral
values are used to calculate the initial continuum level, not just
the first & last. And the calculation also comes into play.
  This change shouldn't affect the retrieved columns in retrievals.
that successfully converged.  But it might affect the number of
iterations and the results of non-converged retrievals, depending
on the spectral values of the measured spectra.


GFIT                     Version 4.6.1    24-Jun-2010    GCT 
  Fixed a bug in compute_vertical_paths.f by which observation
with a pressure altitude below sea-level had NaN's for the
vertical column and the airmass.

This problem had actually been fixed in Mar 2006, but was
inadvertantly restored when I increased the number of cells from 1 to 2.

To fix this I changed:
      do klev=3,nlev
         if(z(klev).gt.zmin) go to 777
      end do
to
      do klev=ncell+2,nlev
         if(z(klev).gt.zmin) go to 777
      end do

This fix required passing ncell into the compute_vertical_paths
subroutine.  This way, if ncell is changed in the future, the bug
won't re-appear.


collate_results              Version 1.3.0   2010-06-24   GCT
  Modified main program to better handle Justus Notholt's
cruise spectra, which have two problems:
 - they don't adhere to the TCCON spectrum naming convention
 - they were acquired using the NDSC filters and so only 1/4
   spectra have any column information.


 GFIT                     Version 4.6.0    20-Jun-2010    GCT 
Made resmax a fixed value (0.5 cm-1) inside spectrum_loop.f,
and not dependent on the spectral resolution of the spectra.
This way, the spectral region over which the absorption
coefficients are pre-computed is predictable without
looking at the runlog. 
If a spectrum is found with resn > resmax, it is skipped.
The downside ofthis is that VACs are pre-computed for a
wider region than might be necessary, if all the spectra
to be fitted have resn << resmax.  This will slow down
the pre-computation of VACs, especially for narrow windows.


 GSETUP                   Version 2.8.2    07-Apr-2010    GCT 
The file isotopologs.dat is now copied from ggg/isotopologs/
to the local directory. GFIT subsequently uses the local 
version of this file. The advantage of this is that the
local version of isotopologs_local.dat always remains
consistent with the .mav file. So this will avoid problems
wherby you successfully run gsetup and gfit in a particular
working directory, and then return to this project a couple
of weeks/months later after having defined a new gas in the
main isotopologs.dat file.  Previously this would have caused
a mismatch error.


 GSETUP                   Version 2.8.1    07-Apr-2010    GCT 
  A couple of changes to re-establish the Mars capability:
 1) In readmodFC.f, if the radius in the .mod file isn't close to 6378 km,
  then don't bother to compute the ztrop_gct, set it to zero instead.
 2) In setvmr.f, don't call the simulate_co2_vmr subroutine if the
  ztrop_gct is zero (mars).  Otherwise the Mars CO2 vmrs of 0.95 in the
  .vmr file are replaced by the earth vmrs of 390 ppm.[Need a better
  way of handling this...]

 GFIT                     Version 4.5.2    16-Mar-2010    GCT
  Fixed a bug in jetspe.f that caused an incorrect frequency
  shift when fitting a spectrum with interpolation.  This only
  occurred when the first point in the window is interpolated.
  The problem was fixed by including a non-zero offset (sh) in
  the call to newdec.

 GSETUP                   Version 2.8.0    07-Mar-2010    GCT 
  Modified readmodFC.f to compute the tropopause altitude from
  the T/P profiles that are read in. This replaces the NCEP
  tropopause altitude, which doesn't correlate quite as well
  with HF. Both tropopause altitudes are now returned to the
  main program, where they are written to the .mav file.
  Changed the .mav files to include the tropopause altitude
  (both the NCEP and the GGG values) for each day as an
  additional header line. Only the latter value was used.

 GFIT                     Version 4.5.1    25-Feb-2010    GCT
     Merged the disk-center and disk-integrated solar linelists into
  a single file (solar_merged.108). For each solar line, there are
  two strengths, two lorentz widths, and two doppler widths. The
  first representing disk-center and the second disk-integrated.
  The advantage of having both parameters in the same file is that
  it becomes trivial to fit solar features which are intermediate
  cases:  neither disk center nor disk integrated. The main
  advantage of this is that it allows *all* the reference solar
  spectra (KP, ATMOS, MkIV) to be placed in one runlog and
  analyzed in accordance with their FOVO, rather than segregating
  them into disk-center and disk-integrated runlogs.
     A new solar spectrum subroutine (solar_pts.f) was written to
  handle the new merged linelist and to exploit the possibility
  of computing intermediate solar spectra, in accordance with the
  frac parameter (=FOVO/0.0092). Note that GFIT will still handle
  the older style solar_dc.101 and solar_di.101 linelists. Depending
  in the record length of the linelist, GFIT will either call the
  old solar_psuedo_trans_spec.f or the new solar_pts sunroutine.
     Added "frac" (fraction of the solar disk diameter observed) to
  the parameters written to the header (line 2) of the spt files.
  This is needed by the new version of adjust_solar_linelist.f in
  order to know how much of the residual to attribute to the DC
  versus the DI line parameters. Also had to add an a priori constraint
  to adjust_solar_linelist.f to handle situations where the solar
  line was easily observable in a DI MkIV balloon spectrum, but was
  blacked out in a KP DI spectrum.  Without the constraint, the DI
  line parameters wouldn't change, whereas we know that there are
  statistical relationships between the DC and DI line parameters.
  Had to also change PFIT to read the new format SPT files.

 GFIT                     Version 4.5.0    21-Dec-2009    GCT
  Fixed a bug in spectrum_loop.f that was causing the wrong a priori
  continuum tilt in fits to (laboratory) spectra when no gases were
  being retrieved, as is the case when pseudolines are being derived
  from laboratory spectra. The problem was that the previously read
  a priori values for the continuum level and tilt (apx(n1) & apx(n2))
  were being overwritten by the a priori values for the first target gas
  and the other target gases. By coincidence, the a priori for the first
  target gas and the other target gases (1.0) is identical to the a priori
  for the continuum level, so fortuitously this bug had no effect on the
  continuum level. But it was changing the a priori continuum tilt from
  zero to 1.0, in the case when ntg=0, which is why I noticed it.
  The fix involved changing:
      read(lun_apx,*) apx(1),apu(1)
      read(lun_apx,*) apx(2),apu(2)
to
      if(ntg.ge.1) read(lun_apx,*) apx(1),apu(1)
      if(ntg.ge.2) read(lun_apx,*) apx(2),apu(2)


 GFIT                     Version 4.4.12   12-Dec-2009    GCT
  Commented out the statement inside abscoi.f that implements
  the sub-Lorentzian lineshape for CO2.

GSETUP                   Version 2.7.14   13-Nov-2009    GCT
  Modified the setvmr code so that all the calculations were
  done with altitude as the vertical ordinate, rather than pressure.
  The reason for doing this is that I decided to vertically shift
  the vmr profiles in the .vmr file by an amount equal to the difference
  of the tropopause altitude between the .vmr and the daily .mod files.
  This causes each day to have a different a priori vmr profile, 
  depending on the tropopause altitude in the .mod file for that day.
  This makes a big difference to the HF OVC's.

  Modified the read_modFC.f subroutine to calculate the tropopause
  altitudes internally, rather than rely on the one supplied by NCEP.
  In general they are very similar, but there are a few instances
  (e.g. tm20091019.mod) where the NCEP tropopause altitude is
  surprisingly low, which was causing a large overestimate of OVC_HF
  and poor fits to the HF line shape.  The new tropopause altitude
  algorithm reduces the variation in VSF_HF but not by much. But at
  least we are now more self-contained, we don't really need the
  NCEP tropopause altitudes any more.

gnd_summer_20091125.vmr
  Modified the HF, N2O, CH4, and CO profiles to better represent
  summer-time MkIV balloon and ACE profiles from 30-40N.
  Added a keyword ZTROP: to the .vmr file. This represents
  the effective tropopause altitude (14.5 km), which is used by
  the latest readvmrFC subroutine to vertically shift the profiles.

gnd_summer_20091116.vmr
  Increased the OCS profile by 16% to bring the tropospheric vmr
  from 431 ppt to to 500 ppt. This is more realistic.

  Coincidentally, the nu3 OCS line strengths were also increased
  by 16% in the latest HITRAN uopdate. So the depth of unfitted
  nu3 OCS lines will now be 33% larger than before.

mod_maker6  16-Nov-2009  GCT
  The conversion from geopotential to geometric altitudes
  was being done incorrectly. Also, I was using inconsistent
  values for the earth radius between mod_maker6 and readmodFC.f

  So I changed the statement:
     Earth_Radius=6356.772*1000.0
     Global_Data = Global_Data /(1+Global_Data/Earth_Radius)
  to
     Earth_Radius=6378.137*1000.0
     Global_Data = Global_Data /(1-Global_Data/Earth_Radius)

  Thanks to Markus Rettinger for pointing out these mistakes.

GFIT                Version 4.4.10  11-Oct-2009    GCT '
  Abandoned the do_retrieval2.fand fm2.f  subroutines. These were
  intended to allow a fast, approximate FOV integration (for ACE),
  but it turned out to use a lot of memory (array slpd) and not be
  accurate enough.

apply_airmass_correction     Version 1.1.2   2009-11-07   GCT
apply_insitu_correction      Version 1.2.2   2009-11-07   GCT
  These programs now write the appropriate correction coefficients
  from the corrections.dat file into the output file headers.
  This is done separately by each program, even though the
  coefficients all come from the same file.  The writing of the
  correction coefficients into the header is done at the time
  when they are used, avoidindg problems if corrections.dat file is
  changed between the times that the airmass_ and insitu_correction
  programs are executed.

collate_results              Version 1.2.1   2009-11-07   GCT
  I converted the missing data value (9.9999E+29) from a vector
  to a scalar. So now, you have to use the same value for every
  column.  So we're lost the *flexibility* of having different
  missing values for different data columns, a feature that was
  never exploited, to the best of my knowledge.

GSETUP  Version 2.7.13   03-Oct-2009    GCT 
  Had to modify the code to allow MkIV spectra with names like
  phg89289.NNN to pick up the right model file (i.e. tm20091016.mod)
  This required calling the julian and the caldat subroutines which
  therefore had to be added to the Makefile.

mod_maker6.1  03-Oct-2009  GCT
  Re-organized the if-statements that check that the .nc files
  downloaded from the NCEP/NCAR website contain sufficient levels.
  The error messages are now more specific in stating which NCEP
  file contains insufficient levels.

  Also, I was noticing from fits to ground-based MkIV spectra
  acquired during MOHAVE2009 that there was often too much H2O
  in the 10-14 km altitude range. So I modified the code that
  extrapolates the H2O vmr profiles above the highest NCEP
  level (300 mbar):
  1) I made H2O decrease faster above 300 mbar level by using a
      P(k)/P(k-1)**(5.5-P[k]/100) exponent instead of
      P(k)/P(k-1)**2.5
     This has the effect of making the extrapolated H2O decrease
     faster and faster with increasing altitude
  2) If the H2O partial pressure (vmr * pressure) exceeds the
     saturation vapor pressure over ice, it is set to the SVP
     Note that any super-saturation in the low-altitude levels
     (300-1000 mbar) covered by the NCEP H2O, is left unmodified.
  3) If the current pressure level is in the stratosphere 
     (i.e. P < Tropopause Pressure) then use the stratospheric vmr
  
  Also changed the functional of the stratospheric H2O from
       strat_h2o=9.7e-06-2.5E-06*alog10(10.0+Lev_AT[k])
     to
       strat_h2o=7.5E-06*exp(-0.25*zz^2)+0.5E-09*exp(+4.0*zz)
  

gnd_summer_20091014.vmr
  Fixed a glitch in the HF a priori profile. The vmr at 13 km altitude
  said 1.0E-12 but it should have been 1.0E-11. This won't make much
  difference to the HF retrieval because the HF is still relatively small,
  but at least it now increases monotonically with altitude. Thanks to
  Debra for pointing out this bug.

GFIT   Version 4.4.9   11-Oct-2009    GCT '
  HITRAN 2008 now contains a 4'th isotopolog of CH4, the
  doubly-substituted 13CH3D, aka 312.

  Notwithstanding the fact that the abundance of this isotopolog
  is down by 2 orders of magnitude from CH3D and 5 orders of magnitude
  from the parent, I have to modify the isotopolog.dat file in order
  to be able to use HITRAN2008. Otherwise the 312 lines will be
  attributed to the 0'th isotopolog of the next gas (O2 CIA).

  This is a nuisanse because it means that all pre-existing .mav files
  will be rendered non-functional by this change. And we're never going
  to see any of the new 312 lines, except in isotopically enriched lab
  spectra.
 
abscoi.f    2009-10-10   GCT
  Fabiano found a bug in my implementation of CO2-broadening. The line
       if(kgas.ne.2) pbhw=pbhw+0.15*abhw*vmr(2,i)
  should be
       if(kgas.ne.2) pbhw=pbhw+0.15*abhw*vmr(specindex(2)+1,i)
  because the first index of the VMR array is the specie, not the gas.
  This is only important for Venus and Mars and therefore shouldn't
  make any difference for Earth spectra.

  Also, moved the statements:
        if(abhw.le.0.0) abhw=0.1
        if(sbhw.le.0.0) sbhw=abhw
  out of the loop over levels to earlier in the code. This avoids
  needless re-evaluation of these statements inside the loop.

write_official_output_file   Version 1.2.1   2009-10-07   GCT
  Added two additional lines to the xx_qc.dat files that allow the user
  the option of:
 1) writing or not writing data records with a non-zero error flag.
 2) writing or not writing the spectrum names (assuming that it is
   present in the .aia file).
  This makes the program more flexible.

  Also updated the other post-processing programs (collate_results,
  average results, apply_airmass_correction, apply_insitu_correction)
  to handle the 38 character spectrum names.

GFIT   Version 4.4.8   03-Oct-2009    GCT
  Increased the maximum number of target gases from 12 to 16
  and setting mtg=16 in gfit.f, spectrum_loop.f, and do_retrievalN.f
  Also had to make mode to write_spt.f to allow longer strings
  and more columns to be written to the .spt file.

  Also increased the length ofthe character string 'winfo' in
  gfit.f from 128 to 160 to allow for the longer list of target gases.

  Had to modify pfit.pro to accommodate the larger number of columns
  in the .spt files.
 
STRIP
  The output files now retain the full field width of the input file,
  rather than truncating to 101 CPL as proviously. This makes the
  .NNN extension to the output filenames consistent with their content.

VLL    Version 2.1.0    O2-Oct-2009    GCT 
  Changed program to accommodate the HITRAN08.162 linelist.
  Also, produces output including full comment/quantum string
  rather than truncating to 100 characters.

GFIT   Version 4.4.7   01-Oct-2009    GCT
  HITRAN 2008 contains 42 gases now, versus 39 in HITRAN 2004.
  This requires a change to hitran_to_atmos_gas_numbering.f
  to accommodate the 3 new gases :
     & 44,   !  40      CH3Br
     & 59,   !  41      CH3CN
     & 31/   !  42      CF4

GSETUP  Version 2.7.11   26-Sep-2009    GCT 
  Added back the statement
  znew=1.0E+38
  to the subroutine readvmrFC.f
  Thanks to Vanessa for pointing out that it had gone AWOL.


avg_ker   Version 1.2.0    2009-08-31   GCT
  Added the ZO (zero offset) option to the calculation of the kernels.
  This option required corresponding changes to the GFIT code (fm.f),
  and so is not backward-compatible.

 GFIT   Version 4.4.5   11-Aug-2009    GCT '
In abscoi.f, changed
      nuoff=10.D0*dsqrt(2+dble(grid)*ncp*dble(p(2)))
to
      nuoff=10.D0*dsqrt(2+dble(grid)*ncp*dble(vmax(p,1,nlev)))
This makes the subroutine more general, e.g. if there is only
one level for which absorption coefficients need be calculated,
or if p(2) isn't the level with the highest pressure.

 GFIT   Version 4.4.4   29-Jul-2009    GCT '
Changed write_col.f to include LRMAX in the argument list.
This is the length of the longest spectrum name found in the
runlog. This parameter is then used to format of the write
statement in the .col file to minimize white-space while still
keeping the columns lined up.
Previously, write_col used the actual length of each spectrum
name, which resulted in a difficult-to-read .col file when the
spectral names were of unequal length.
Also used LRMAX in the formatting of the column labels.

 WRITE_OFFICIAL_OUTPUT_FILE  Version 1.1.2  20090701  GCT
 We decided to put SIA back into the runlog, and hence back into
the xx_qc.dat file.  This was laborious because each row of the
file is labelled by an integer at the beginning. So when you insert
or delete a row from the xx_qc.dat file, all the subsequent rows
have to be renumbered.

So I decided to remove the two-digit integer from the beginning of each row.
Computers are good at counting and can figure out which row it is without
being told. This makes it easy to add/delete parameters.


 CREATE_RUNLOG    Version 8.6.1    25-Jun-2009   GCT
I now determine the number of column labels by calling the
substr subroutine, rather than hard-wiring the value in
the write statement of the runlog output file.

A similar change should be made to create_sunrun_from_xxxx


All                 2009-06-25    GCT
  Made several changes to the runlog format:
  1) Re-instated SIA (due to popular demand)
  2) Increased the lengths of SIA and FVSI from 6 to 7 (Vanessa Sherlock)
  3) Increased POSSP from I8 to I9 (Nick Deutscher)
  4) Increased IFIRST & ILAST from I8 to I9 (GCT)
  5) Increased SPECNAME from 35 to 38 characters (David Griffith)

The first two of these changes will require corresponding changes to the sunrun format.

This required modifying many programs and subroutines including:
   create_sunrun_from_xxx
   write_sunrun
   read_sunrun
   read_opus_header
   create_runlog
   gsetup
   read_runlog
   write_runlog
   collate_results

This also increased NAUXCOL, the number of auxiliary variables in the .vsw and .vav files from 22 to 23.


         2009-05-04    GCT
  Changed the name of the LUN variable from LUNV to LUN_SPT
to make it more descriptive and consistent with the calling subroutine.

read_opus_header.f         2009-04-04    GCT
Changed
>              call getopusparval(luns,bpointer,'PIM',iend,mrs,i2val,rs)
to
<              call getopusparval(luns,bpointer,'PIM',iend,mrs,i2val,rs)
<              if(rs.eq.0)then
<                call getopusparval(luns,bpointer,'PRS',iend,mrs,i2val,rs)
<              endif
This is because Bruker have apparently changed the name of the variable
representing the internal pressure from PIM to PRS.  In order to support
both old and new OPUS data.  Thanks to Dave Griffith for pointing this out.


write_sunrun.f             2009-03-27
Changed the format used to write FVSI to the sunrun from
1x,f5.4 to f6.4
Without this, the change made to write_runlog.f on 2009-03-04
is useless.

 collate_results            Version 1.1.3    2009-03-18    GCT
  Removed a STOP statement that was designed to alert the user to
  serious problems (rmsfit<0.0), but which were causing crashes
  on a few bad spectra, preventing analysis of subsequent good
  spectra.

  Did a similar thing to newdec.f (removed stop statement).

  Also removed all the extraneous occultation/window names
  from the *.men files.


 GFIT                Version 4.4.1      14-Mar-2009     GCT  
Reversed the following two code fragments to allow
a more precise frequency choice for simulated spectra.
--------------------------------------------------------------
        if(kspflag.lt.2) graw=graw*riair(lasf,tins,pins,hins)/
     &  riair(frqcen,tins,pins,hins)
c        graw=graw*(1.D0+(amal**2+fovi**2)/16)  ! FOV correction

c  If MIT > 0, check that requested spectrum is on disk,
c  and that it covers the specified spectral interval.
        kspflag=0
        call gindfile(dplist,runlab,specpath)
        if(lnbc(specpath).eq.0) kspflag=2
        if(debug) write(*,*)kspflag,'  '//runlab,specpath
--------------------------------------------------------------
 The problem with the code above was that the vacuum-to-air
 correction was performed even if the spectrum was missing
 (kspecflag=2). This caused spurious discrepancies between
 the frequency limits in the .ggg file and the runlog.
 Byy reversing the code fragments, the kspecflasg=2 was
 set earlier, preventing the vacuum-to-air correction for
 synthetic spectra.

 
 apply_insitu_correction      Version 1.1.2   2009-03-09   GCT
 Changed the code fragment:
        if (nchar .eq. 1) then
         output_fmt='(a35,f14.8,NNf13.5,200(1pe12.4))'
         write(output_fmt(12:13),'(i2.2)') naux
      else
         output_fmt='(f14.8,NNf13.5,200(1pe12.4))'
         write(output_fmt(8:9),'(i2.2)') naux
      endif
to
      if (nchar .eq. 1) then
         output_fmt='(a35,f14.8,NNf13.5,200(1pe12.4))'
         write(output_fmt(12:13),'(i2.2)') naux-1
      else
         output_fmt='(f14.8,NNf13.5,200(1pe12.4))'
         write(output_fmt(8:9),'(i2.2)') naux-1
      endif

Otherwise the first XGAS value is written in an F-format
rather that an E-format, with a resulting loss of precision.


BIN2ASC                   Version 1.4.1    08-Mar-2009    GCT
   Modified code to be consistent with the new runlog format.
   [Forgot to do this in the Jan 31, 2009 revision].


GSETUP Version 2.7.5       6 Mar 2009    GCT
  Added code at the end to automatically create a file
  (post_processing.sh) that runs:
    - collate_results
    - average_results
    - apply_airmass_correction
    - apply_insitu_correction
    - write_official_output_file

 This new code also creates the input files needed by
 each of these programs. There are named with a leading 
 dot/period (i.e., hidden) so as not to add clutter to
 the working directory.

 Also, simplified the ~/ggg/install directory by removing
 the input_files/ sub-directory and putting the files that
 were there as hidden files in the install/ directory.
 Note that 4/6 of these files are now automatically
 created by GSETUP. This change is purely organizational.


write_runlog.f             2009-03-04
Changed the format used to write FVSI to the runlog from
1x,f5.4 to f6.4
This doesn't actually change the runlog format, but it
does allows -ve FVSI values to be inserted into the runlog
and used to denote missing data.
Note that read_runlog.f was already using the f6.4 format
and so is unaffected by this change.

To support this, added the if-statement
  if(yrow(kfvsi).lt.0.0) yrow(kfvsi)=0.0  ! Don't let missing data affect UY
to derive_airmass_correction.f and derive_insitu_correction.f


error_scale_factor           Version 1.1.2   2009-03-03   GCT
Fixed a couple of bugs fixed in error_scale_factor.f
that were causing the derived error scale factors to
be too small. Thanks to Nick & Vanessa for pointing
these out.

2009-03-02
Vanessa Sherlock modified all 8 post-processing programs:
  collate_results.f
  average_results.f
  derive_airmass_correction.f
  apply_airmass_correction.f
  error_scale_factor.f
  derive_insitu_correction.f
  apply_insitu_correction.f
  write_official_output_file.f

She did this to facilitate the inclusion of spectrum names
in the output files and to support errors flags.

There is also a new subroutine (generate_qc_flag.f) that
resides in the ~/ggg/src/collate_results/ sub-directory.

These new capabilities are activated by setting the statements
      append_qcflag=.false.
      append_spectrum_name=.false.
in collate_results.f from .false. to .true.
By default, these new capabilities are not activated,
to maintain compatibility with previous GGG versions.


 write_official_output_file   Version 1.1.0   2009-02-23   GCT
Added some code to count the number of error flags of each 
type and to output this info to the screen.


 apply_airmass_correction     Version 1.1.0   2009-02-23   GCT

Replaced the line
   fu=sqrt((yrow(k+1)/yrow(k))**2+(yrow(ko2+1)/yrow(ko2))**2)
by
   if(k.eq.ko2) then
     fu=yrow(k+1)/yrow(k)  ! fractional uncertainty
   else
     fu=sqrt((yrow(k+1)/yrow(k))**2+(yrow(ko2+1)/yrow(ko2))**2)
   endif

Otherwise the O2 error bars are added to themselves, resulting
in a factor 1.414 enlargement. Thanks to Vanessa for pointing
this out.

Also, since fu is always +ve (being the SQRT) it is necessary
to ABS the uncertainties. Otherwise the uncertainties will ne
set to -ve values whenever the XGAS values are -ve.

 GFIT                Version 4.4.0      21-Feb-2009     GCT 
Removed the call to subroutine zenaz to compute the doppler
shift. Instead, used the OSDS parameter from the new runlog.
Also removed all the if-statements that used to hardwire
the doppler shifts of selected spectra (in the solar runlog)
to specific values. These values can now be hardwired in the
runlog itself, rather than the source code.

 write_official_output_file   Version 1.0.8   2009-02-18   GCT
A new program that takes the airmass- and insitu-corrected
data file (runlog.vav.ada.aia) and re-writes a subset of this
info in a more user-friendly format with header information.
The output information is controlled by the file
~/ggg/tccon/pa_qc.dat a portion of which is shown below
Additional site-dependent header info is obtained from the file
~/ggg/tccon/pa_oof_header.dat

The table below lists the acceptable range of parameters in the .vav.ada.aia files
In the event that the data fall out of range, the error flag points
to the #-value of the variable that was furthest out of range.
 # Variable  Output  Scale  Format   Unit     Vmin     Vmax     Description
 1 "year"        1  1.0E+00 "f7.0" "      "   2004.0   2016.5   Year (e.g. (2009)
 2 "day"         1  1.0E+00 "f6.0" "      "   0        366      Day of the year (1-366)
 3 "hour"        1  1.0E+00 "f8.3" "      "  -12.0     36.0     Fractional UT Hour
 4 "run"         0  1.0E+00 "f6.0" "      "   0        9999     Not output
 5 "lat"         0  1.0E+00 "f8.2" "(deg) "   45.8     46.0     Latitude (deg.)
 6 "long"        0  1.0E+00 "f9.2" "(deg) "  -91      -90       Longitude (deg.)
 7 "zobs"        0  1.0E+00 "f7.2" "(km)  "   0.44     0.45     Geometric Altitude (km)
 8 "zmin"        0  1.0E+00 "f7.2" "(km)  "  -0.0     +0.9      Pressure Altitude (km)
 9 "asza"        1  1.0E+00 "f7.2" "(deg) "   0.0      84.0     Solar Zenith Angle (deg)
10 "azim"        1  1.0E+00 "f8.2" "(deg) "  -180      360      Solar Azimuth Angle (deg)
11 "osds"        0  1.0E+00 "f7.3" "(ppm) "  -9        9        Observer-Sun Doppler Stretch (ppm)
12 "opd"         0  1.0E+00 "f7.2" "(cm)  "   40.0     50.0     Optical path Difference (cm)
13 "fovi"        0  1.0E+00 "f6.3" "(rad) "   0.0      0.005    Internal Field Of View (rad)
14 "graw"        0  1.0E+00 "f7.4" "(cm-1)"   0.0      0.016    Spectral Point Spacing (cm-1)
15 "tins"        0  1.0E+00 "f6.1" "(C)   "   25.0     35.0     Internal Temperature (C)
16 "pins"        0  1.0E+00 "f7.1" "(mbar)"   0.0      1030.0   Internal Pressure (hPa)
17 "tout"        1  1.0E+00 "f6.1" "(C)   "  -35.      40.      External Temperature (C)
18 "pout"        1  1.0E+00 "f7.1" "(hPa) "   940.     1030.    External  pressure (hPa)
19 "hout"        1  1.0E+00 "f6.1" "(%RH) "   0        110.     External Humidity (%)


 MOD_MAKER6.PRO     17 Feb 2009
We were having memory problems when running with
an entire year of global data. The larger input
files were over 500MB each and so several GB of
memory was needed by mod_maker5.  So I reduced the
memory footprint by a factor ~7 by reorganizing
the main program around a single, re-usable data
array (Global_Data) rather than having separate
arrays for each parameter (AT, GH, TP, SH).  This
required that the interpolation to the lat/long
of the site happen immediately after reading in the
global data rather than later. I also removed some
of the intermediate global arrays (Geopotential_Hgt,
Specific_Humidity).

mod_maker6 should now execute with input files as large
as 523MB (a year of global AT data) on a computer with
only 2GB of memory.


 GFIT     Version 4.3.2   4-Feb-2009   GCT 
Added the capability of retrieving O2 under the
labels "ao2" or "bo2".  This means that the O2
determined from the 1.27 micron band (o2), the
A-band (ao2), and the B-band (bo2) will not be
averaged, they are kept separate in the .vav
file and in subsequent files.
This is analagous to using "tco2" to keep the
temperature-sensitive and insensitive windows
separate so that they are not averaged together.

Feb 4, 2009
added a 4'th parameter (NAUX) to the first header line
of the .vsw .vav. .ada, .aia files. This means that naux
doesn't have to be hard-wired inside the programs that
use these files (collate, average, ada, aia), instead
it is read from the header line. This makes the programs
more flexible.

Added statements to create_sunrun that write warnings
if a .gnd file contains lamp spectra, or if a .lab
contains solar spectra. 

apply_airmass_correction.f  Feb 4, 2009 GCT
added an if-statement that detected the condition that the
O2 column is zero, and issues a warning.  This can happen,
for example, if vacuum lamp runs are analyzed for O2. 
This is a problem because the gas coloumn are divided by
the O2 columns to comput Xgas, which causes Inf's in the
.ada output file, which then causes apply_insitu_correction
to crash.

January 31, 2009
Major revision to the format and content of the sunruns
and runlogs. Added wind speed and direction, azimuth angle,
the Observer-Sun Doppler Stretch, and replaced SIS & SIA by
their ratio FVSI.

This required modifying many programs and subroutines including:
   create_sunrun_from_xxx
   write_sunrun
   read_sunrun
   read_opus_header
   create_runlog
   gsetup
   read_runlog
   write_runlog
   collate_resultS

This also required an increase in NAUX, the number of
auxiliary variables in the .vsw and .vav files from 19 to 22.

This change is not backward compatible -- your old runlogs wont work.


  collate_results    Version 1.0.4    2009-01-29    GCT
 Added the statement
       specname_gwas='x'
 Otherwise .col files containing a single scan would
 not increment irow, causing an array-bound violation.

 Also, collate_results now produces an additional output
 file called collate_results.nts (NTS = Negative Time Step)
 This is hopefully of size zero. If not, it means that your
 runlog is not chronologically sorted. This is not necessarily
 a problem, but it can indicate some kind of an issue. 

 GSETUP           Version 2.7.4      30 Jan 2008    GCT 
Uses the wlimit function to prevent slant paths of *****
being written in the .ray file when ground-based spectra
have SZA exceeding 93 deg.
Of course, these spectra have serious problems (probably
mis-identified lamp runs) and should be fixed/deleted.
But meanwhile we don't want them to crash GFIT and stop
us from analyzing subsequent good solar spectra.

Created four new programs evaluate airmass-dependent and
airmass-independent (insitu) corrections to the XGAS values,
and apply these corrections. The programs are named.
   derive_airmass_correction.f
    apply_airmass_correction.f
    derive_insitu_correction.f
     apply_insitu_correction.f

Also wrote a program to output a subset of the .vav.ada.aia
file in a nicer format with error flags.
  write_official_output_file.f

GFIT     Version 4.3.1  23-Jan-2009   GCT 
Improved the way that the checksum files are implemented.
In the previous versions, the checksum files always had
the same name -- checksums.out.  Which was fine if you
only ran one GFIT job at a time. But multi-processor
batch jobs running multiple GFIT jobs from the same sub-
directory, allow the possibility of one GFIT job trying
to open and write to a checksum file that is currently
being read. 

To avoid this, GFIT now uses the getpid function to return
the Linux/Unix Process ID number (this is what you see in
the first column when you do the "top" command). This will
be different for different GFIT jobs on the same computer.
So building the PID into the name of the temporary file
containing the md5sums (e.g., check_md5sums_022789.tmp)
makes it unique, eliminating the risk of two GFIT jobs
trying to access that same checksum file simultaneously.
Thanks to Debra for figuring out how to fix this.

Since the checksum files now have an unique name, they
don't overwrite each other.  So GFIT now deletes the
checksum file upon closing, so the sub-directory doesn't
get cluttered with hundreds of the darned things.


collate_results  Version 1.0.3  2008-12-24  GCT'
Noticed that some observation days with only one spectrum were
being dropped. This happens whenever the extension (e.g. '.000")
matched that of the next spectrum. Fixed this with a more thorough
if-statement which checks the dates as well as the extension.

And since GGG is not longer supporting Windows OS, I Replaced
      do k=lr,1,-1
         if(ichar(runlog(k:k)) .eq. 92) go to 101  ! backslash
         if(ichar(runlog(k:k)) .eq. 47) go to 101  ! forward slash
      end do
101   outfile=runlog(k+1:lr-3)//ans//'sw'

with

      outfile=runlog(lloc(runlog,'/')+1:lr-3)//ans//'sw'

I also renamed some of the lun variables, e.g. lunc --> lun_col


 GFIT     Version 4.3.0  22-Dec-2008   GCT
Two changes to solar_pseudo_trans_spec.f
1) Increased parameter margin from 20 cm-1 to 90 cm-1
2) Decreased parameter acc from 0.0001 to 0.00004
These changes are in response to small discontinuities
in the residuals due to truncation of solar lines.
These residuals were only seen when fitting noise-free
synthetic spectra.

tccon_ingaas.gnd    2008-12-05
Changed the default apodization for the cell HCl lines
from 1 to 0 in the file ggg/windows/gnd/tccon_ingaas.gnd

GSETUP, CREATE_RUNLOG   04-Dec-2008
Ran into several problems trying to get the GGG code
installing and executing under Cygwin, a Linux-like
environment under windows.
1) The executables generated by the G77 compiler had .exe
  extensions to their names. 
  To fix this I added the following statement to master.bat
  rename .exe "" ../bin/*.exe
2) Renamed the file master.bat to master.sh
otherwise, under Cygwin, the contents are
first interpreted as DOS commands rather than Unix.
("rename" is a valid DOS command)
3) Under Cygwin, the result of the  getenv('LOGNAME',user)
command is the same as under windows. So the GGG code
assumes a windows/DOS envoronment and starts acting
accordingly (e.g. using \ as the delimiter rather than /)
I therefore made the decision to drop the capability
of running GGG in a DOS/windows environment. 

If you want to run it on your laptop, you'll have to
install Cygwin (which may cause a loss in speed).
This simplifies several of the programs such as GSETUP,
CREATE_SUNRUN, which used to contain if-statements like:
c  Platform specification:    DG000909
      call getenv('LOGNAME',user)
      if(user.eq.'        ')then ! It's not a Unix/Linux machine
         platform=2               !0=Sun, 1=PC-Linux, 2=PC-Win32
         dl=char(92)              !Back-slash  ('\')
         root='g:'//dl            !DG Jan03
         user='PC-Win'
      else                       ! It's a Unix/Linux machine
         platform=0               !0=Sun, 1=PC-Linux, 2=PC-Win32
         dl='/'
         call getenv('GGGPATH',root)
         root=root(:lnbc(root))//dl
c         root='/home/toon/ggg/'
      endif
      lrt=lnbc(root)       !Length of root



GFIT, GSETUP, CREATE_RUNLOG   21-Nov-2008
 Due to various requests for longer spectrum names (e.g. GDS,
Wollongong) I have increased the number of allowed characters to 35.

I have previously partially completed this task to be able to
handled time-stamped GDP spectra using GDS-supplied runlogs,
but I had never inplemented this end-to-end.

tccon_ingaas.gnd  Nov 13, 2008

Added 5 new HDO windows to tccon_ingaas.gnd
 4054.60   3.30  15 1 1 0  cl  ct  fs  so    : hdo  h2o  ch4
 4116.10   8.00  15 1 1 0  cl  ct  fs  so    : hdo  h2o  ch4
 4212.45   1.90  15 1 1 0  cl  ct  fs  so    : hdo  h2o  ch4
 4232.50  11.00  15 1 1 0  cl  ct  fs  so    : hdo  h2o  ch4  co
:4261.70   9.10  15 1 1 0  cl  ct  fs  so    : hdo  h2o  ch4  co
These were based largely on Nick Deutcher's windows.
The last of these five windows gives results that are
systemarically 6% lower than the others and with a worse
Chi-squared/N. I therefore commented it out.

GSETUP Version 2.7.2      22 Oct 2008    GCT 
Various minor tweaks, to try to be more specific about the
logical unit numbers. This followed a problem that David
Griffith reported whereby his runlog was overwritten by
error messages (due to lun_rlg not being initialized.
 - added missing parameter statement (lun_rlg=21)
 - defined lun_mod=22, lun_vmr=23 (instead of using
   a hardwired value of 19)
 - added lun_mod as an argument to readmodFC.f
 - changed lunt inside write_mav to 19

Also removed a few obselete statement labels.

2008-10-14  GCT   spectrum_loop.f
   Added 4 more gases to the isotopologs.dat and the
.vmr files:  NF3, ClOOCl, ClClO2, ClOClO.
These are gases that Voltaire was placing upper limits
on using MkIV balloon spectra.
Increased parameter MGAS in abscoi.f from 64 to 68.

2008-10-13  GCT   spectrum_loop.f
   Instead of the MSPT parameter being hardwired to 2000
inside spectrum_loop.f, it now tries to read this value
from the SPT line of the .ggg file. For example,
/home/toon/ggg/spt/z   2500
sets MSPT=2500.  This gives the user the ability to
change this value.  If no value is provided, it will
use the default value of 2000.
Reminder: MSPT is the maximum number of SPT files
that will be written to disk.

2008-10-09  GCT   JETSPE.F
   Changed jetspe.f, spectrum_loop.f and newspect.pro 
allow the use of spectra that are sorted in increasing
wavelength rather than increasing frequency. I believe
that the former is the default on Brukers. This involved
extensive modifications to jetspe.f in particular.
I removed the option of jetspe returning a partial
spectrum. It now returns a failure status if the
requested interval is not fully present in the disk file.

This was tested by copying a Bruker spectrum and
writing its contents backwards. Then changing the
original runlog such that:
  delwav=-delwav
  ifirst=-ilast
  ilast=-ifirst

2008-10-08  GCT
   Removed the LLSIZE line from the .ggg files.
This was an anachronism from the days when we had
a separate file containing the linelist sizes.
This makes the header of the .ggg and .col files
one line shorter.  Changed gsetup/gfit to skip
this line.
   Important: this means that the new GFIT is
incompatible with old .ggg files.

2008-10-07  GCT
   GFIT now computes MD5SUM's of all input files
and writes them to the .col file header. This will
hopefully make it easier, when comparing .col files
to figure out where any differences are coming from.
Very often, the linelist linked to atm.101 in one
person's directory is different from another's.
The checksum tells us whether the linelists are
the same or different, despite having the same name.

Had to change the format of the read statements in
collate_results to handle the fact that most of the
header lines no have 32 extra characters at the
beginning (the 32-character checksum plus two spaces)

Unfortunately, I don't have a Fortran subroutine to
compute the checksums, so I had to use a system call
to do this and redirect its output to a temporary file,
checksums.out, which was then re-read for the checksum
values.  This is clumsy but it seems to work.

Another drawback of the system call is that on some
computers you have to explicitly link to the library
containing the system call functions if your compiler 
is not set up to do this automatically.
For GFORTRAN this is the -static option
For Absoft F90, this is the lU77 option

Alternatively you can add the line:
export LD_LIBRARY_PATH=/usr/local/gfortran/lib:$LD_LIBRARY_PATH
to "/etc/profile". This has the advantage of keeping
the executable small.

2008-09-30  GCT
Made several changes to the Makefiles in order to
make it easier to switch compilers.

I have defined a symbolic link:
~/ggg/install/.ggg_compiler
It is linked to one of three files
~/ggg/install/.g77
~/ggg/install/.gfortran
~/ggg/install/.f90

When you install the GGG code, the default compiler is g77.
If you want to change this to something else, you simply 
redefine the symbolic link to point to the file representing
the compiler that you want to use. This way, you don't have
to edit 20 Makefiles because each one now contains an include
statement that includes the content of .ggg_compiler.
This content includes, for example
   FC = g77
   FCFLAGS = -c -O -fbounds-check -Wall -W
   LDFLAGS =


COLLATE_RESULTS & AVERAGE_RESULTS
 Split GGGAVG into two programs:
collate.f  reads the .col files and runlog and writes
the info in a big spreadsheet file named runlog.xsw

average_results.f  takes the file runlog.xsw as input,
averages the windows belonging to the same gas, and
writes the results to a file runlog.xav.  It also
produces an output files
wincomp.runlog.xav
outliers.runlog.zav

There were two reasons for this major change
1) ggavg.f was getting too complicated
2) gggavg needed too much memory.

The latter problem was solved by making the 
largest arrays, YOBS and YERR, one-dimensional
in the main program (but 2-D in the subroutines.
This way it can handle MkIV balloon spectra where
the number of windows/columns is large (400) but
the number of spectra/rows (1200) is small.  And
it can handle the TCCON case where the number of
spectra is huge (160000) but the number of windows
is small (20). To handle both these cases without
recompilation using statically defined 2-D arrays
would require 
  400 x 160000 x 4 bytes x 2 arrays = 512 MBytes
which is beyond the memory capability of older computers.

.vmr files       19 Sep 2008  GCT
   Reduced the mars dust vmr from 1.0E-18 to 1.E-25
in gnd_summr.vmr after noticing significant dust
absorption up to 5000 cm-1 (where it abruptly stops)
in high-airmass ground-based spectral calculations.

Also, changed all the 0.000E+00 values to 1.000E-25
in the tropics.vmr to avoid any possibility of
zero-divide problems.  The gnd_summr.vmr file
was already ok in this respect.

Various          12 Sep 2008   GCT
Formatted all free-format write statements in
gfit.f, write_mav.f, gsetup.f, gggavg.f
These were causing a different style of output with the
G77 and GFORTRAN compilers.  For example, the statement
write(lunx,*) headlen,ncol
would produce
 21 48             using the G77 compiler and
      21      48   with GFORTRAN
This caused the output files to appear different
when doing a diff, even when their content was
identical.

master.bat                 23 Aug 2008  GCT
  Reorganized this file to eliminate the sub-batch files.
Now, the one file does everything (deleting the .o files,
running all of the Makefiles, running create_runlog,
gsetup, multiggg.bat, and gggavg, and then looking for
differences)

Makefile                   22 Aug, 2008   GCT
  Made two improvements:
 1) The Makefiles now reference all the .f and .o files by their
  full paths.  This means that the Makefile can now be executed
  from any directory, not just the one where the Makefile is
  located.  This simplifies the process of compiling all the
  source code during installation (i.e., master.bat).
 2) A Makefile is no longer needed in the src/comn/ directory
  since all the files are now referenced by their full paths.
  This removes the most common source of mistakes: inconsistencies
  between the source Makefile and the one in src/comn/.

gnd_summer_20080821        21 Aug 2008    GCT
 Changed the a priori profiles of CH4, HF, and N2O to better
 conform to recent MkIV balloon profiles and to ACE data.

SUMMARIZE_LINELIST 1.1.0    18 Aug 2008    GCT
  Removed hard-wired paths (e.g. /home/toon/ggg/)
  Wrote output info to files rather than the screen.

BIN2ASC    Version 1.4.0    15-Aug-2008    GCT
  Added an extra decimal place to the frequencies
  in order to make Linefit happy (otherwise the
  rounding error causes the frequency point spacing
  to be too uneven.

CREATE_RUNLOG   Version 8.3.1   12-Aug-2008   GCT
  Now calls wlimit.f to prevent format overflows (****)
  when writing the OPD to the runlog. Otherwise, these
  cause GSETUP to crash.

GFIT      Version 4.1.3      10 Aug 2008   GCT
  Changed the column labels in the .col to be more
  consistent with the names of the retrieved parameters
  in the command line of the .ggg file
  Thus, Tilt becomes CT
     Sh becomes FS
     Zoff becomes ZO
  I also changed VF to VSF (VMR Scale Factor)

GGGAVG    Version 2.6.6   09-Aug-2008   GCT 
  Now produces a warning if the runlog times are not
  chronological, i.e. there is a -ve time interval.
  For example, this can serve as a warning of the
  InGaAs and Si spectra not being interleaved. 

  Also now writes two more diagnostics to the gggavg.rpt
  file for each window:
  1) The average number of iterations
  2) The % of spectra for which convergence was achieved

GFIT      Version 4.1.2       8 Aug 2008   GCT
  Converted wlimit.f to double precision to be able to
  handle formats with more than 7 sig figs, e.g. f9.4
  This prevents '*********' in the VF field of the .col

GFIT      Version 4.1.1      23 June 2008   GCT
  Simplified the noise addition capability.
  It now adds noise to the observed spectrum whereas
  previously it was added to the calculated transmittance.
  The advantage of the former is that you don't need an
  array to store the noise since it is only added once
  (rather than every iteration).  The disadvantage is
  that the observed spectral values are not guaranteed
  to lies between 0 and 1. There is an arbitrary scale
  factor: if you ad 0.01 of noise to a signal of 20000,
  it has much less impact than if you add 0.01 to 1.0.

  Made two changes to the format of the .col files:
  1) The Zmin is now written as f8.3 to allow
    tangent altitudes > 1000 km (Titan)
  2) The OVC has one additional sig fig to make OVC_air
   less susceptable to rounding error.

DIURNRET    Version 4.14.3   22-June-2008   GCT
   made minor changes to the weighting used to interpolate
   the auxiliary parameters (e.g. time) from tangent
   altitudes to level altitudes. The old weights became
   inacurate when the level spacing became very large (e.g. 30 km)

   Also, added code to write Jacobeans to file (runlog.jac)
   so that a stand-alone program can use them to compute the
   averaging kernels.

GINDFILE    April 19, 2008
As part of my crusade to remove user-dependent names
from the ggg code and its input files, I have modified
gindfiile to allow the user to define paths such as
   ~/ggg/spectra/
in the data_part.lst file, instead of
   /home/toon/ggg/spectra
This uses the $HOME environmental variable.

MODFFT.f
 Adopted Jean-Francois' latest version of this subroutine
which includes the following changes.
c  Revision 1.5  2004/05/14  JFB
c    Replaced leading tabs with spaces
c    Fixed indentation of variable declarations
c    Added "implicit none" to individual subroutines
c    Replaced two instances of "pii = 4.*datan(1.d0) with
c      "pii = real(4.d0*datan(1.d0))" to avoid ftnchek warnings
c    Removed unused label "90" in front of "call ord1 (m, b)"
c    Added parenthesis around "-p7", "-tr3", and "-t8" to avoid G77 warnings


GSETUP   Version 2.7.1   Feb 3, 2008   GCT
Made changes to gsetup, readmodFC, and readvmrFC to simplify the process
of fitting lamp spectra. Previously this was done by pretending that the
lamp spectra were ground-based solar spectra, and then hacking the .mav
and .ray files produced by gsetup until only one (two including the cell)
level was present. These files were also modified to change the T/P/vmr
and path length of the remaining level to the desired values.

But this process was error prone and difficult to explain to others. With
more people now wanting to fit lamp spectra, I decided to modify GSETUP
such that it creates the correct single-level .mav and .ray files. Hacking
is no longer required. This was implemented using if-statements to identify
the special nlev=1 case that represents lamp runs. It was actually easier
than I had expected -- I should have done it years ago.

Here are the instructions for fitting lamp spectra for the first time:
0) Create a file (e.g. lh20080123.lab) containing a list of the names of
   lamp spectra
1) Make sure that you have a ~/ggg/apriori/gfit_ap.lab
2) Make sure that you have a ~/ggg/sunruns/lab/ sub-directory
3) Check that lamp spectra are in a sub-directory listed in data_part.lst
4) Run create_sunrun_from_lauder
   This will create a file ~/ggg/sunruns/lab/lh20080123.lop
5) Check that aipl parameter is equal to the path length (km) inside the
   Bruker and that pout=0.0.
6) Make sure that you have a ~/ggg/runlogs/lab/ sub-directory
7) Run create_runlog
   This will create a file ~/ggg/runlogs/lab/lh20080123.lrl
8) Add ld20080123.lrl to the list in ~/ggg/runlogs/lab/runlogs.men
9) Copy the one-level model file lh20080123.mod to ~/ggg/models/lab/  and
   include it in the models.men file. Make sure that it correctly represents
   the T/P inside your Bruker.
10) Copy the one-level vmr file lh20080123.vmr to ~/ggg/vmrs/lab/ and
   include it in the vmrs.men file. Make sure that it correctly represents the
   vmrs inside your Bruker.
11) Copy the file one_level.lev to ~/ggg/levels/ and include it in the
   levels.men file.
12) Create a list of windows in ~/ggg/windows/lab/ and include it in the
   windows.men file.
13) Run ~/ggg/bin/gsetup choosing the "l" option. Ignore the TLPATH-related
   error messages. They are simply because TLPATH refuses to ray-trace a
   one-level atmosphere, which is fine (we don't need it to).
14) Run gfit (either directly or as a batch job using multiggg.bat)


ABSCOI.F   Dec 4 2007
 Reduced the size of the FRAC parameter in abscoi.f by a
 factor 4, from 0.0001 to 0.00025. This improves fits to
 the strong Doppler CO2 lines of the nu_3 CO2 band in the
 upper stratosphere where they are already highly saturated.
 The problem there is that although the pressure broadening
 is much smaller than the doppler broadening, the former
 nevertheless dominates in the line wings. So if the line
 is sufficiently strong, the pressure-broadened "wings"
 are easily discernable, even at 60 km altitude. 
 The down-side of this is that abscoi is slightly slower.

CREATE_RUNLOG   27 Nov 2007  GCT
  Realized that there were two subroutines: rdopushead.f and
read_opus_header.f, that did essentially the same thing: to
return the values of selected parameters from the OPUS header.
The former subroutine was used by create_runlog and the latter
by create_sunrun_from_xxxx.

I decided to merge these two subroutines into one.
This required adding several parameters to the
read_opus_header.f argument list (ms,foc,dfr,gfw,gbw,lfl,hfl).
While I was at it, I removed the parameter nscans from the
argument list, since it didn't appear to be used for anything.

I then had to modify all the create_sunrun_from_xxxx.f
source codes to use the modified argument list.

All source code   21 Oct 2007  GCT
 Several minor mods to enable compilation with the G95 compiler.
 These included
1)  Editing the Makefile to remove unrecognized compiler options
2)  Avoiding float(I*2) which is not allowed in g95 !

Also did several things to reduce the number of warnings such as
Replacing obselete Fortran code (e.g. in-line functions,
non-block do-loops, arithmetic if-statements)

Also made sure that 'implicit none' was present in every program
or subroutine.

CREATE_RUNLOG  Version 8.2.3    8 Oct 2007   GCT
 Vanessa noticed that the solar zenith angles prior to
 UT midnight were wrong. This was because I neglected to
 update the integer date when I changed the day number
 and the gmt time (to make all the spectra acquired on
 the local day have the same day number).
 This was fixed by changing
         call zenaz(object,oblat,oblon,obalt,iy,im,id,
     &   gmt/24.d0,asza,azim,eorv,ervc,tplat,tplon,tpalt)
 to
         call zenaz(object,oblat,oblon,obalt,iy,one,doy,
     &   gmt/24.d0,asza,azim,eorv,ervc,tplat,tplon,tpalt)

 At the same time, I noticed that there were several calls
 to the zenaz subroutine from inside rdsphead.f, in addition
 to the call from create-runlog.f. These calls were a hangover
 from the days when the asza could be read from the spectrum
 header, and not calculated. But since rdsphead no longer
 returns asza to create_runlog, it is pointless to be calling
 zenaz from inside rdsphead.f.  I deleted all calls to zenaz
 from inside rdsphead.f

CREATE_RUNLOG  Version 8.2.2    8 Oct 2007   GCT
 Initialized the variables GFW and GBW inside rdopushead.f
 Previously, GBW was not defined in FWD-only OPUS scans,
 and so the GBW variable was picking up random, non-zero
 values from memory, which messed up the ZPD time calculation.
 Thanks to Vanessa Sherlock for spotting this error.

CREATE_RUNLOG  Version 8.2.1    7 Oct 2007   GCT
 Vanessa Sherlock discovered that the gfortran compiler
 produces a "bad integer" error inside rdopushead.f when
 trying to do a free-format read of the velocity index
 from the string CVAL(:4) consisting of an "8" followed
 by 3 nulls. The G77 compiler has no problem.

 Strangely, if you do a formatted read (i2, i2, i3, or i4)
 it works with either compilier. I decided to clip the
 trailing nulls from the string before attempting the
 free-format read. So I replaced
                read(cval(:4),*) ivel ! read velocity code value
 by
                lc=lnbc(cval(:4))
                read(cval(:lc),*) ivel ! read velocity code value

GFIT  Version 3.0.6   30 Sep 2007   GCT
 The spectrum_loop.f subroutine now has two choices:
 to call do_retrieval.f which in turn calls fm.f
 to call do_retrieval2.f which in turn calls fm2.f
 This was done to help Brian Connor convert GFIT to
 a profile retrieval algorithm.

 The fm2 subroutine now returns the single-level partial differentials
 in a 3-D array (frequencies, levels, target gases) named SLPD. There
 is now some temporary code in do_retrieval2 that sums the SLPD values
 over levels to check that the resulting column partial differentials
 match those in the PD array, which they now do. So, as far as I can
 tell, the SLPD values produced by fm2.f are correct.

 I've also decided to treat the solar spectrum to its own vector SPTS,
 rather than hide it as the ntg+1'st column of SPXV. This will hopefully
 make the code somewhat clearer.

GFIT  Version 3.0.5   25 Sep 2007   GCT
  Decided that the AK.F and the FM.f subroutines were so
  similar that they should be merged. A new input argument
  (lun_ak) is now passed to FM. When lun_ak=0, fm.f works 
  as previously. But when lun_ak > 0 the subroutine works
  like AK.F and calculates single-level weighting functions.
  These are written to file, together with the other weighting
  functions.  The VAC and SPLOS arrays together with the NLEV
  variable are now passed to fm.f to allow calculation of the
  single-level weighting functions.

GFIT  Version 3.0.4    8 Sep 2007   GCT
  I decided that the gfit main program was still to large
  and so I carved out a new subroutine called spectrum_loop.f
  This is called twice by GFIT. The first time it skips
  the time-conmsuming things (reading the spectra, pre-computing
  absorption coefficients, fitting the spectra). But it does
  everything else (e.g. finding the spectra, checking their
  frequency limits, reading the .mav and .ray files. This
  checks that all the input files are present and correct
  before investing time to try to fit the spectra. The second
  call to spectrum_loop does the fitting.  This results in a
  much smaller GFIT main program (167 lines versus ~1000 previously).

GFIT  Version 3.0.3   17 Aug 2007   GCT
  To accommodate the 34-character spectrum names used by the GDS,
  I changed gfit.f, gsetup.f and read_runlog.f. 
  Basically, these changes involved changing a21 to a34 in
  format statements and changing *21 character declarations to *34.
  The only tricky part was making read_runlog able to read either
  runlog format (12-, 21- or 34-character spectrum names) seamlessly.

GFIT  Version 3.0.2   16 Aug 2007   GCT
  To further simplify do_retrieval, I carved out the subroutines:
     solar_gas_shift.f   ! computes the solar-gas shifts
     write_col.f         ! writes a record to the .col file
     wlimit.f            ! truncates a value to fit a specified format

GFIT  Version 3.0.1    4 Aug 2007   GCT
  To further simplify the gfit main program, I carved out
  another subroutine: compute_vertical_paths.f

GFIT  Version 3.0.0   31 Jul 2007   GCT
  A major revision to GFIT in which all the code in the
  main program associated with the retrieval method has
  been placed into a new subroutine (do_retrieval). This
  includes 
   - the iteration loop
   - calling the forward model
   - computing the residuals
   - solving the matrix equation that computes dx, the
     update to the state vextor
   - convergence criteria
   - computing the covariance matrix

This was a painful process because over the years, everything
in the main gfit program had become connected to everything else.
Extracting the retrieval-related code left a lot of variables
and arrays that were needed in the new subroutine and the main
program, at least initially. A lot of work was simply deciding
whether a particular variable/array was really needed in both
gfit.f and do_retrieval.f, and if not, eliminating it from the
wherever it was least essential, thus simplifying the interface
to do_retrieval. This untangling was very time consuming.

At each step in changing this code, I was re-ran a benchmark
case and checked that the results didn't change.


GSETUP Version 2.6.5      28 Jul 2007    GCT
   Modified readmenu.f so that 
  1) lun_men is in the argument list, not hardwired to 19
  2) readmenu.f writes string(1:ls) instead of string

GSETUP Version 2.6.4      8 Jun 2007    GCT
  Made several mods to better fit the ACE spectra, which extend
  up to 165 km tangent altitude.

  1) Extended the integer.orb file to 170 km (171 levels) and
  included the decrease in MMW above 85 km (=22.90 at 170 km)

  2) Increased parameter mlev from 151 to 171 in GFIT and ABSCOH.

  3) Extended the file gnd_summer.vmr to 170 km altitude.

  4) Edited setvmr.f to sharply decrease the CO2 profile above
  90 km altitude. falling by a factor 4 between 90 and 114 km
  altitude.  

 GGGAVG    Version 2.6.1    8-Jun-2007   GCT
  Added two additional auxiliary variables (hout, tins) to
  the output files, increasing naux from 17 to 19.

  Also added code to t_fit to trap data values for which
  yerr=0.0, which can happen when the ray path doesn't enter
  the atmosphere. 
 
 isotopologs.dat    15 April 2007   GCT
 Added a third SO2 isotope (33SO2) to allow the fitting of
 Lance Christiansen's SO2 lab spectra. Also added it to the
 standard vmr profiles.

CREATE_RUNLOG  GFIT  Version 8.2.1      25 Jan 2007    GCT
  Added the following code to prevent the UT day number
  incrementing for observations taken thru midnight UT,
  as often happens from ParkFalls and Darwin.

c  We want all observations to have the day number of local noon,
c  even though the UT day number may be different. The following
c  makes all spectra acquired on the same local day have the same
c  day number. To achieve this, the UT time must be allowed to go
c  -ve or to exceed 24.
         site_solar_noon=12-oblon/15  !  ut time of local noon
         if((gmt-site_solar_noon).gt.+12) then
             gmt=gmt-24.0
             doy=doy+1
         elseif((gmt-site_solar_noon).lt.-12) then
             gmt=gmt+24.0
             doy=doy-1
         endif

  This makes the DOY in the runlog consistent with the local date
  encoded into the spectrum name, which simplifies the extract_pth program.

  Of course, this makes no difference to the total time
  i.e., Year + (day + hour/24)/365.25


GSETUP Version 2.7.0              5 Jan 2007    GCT
  Made two changes to setvmr.f to make the CO2 more realistic.
  1) Included a 0.6%/year secular increase
  2) Included a seasonal-dependence to the age of air at the tropopause

GFIT Version 2.40.3               8 Dec 2006    GCT
  Included the following line in abscoh.f:
              if(abhw.le.0.0) abhw=0.1
  Since there are numerous lines of H2O, O3, CH3Cl that have abhw=0.0
  in both HITRAN_2004 and ATM.101

  Also included the code:
            if(kgas.ne.2) pbhw=pbhw+0.15*abhw*vmr(2,i)
  which adds an additional broadening contribution from CO2,
  which is assumed to be 1.15 times the air-broadening.
  This is only important for Venus and Mars.

GSETUP Version 2.6.4       6 Dec 2006    GCT
  Stopped appending user to the version string.
  This was causing meaningless differences between the benchmark
  files (user=toon) and the output files created by others.

  Also increased the lengths of the path character strings from 48 to 80
     & modname*80,         ! path to new model
     & newmodname*80,      ! path to new model
     & vmrname*80,         ! path to new vmr
     & newvmrname*80,      ! path to new vmr
     & menuinput*80,       ! path to xxx.men file
 
GFIT Version 2.40.2     5 Dec 2006    GCT
  Deleted the code in abscoh.f that converts the HITRAN gas numbers
  to ATMOS values, and replaced it by a call to hitran_to_atmos_gas_numbering
  which was already in src/comn/ because it was being used by VLL

create_runlog   Version 8.1.0    4-Dec-2006   GCT
  Commented out the code in create_runlog which warns that the
  chosen runlog already exists and requests overwrite confirmation
c      inquire(file=outfile,exist=flexst)
c      if(flexst) then
c          write(*,*) 'File already exists: '//outfile
c          write(*,*)' Overwrite (y/n) ?'
c          read(*,*) ans
c          if(ans.eq.'n' .or. ans.eq.'N') stop
c      endif

  I did this because the question is not predictable (sometimes 
  create_runlog asks, requiring a response, sometimes not).
  It is therefore an impediment to streamlining the execution
  of the code via batch files.

GFIT  Version 2.40.1    14 Nov 2006    GCT
  Changed isotopologs.dat to include the 9'th isotopolog of CO2 (838),
  which is present in the latest version of the linelist. This change
  does not require any changes to the .vmr files, which are isotope-
  independent, but it does mean that any pre-existing .mav files are
  now invalid.

GFIT  Version 2.40.0    10 Sep 2006    GCT
  Noticed that gfit would produce nan's when fitting the really
  high-altitude ACE spectra in windows without any absorptions lines.
  This was due to the frequency shift trying to fit the noise and
  occasionally taking on large -ve values which exceeded the
  capabilities of the newdec subroutine. 

  The solution was to make the FS limit more strict.
 Changed
       if(dabs(shift) .gt. 2*(resn+grid)) then
          shift=dsign(2*(resn+dble(grid)),shift)
 to
       if(dabs(shift) .gt. 1*(resn+grid)) then
          shift=dsign(1*(resn+dble(grid)),shift)

 The downside of this change is that gfit will be less able to
 handle spectra with large frequency shifts.

GFIT  Version 2.39.0    18 Aug 2006    GCT
  Replaced the statement
      tnulst=1.0e-12*sqrt(p(2))
  by
      tnulst=1.0e-12
  The former caused the absorption coefficients to depend on
  the highest pressure. So if you changed the pressure of the 
  lowest atmospheric level, the absorption coefficients at
  all the levels would change, even though the pressures at
  the other levels were unchanged.


GFIT  Version 2.38.3    21 Jun 2006    GCT
  gfit now writes spt fnd ak iles for the first MSPT=2500 spectra.
  This avoids filling the disk when the runlog contains 100,000
  spectra. There is no longer any need to include the string 'spt'
  into the command line of the .ggg file (this was unpopular).

GFIT  Version 2.38.2    21 Jun 2006    GCT
  abscoh.f now uses the F77 function file_size_in_bytes.f to
  determine the sizes of the linelistsr. This avoids using the
  system call fstat, which was an impediment to portability.

GFIT  Version 2.38.1    20 Jun 2006    GCT
  GFIT has two options for the frequency scale:
  1) The rest-frame of the earth (freq_flag=0)
  2) The rest-frame of the sun (freq_flag=1)
  Use the former if you want the telluric lines to
  appear in the right frequencies (i.e. those in the
  linelist), and you use the latter if you want the
  solar lines to appear at the right frequencies.
  You can't have both at the same time.

  Instead of freq_flag being hard-wired as a parameter inside
  gfit.f, it is now read from the .ggg file. This allows us to
  define the frequency reference frame in the windows file.

  Thus all the old windows files must be updated to include the
  extra 1 or 0.

GFIT  Version 2.38.0    30 May 2006    GCT
  Split the ggg/config sub-directory into three:
  1)  config/ contains only the data_part.lst file
  2)  apriori/ contains the gfit_ap.xxx files
  3)  isotopologs/  contains the isotopologs.dat files

  Made the neccessary changes to gsetup.

GFIT  Version 2.38.0    30 Apr 2006    GCT
  Implemented a new version of create_sunrun_from_parkfalls_ifs1.f
  containing the 0.7 mbar pressure correction for Park Falls
  plus the May 2004 temperature and humidity values (missing
  from the original .info files because the weather station
  wasn't fully installed).

GFIT  Version 2.38.0    26 Apr 2006    GCT
  Implemented a new version of setvmr.f (called by gsetup.f)
  This overwrites the CO2 profile read from the .vmr profile
  with a seasonally and altitudinally-varying CO2 profile.
  It does this if the ptrop variable (tropopause pressure)
  is greater than zero.

  This subroutine also overwrites the H2O profile with that
  from the NCEP based .mod file, if it exists. In a recent
  mod, the HDO profile is also replaced using a crude
  approximation to the isotopic fractionation, which is
  assumed to be 0.16*(8-log(Vh2o)).
  
GFIT  Version 2.37.0    24 Apr 2006    GCT
  Added a line to abscoh.f to compute additional pressure-
  broadening due to H2O-X collisions, which are assumed 
  to be 1.35 times more effective than Air-X collisions.

  Let's assume that Vx is the vmr of gas X, and that Vh2o is
  the vmr of H2O. The total line brodening is the sum of three terms:
  1) Air-broadening: = abhw*Vair
  2) Self-broadening:= sbhw*Vx
  3) H2O-broadening: = 1.35*abhw*Vh2o

  Since Vair = 1 - Vx - Vh2o
    pwhw = abhw*(1-Vx-Vh2o) + sbhw*Vx + 1.35*abhw*Vh2o
    pwhw = abhw + (sbhw-abhw)*Vx + 0.35*abhw*Vh2o

  Since abscoh.f already computes pbhw = abhw + (sbhw-abhw)*Vx
  we simply have to add the following statement to abscoh.f:

c  Add H2O-broadening, assumed to be double the air-broadening
     if(kgas.ne.1 .and. kgas.ne.49) pbhw = pbhw + 0.35*abhw*vmr(1,i)

  This change helps reduce the slight increase (0.25%) in retrieved O2
  with H2O observed in the Park Falls spectra.

GFIT  Version 2.36.0    14 Apr 2006    GCT
  Fixed a problem (no a bug!) that caused large frequency
  shifts (20-50 mK) in the early OPUS Bruker spectra.
  The basic problem is that the default laser frequency
  in the OPUS software (15798.1 cm-1) is wrong, and so
  are all the start/stop frequencies. The spectra acquired
  at Caltech before we realized and inseted the correct value
 (15798.0138 cm-1) therefore have shifts of up to 99 mK.

  Fortunately, Bruker have included the wrong laser frequency
  in their OPUS header, so we can do a correction by multiplying
  all frequencies in the OPUS headers by: v_laser_true/v_laser_opus
  where v_laser_true=15798.0138 cm-1
  and v_laser_opus is whatever value is in the OPUS header.
  Note that for the spectra that already have the correct
  laser frequency, v_laser_true / v_laser_opus=1, so this 
  will be a do-nothing operation. So this won't have any
  effect on the existing post-June-2004 Park Falls or
  Darwin spectra.

  This has been implemented by adding the line
        delwav=15798.0138d0*delwav/lasf  ! Some OPUS Bruker data has wrong laser freq
  to the file
        ~/ggg/src/create_runlog/rdsphead.f
  i.e.
        delwav=(stopf-startf)/(npoints-1)
        ifirst=nint(startf/delwav)
        ilast=nint(stopf/delwav)
        delwav=15798.0138d0*delwav/lasf  ! Some OPUS Bruker data has wrong laser freq

 2.35.6    11 Apr 2006    GCT
  Changed the runlog format to always force a space between
  the BPW and the ZLO variables. This affects the read_runlog
  and write_runlog subroutines that call them. This increases
  the length of each runlog record to 235 characters.

  Also edited readmodFC.f to allow for old runlogs (balloon)
  thar only have P, T (two numbers on some lines).

  Also, edited write_mav.f to fix a bug in the if-statement
  that reports gases missing from .vmr file.

GFIT  Version 2.35.5    24 Mar 2006    GCT
  Changed gfit.f and subroutine write_mav.f so that the winfo
  string is now passed down. If ' so ' is not present in winfo,
  write_mav doesn't bother writing the (featureless) solar
  spectrum to the .spt file. This has no effect on pfit.pro

GFIT  Version 2.35.4    21 Mar 2006    GCT
  Changed the format of the header line in gfit.f and pfit.pro
  from
     readf,unit,format='(2f12.6,i7,3f8.3,f7.4,f7.3,1x,i3,f4.1,1x,i3)
  to
     readf,unit,format='(2f14.6,i7,3f8.3,f7.4,f7.3,1x,i3,f4.1,1x,i3)
  to prevent the start and end frequencies running together
  for frequencies > 10000 cm-1

GFIT  Version 2.35.3    21 Mar 2006    GCT
  David Griffith found a bug in the write_mav.f
  subroutine by which if the .vmr file failed to provide
  a vmr profile for a gas in the isotopologs.dat file,
  a warning message would be issued. The program would
  then write vmr(gasindex(j),i) into the .mav file with
  gasindex(j)=0 which is an array-bound-violation for i=1

  Decided to stop the program whenever this happens.
  and force the user to add the missing vmr profiles,
  rather than setting the missing vmrs all to zero.


GFIT  Version 2.35.3    14 Mar 2006    GCT
  Replaced the create_sunrun_from_opus/ sub-directory
  with two separate subdirectories
      create_sunrun_from_parkfalls/
      create_sunrun_from_darwin/
  This allows site/instrument-specific corrections 
  (e.g. pressure offsets) to be performed separately.

GFIT  Version 2.35.2    14 Mar 2006    GCT
  Removed remaining instances of "/home/toon/ggg"
  from create_sunrun and create_runlog directories.
  Also edited ggg/src/comn/Makefile to put ALL at the
  beginning and to include all the proper .o files.

GFIT  Version 2.35.1    14 Mar 2006    GCT
  Changed the format with which the zero level offset
  is written by write_runlog from "f5.3" to "1x,f4.3".
  This forces a space between the POSSP and ZLO values.
  Although this makes no difference to gfit or the other
  Fortran programs that read the runlog, it seems to
  help newspect.pro, which has problems with the merged
  POSSP/ZLO values, despite performing a formatted read.

GFIT  Version 2.35.0    12 Mar 2006    GCT
  Fixed a bug in gfit.f (identified by Nick Deutcher) by which
  NaN's were calculated for the airmass, vertical column in
  situations where the pressure altitudes were negative (i.e.
  below sea-level.  This had never been noticed before
  because all the other sites are well above sea-level.

  For example, on October 25 2005, the NCEP model for Darwin said that
  the 1000 mbar level was at 0.073 km altitude. This means that for
  all those spectra whose surface pressure is greater than 1008.2
  mbar, a negative pressure altitude was derived. [The geometrical
  altitude of the Darwin FTS is 0.030 km]

  A pressure altitude error of more than 30 m is not unusual. But
  at the other sites it does not go -ve because they are higher.
  The fix is extremely simple:
  Search gfit.f for the following loop and change the 2 to a 3.
      do klev=2,nlev
         if(z(klev).gt.zmin) go to 777
      end do

GFIT  Version 2.34.0     9 Mar 2006    GCT
  Implemented Rebecca's code for reading the NCEP H2O profiles
  from the .mod file. This affects gsetup and associated
  subroutines (setvmr.f & readmodFC.f). This greatly reduces
  the variability in VF_O2 compared with using a climatological
  H2O profile especially for Park Falls where the H2O can vary
  enormously.  To maintain backward compatibility with existing
  models that don't have the extra H2O column, the readmodFC
  counts the number of data values on each line of the .mod
  file. If it is 5 the 5'th is assumed to be H2O. If it is 4,
  the H2O from the .mod file is set to zero. The H2O vmr from
  the .vmr file is only overwritten if the H2O from the .mod
  file is > 0 

GFIT  Version 2.33.0     8 Mar 2006    GCT
  Changed abscoh.f to comment out all the code that used to
  do the O2 super-Lorentzian lineshape and the sub-branch
  strength corrections in the 1.27 micron band. Rebecca's
  new O2 linelist should now account for these.

GFIT  Version 2.32.0    28 Feb 2006    GCT
  Changed the format of the .ray file in two respects:
1) Added the variable "bend" the angle through which the
  ray was deviated by refraction. This necessitated 
  changes to both gsetup and gfit
2) Added an additional sig fig to the slant paths.
  so that you now get 1.0007 instead of 1.001.
  This affects only gsetup and diurnret (gfit does an unformatted read).

GFIT  Version 2.31.0    26 Feb 2006    GCT
  Fixed a minor bug in tlpath by which the slant path at the
  highest level was noisy. This was because the ray wasn't
  correctly terminated after passing through the TOA. In
  practice this makes very little difference.
  Also decided to terminate the ray-tracing at each level
  to make the slant-path vary more smoothly with altitude
  and zenith angle. This fixes the discontinuity that
  Zhonghua saw at 60 deg in 2004.

GFIT  Version 2.30.0    26 Feb 2006    GCT
  Refined subroutine slpath so that all the height parameters
  are altitudes above the surface, not radii. I figured that
  this would have less rounding error because many of the
  operations inside slpath involve subtracting similar altitudes.
  This requires an additional parameter (Radius Of Curvature)
  to be passed to slpath. Because of this, I decided to
  rename it tlpath.

GFIT  Version 2.29.1    29 Jan 2006    GCT
  Noticed that diurnret.f was producing NANs whenever the
  slant column errors exceeded 1.0e+38, which can happen if
  you try to fit a highly abundant gas in a completely
  blacked out window. This is because the
  G77 compiler immediately sets these values to INF on read.
  Worked around this problem by reading the slant columns
  and their uncertainties into double precision arrays.
  The matrix inversion, however, can still be single-precision
  because the slant columns are divided by the slant column
  errors before use.  Note that this problem never happened
  under Sun Fortran because of its "extended precision" feature.

GFIT  Version 2.29.0    29 Jan 2006    GCT
  Noticed some INFs in the .col files when fitting highly
  saturated windows in the simulated, noise-free, mars
  spectra. This was due to both the first and last point
  in the "measured" spectrum being zero, which caused the
  intial continuum level to be set to zero, from which it
  never recovered.  Fixed this by setting the initial CL=1 if CL<1


GFIT  Version 2.28.1     6 Jan 2006    GCT
  Noticed an occasional NaN for the calculated S-G shift.
  Tracked this down to the division by "cntuum", which can
  occasionally = 0

  Fixed this by multiplying all the terms by cntuum.
  The new section of code in gfit.f looks like this:

c This section of code added by GCT 050113 to calculate solar shift
c Compute solar and gas shifts. Modified 20060106.
       tns=0.0
       tds=tiny
       tng=0.0
       tdg=tiny
       nop=(nmp+1)/2
       do k=2,nmp-1
          cntuum=cx(n1)*(1.+cx(n2)*float(k-nop)/(nmp-1))
          residual=obsrvd(k)-calcul(k)
c
c Solar Shift (pd(k+n1*nmpfp) is the solar transmittance spectrum)
          gs=cntuum*(pd(k+1+n1*nmpfp)-pd(k-1+n1*nmpfp))
          tns=tns+gs*residual
          tds=tds+gs**2
c
c Gas shift  (calcul/solar is the gaseous transmittance spectrum)
          gg=cntuum*
     &(calcul(k+1)/pd(k+1+n1*nmpfp)-calcul(k-1)/pd(k-1+n1*nmpfp))
          tng=tng+gg*residual
          tdg=tdg+gg**2
       end do     ! k=2,nmp-1
c       write(*,*) 'solar-gas shift=',tns,tds,tng,tdg,residual,cntuum,
c     & 2*gint*(tns/tds-tng/tdg)/frqcen

c  Solar-Gas shift is the difference of the solar shift and the gas shift.
c  Divide by frequency to normalize to a dimensionless stretch which
c  should be the same for all windows. Multiplied by 10^6 for ppm.
       sgshift=1E6*2*gint*(tns/tds-tng/tdg)/frqcen


GFIT  Version 2.28.0    26 Dec 2005    GCT
  Included a T-dependent pressure shift in abscoh.f:
c      vcent=(freq-fzero+dble(pshift*p(i)))/grid
      vcent=(freq-fzero+dble(pshift*p(i)*trat(i)**0.75))/grid  ! 05-12-26
  This improves fits to the low-T Park Falls CO2 bands.

GFIT  Version 2.27.0    18 Dec 2005    GCT
  Implemented a new, improved, ZPD time equation into runlog.f. 
 Like the previous version, it handles single scans
 and averages. Additionally, the new version handles:
1) when OPUS flips a REV scan, making it appear as FWD.
2) digitally-filtered (i.e. decimated) i'grams.
3) spectrum-only cases (NIP is undefined).

  To do this, I had to bring the parameter
  DFR (Digital Filter Reduction) from the Bruker header.

GFIT  Version 2.26.2    10 Dec 2005    GCT
  Introduced the parameter "tel_mag" to the sunrun file.
  This is the telescope magnification. This allows 
  calculation of 
      fovo=fovi/tel_mag
  in the main part of create_runlog, avoiding all the
  site-specific hard-wired statements inside rdsphead.f
  For most instruments tel_mag = 1.0  The exceptions
  are ATMOS (=2.7), ACE (=4.8), Kitt Peak (=50)

  Note that tel_mag itself is *not* passed through to
  the runlog. But its effect is seen in the fovo-value.
  
GFIT  Version 2.25.0    41 Oct 3005    GCT
  Changed the variable on which the vertical levels
  are defined from geometric to geopotential altitude.
  This simplifies the subroutine readmodFC.f
   - doesn't need the variable "radius"
   - doesn't need latitude (used to compute gravity)

  This makes the .mod file completely site-independent.
  Essentially, by using geopotential altitude, we are
  deferring treatment of the latitude and altitude
  dependences of gravity until later, when we know
  the site specific information.

  The disadvantage of this approach is that subroutine
  slpath gets messier because the geopotential altitudes
  must be converted to geometric altitudes internally.

  To first order, this change shouldn't make any difference
  to the retrieved columns. We're are just changing the level
  altitudes.

GFIT  Version 2.26.1     1 Dec 2005    GCT
  Changed gsetup to write all the warning messages to files
  (gsetup.rpt; write_mav.rpt) rather than to screen. This
  speeds things up when the runlog contains 78,000 spectra.
  The only thing now written to screen is a progress
  report every 1000 spectra.

  Ditto for create_runlog. Also deleted the parameter
  "minblock", which produced a warning for every single
  slice-ipp'd spectrum because they have only 8 data
  blocks and minblock was set to 13.

  And finally, I disabled the production of spt files.
  When you have 78000 spectra to fit over a wide window,
  the size of the spt files can be 100's of GB. 
  So now to produce spt files you must add "spt" to
  the command line of the .ggg file. The default is
  to *not* produce any.
  

GFIT  Version 2.26.0    26 Oct 2005    GCT
  Added the variable AIPL (Airmass-Independent Path Length)
  to the sunrun and runlog files. GSETUP uses this to add
  additional atmospheric path to the appropriate atmospheric
  levels. Previously, this had been hard-wired inside GSETUP.
  For Kitt Peak, AIPL=0.226 km, which represents 3% of the
  total vertical column.

GFIT  Version 2.25.3    26 Oct 2005    GCT
  Added two new variables to the sunrun and runlog files:
  SIA: Solar Intensity (Average)
  SIS: Solar Intensity (SD)
  This way, they get passed through to the gggavg output
  file, where they will be useful for filtering the data
  and exploring the column quality versus SIS/SIA trade-off.
  This makes all existing runlogs obselete.

GFIT  Version 2.25.2    25 Oct 2005    GCT
  Implemented the read_sunrun and write_sunrun subroutines,
  through which all I/O to the sunrun files must pass.
  Also re-named the readrunlog and writrunlog to
  read_runlog and write_runlog.

GFIT  Version 2.25.1    20 Oct 2005    GCT
  Fixed a bug: Armin noticed that when fitting ratioed laboratory
  spectra of acetaldehyde, the interfering H2O lines hadn't
  cancelled properly. Since there was less H2O in the CH3CHO
  spectra than the empty cell spectrum, these H2O lines formed
  upward-going spikes in the ratio spectra. Armin tried to fit
  them by using a -ve vmr in the .mav file, but this caused the
  H2O lines to simply disappear.  There were two reasons for this:
  1) The if(tnu.lt.tnulst) statement didn't take into account the
   possibility that tnu could be -ve.  Replaced tnu with abs(tnu)
  2) The search for the level with the most gas also
  didn't take into account the possibility that the
  slant column could be -ve. Fixed this in a similar fashion.

  Also noticed another bug. When fitting a spectrum without
  any target gases, the cl got set to 1.0, which caused PFIT
  to plot the measured and calculated spectra in signal space
  rather than transmittance space. The reason for
  this was to allow the total air column to be outputted.
  But this complicates the code and was therefore removed.


CREATE_RUNLOG  Oct 2005 GCT
  Decided that the create_runlog was a mess: too many hard-wired
  variable values. Decided instead to read out all the site-specific
 data into an input file (the sunrun file). This permists a large
 simplification of create_runlog.

The create_sunrun program is simply a means of creating the sunrun
file.  This file could also be created manually -- it is not
necessary to use the sunrun program to do this. The important thing
is the output file, not the program.
Each site/instrument will need its own version of create_sunrun.
The version that I am distributing is really just a template.

In contrast, create_runlog works for all sites and all spectral
formats.  This is possible becase all the information that might
be instrument/site dependent, or missing from the spectrum header,
has been farmed out to the sunrun data file. This allowed me to
remove all the site-specific constants (e.g. lat, long, alt)
from the create_runlog code.  There will only be one version of
create_runlog.f


GFIT  Version 2.25.0    17 Oct 2005    GCT
  Replaced cia.101 with the fcia.101 and scia.101 linelists.

GFIT  Version 2.24.3    16 Oct 2005    GCT
  Increased parameter mmode from 20 to 30 to allow for PAN,
  which has 27 fundamental vibrational modes. Note that this
  change has to be made in 2 different places: gfit.f and abscoh.f
  Also changed the format-statement in read_isotop.f that reads
  the mode frequencies and degeneracies.

  abscoh now does a pre-screening of the linelist files to
  make sure that all linelists are present and correct.
  The intent is to avoid situations where abscoh crunches through
  atm.101 for 20 minutes only to crash on a subsequent linelist.


GFIT  Version 2.24.2     6 Oct 2005    GCT
   Defined the environmental variable GGGPATH.
   This allows all the hard-wired paths to be removed from the
   source code (by use of the Unix "getenv" command) and from
   the Makefiles, making the code much more portable.

   This means that the user must define the environmental
   variable. The way that this is done depends on whether
   you are running b-shell or c-shell
      export GGGPATH=$HOME/ggg  (in .bash file)
   or
      setenv GGGPATH $HOME/ggg  (in .cshrc file)

   You can check whether this has been done sucessfully, 
   by typing
      echo $GGGPATH
   after which you should see
      /home/toon/ggg


GFIT  Version 2.24.1    18 Sep 2005    GCT
   Changed the way that the "Average Totcon" is calculated.
   Previously it was a straightforward (i.e. unweighted) average
   of the totcons derived from individual spectra. The problem
   with this is that a single really bad spectrum can produce
   a outlier (with a large error bar) that disturbs the mean.

   The new method uses a weighted average.
   This does not affect the content of the .col files since
   the "Average Totcon" valuess are only printed to the screen.

GFIT  Version 2.24.1    13 Sep 2005    GCT
   Changed abscoh.f to accomodate the new scia and fcia linelists.
   This includes defining logical variables (scia & fcia) and
   additing code to multiply the line strengths by and additional
   factor of density.
   A more in-depth description of this change can be found in
   the file ll.history for this same date.

GGGAVG    version 2.5.0     3-Sep-2005   GCT
   A major revision that accomodates the new runlog format in which
   InGaAs and Si (HgCdTe and InSb) are both in the same runlog file.
   Assumes runlog is chronological so that different runlog records
   with the same time are treated as equivalent. For example, runlog
   allows o2_7885 to be averaged with o2_13082 even though they
   correspond to different (alternating) records of the runlog file.

   This new scheme will automatically accomodate instruments with
   N (>2) detectors obtaining spectra simultaneously, whereas the
   old scheme (parallel runlog files) would have required software
   mods to be able to do this.

   Also simplified gggavg such that if a .col file is missing,
   it crashes, whereas previously it slickly continued with the
   next .col file in the multiggg.bat file. I prefer to know if
   something is wrong. If the header part of the .col file exists,
   but there are know data records (e.g. if the frequency range of
   the window doesn't match the spectrum) then it counts those as
   missing data.

GFIT  Version 2.24.0    29 Jul 2005    GCT
   Changed gsetup, readmodFC, writemav, abscoh, and gfit so that d(),
   the total number density is now in units of molecules.cm-3 instead
   of molecules.cm-2.km-1. This makes the code somewhat messier, with
   some extra factors of ckm2cm=1.0E+05 in several places, but this
   has two advantages:
   1) the densities in the .mav file are in sensible units
    (molecules.cm-3) which is what people expect.
   2) it simplifies the use of CIA linelists in which the line
    intensities have units of cm-1/(molec.cm-3)^2.cm. You simply
   multiply by an extra factor of d().

   I also changed some variable names in abscoh.f.
   SX --> SXCGS
   Strength X Concentration of molecules in the Ground State
 
   Also changed the organisation of the VAC array.
   Previously, the non-target VACs were stored in VAC(*,*,ntg+1)
   Now they're stored in VAC(*,*,0)
   The target VACs are still in VAC(*,*,jtg),jtg=1,ntg) as previously.
   This makes it simpler to initialize the targmol" array and makes it
   easier to identify the non-target gas lines in the abscof.rpt file.

GFIT  Version 2.23.0    24 Jun 2005    GCT
   A major upgrade to GFIT and GSETUP.

   Previously, gsetup.f contained code which looked at the
   spectrum/runlog names to figure out whether a new model
   or vmr was needed. And if so, gsetup read the appropriate
   .mod and .vmr files and created a .mav file. GFIT
   contained a similar piece of code that looked at the
   spectrum names to decide when it was necessary to
   read a new .mav file and, if so, what it was named.

   There were two problems with this:
   1) The code was highly instrument-specific containing
     implicit assumptions about the spectrum/runlog names.
   2) A slight inconsistency between the code segments in
    gsetup.f and gfit.f would result in the wrong mavfile
    being used or the dreaded "Mavfile Missing" error message.

   In the new upgraded version, all the .mav files are
   concatenated into a single file named runlog.mav
   (which is the name already present inside the .ggg file,
   but which was ignored for several years).  This way,
   GFIT and GSETUP doesn't have to figure out what the
   names of the .mav files are. The new .mav file also
   contains the names of the spectra that trigger the
   reading of the next T/P/VMR data block. So GFIT simply
   compares the current spectrum name to the one in the
   .mav file to figure out when to read the next data block.
   So essentially, all the instrument-specific code inside
   GFIT that used to mirror the code in GSETUP has now gone.

   Of course the code inside GSETUP that decides when to
   create a new T/P/VMR data block is still pretty ugly
   and instrument-specific, even though it not longer has
   to decide what to name the .mav files. But GFIT is now
   much cleaner and simpler, which was the main goal.

   It is also now very simple to automatically use monthly
   .mod or .vmr files. If, for example, your spectra are named
       xyzYYMMDDxxxx.nnn
   and your models are named
       wsYYMM.mod
   then simply using the statement (inside GSETUP)
       newmodname='ws'//specname(4:7)//'.mod
   will cause the right monthly model to be automatically used
   without additional logical variables and if-statements.
   And if you wanted daily models (and/or vmrs), you simply
   name them wsYYMMDD.mod and change the statement to
       newmodname='ws'//specname(4:9)//'.mod
   There is now no reason you couldn't use hourly models,
   provided the spectra are appropriately named.

   During the course of this, I decided to simplify GFIT by
   removing the variable NLOW: the lowest level for which
   the slant paths are non-zero. Previously, absorption
   coefficients were not computed for levels 1 to NLOW,
   which saved a little time for the balloon observations.
   But I decided that the additional complexity of the
   code wasn't justified by the marginal speed improvement.

   Also removed the variables mss, nss, jss, since these
   are now identical to mtg, ntg, jtg because the number
   of sub-strings following the : in the command line in
   the .ggg file now must equal NTG. And if it doesn't (e.g.
   unidentified or repeated sub-strings) then GFIT now stops.

   This upgrade doesn't affect the answers returned by GFIT.
   It is simply organizational.


GFIT  Version     22 Jun 2005    GCT
   Made three changes to pfit.pro

  1) Fixed a bug by which when you set xmin to
    a value, and then did X_Left, the highest
    x-value didn't change, so the window got wider. 
  2) Added a widget button "cm-1/nm" which allows
    the uses to toggle the x-scale between cm-1 and
    nm, facilitating comparison with spectra plotted
    as a function of wavelength (e.f SCIAMACHY).
  3) Added X_Zoom and X_Anti-Zoom buttons.


GFIT  Version 2.21.4    18 Jun 2005    GCT

   GFIT no longer uses subroutine clistindex. It is simpler
   to do the test in the do-loop that reads the isotopolog file.

   I also re-arranged the way that the absorption coefficients
   are stored in arrays VAC amd SPXV. Instead of having
   the NTG target gases, the non-target gases, and finally
   the solar spectrum, I now have the non-target gases,
   the target gases, and finally the solar spectrum.

   This change simplifies the main program since the
   TARGMOL of the non-target gases is already known
   (=0) before the number of target gases is determined.
   It also makes it easier to identify the non-target
   gases in the ABSCOF.RPT file -- they are gas zero.

   Also replaced the 2-D array CONC(NTG,NLEV) by the
   1-D array CP(NLEV) (Concentration Profile). Since
   the vmr file is no longer overwritten by the VPFs,
   there is no longer any need to pre-compute and store
   the concentration profiles. They are now computed
   immediately before they are used, allowing each target
   gas to be done separately.

GFIT  Version 2.21.3     8 Apr 2005    GCT
   As part of my crusade to conduct all I/O through
   subroutine calls (so that if the file format changes,
   you only have to edit one or two subroutines), I wrote
   the subroutuine read_isotop, which reads the file
   isotopologs.dat.  There are currently three different
   places from which this particular file is read:
     gfit
     abscog
     gsetup
   [I'm not sure why it is read from both gfit and abscog,
   but it is].

   At the same time, armin introduced two additional
   parameters to the file isotopologs.dat:
      delta    describes the isotopic fractionation
      epsilon  describes its altitude dependence

   At the same time, I wrote subroutine write_mav,
   called from gsetup, which writes the .mav files.
   This subroutine calls read_isotop, so that it knows
   which isotopic fractionations to multiply the vmrs by.

   write_mav has a couple of extra features that weren't
   present when the isotopolog file was read directly from
   gsetup.
     - checks that all the gases in the .vmr file are also
       in isotopologs.dat
     - checks that all the gases in isotopologs.dat are
       also in the .vmr file.

GFIT  Version 2.21.2     4 Mar 2005    GCT
   As part of my crusade to simplify the GGG code, to make
   it more manageable, I am removing options that are rarely
   used but which complicate the code in certain places.
   So I removed two non-essential options from gfit:
   1) Excluding a gas by putting a "!" in front of its name
   2) Fitting "other" gases together as one gas.
   These options greatly complicate gfit.f and clistindex.f
   This allows the nnt variable to be removed, since it is
   now always = ntg+1

GFIT  Version 2.21.1    21 Feb 2005    GCT
   Replaced the code near the bottom of gfit.f that writes
   the .spt file with a subroutine. This makes gfit.f a bit
   shorter and tidier.

GFIT  Version 2.21.0    28 Jan 2005    GCT
   Created a new integral.orb levels file with 151 levels
   (0 to 150 km) with the correct fall-off of MMW above 85 km.
   The previous version had a constant 28.960 at all altitudes.

   Increased the maximum number of layers (MLEV) from 150 to
   150 to allow a level file extending from 0 to 150 km.

   Changed the variable names mlay, nlay, ilay inside abscog.f
   to mlev, nlev, ilev, to match those in gfit.f.

GFIT  Version 2.20.5    23 Jan 2005    GCT
   Renamed the linelists from xxx.h92  to xxx.101
   where the value of the extension is the number
   of characters per record.

   GFIT now reads the numerical value of the extension
   to determine the record length rather than assume
  that it is 101.

   This has several advantages:
  1) It avoids confusion between the PC (.102) and Unix (.101)
    versions of the same file. GFIT will now handle either file
    type on either machine type provided that they are properly
    labeled. No need to run dos2unix or unix2dos any more.
  2) ABSCOG no longer has the record lengths hard-wired in the code.
  3) It allows use of the new HITRAN04 linelist, which has a new
    162 character per line format, without any further code changes
    since the first 72 characters are identical to the old format. 

GFIT  Version 2.20.4    13 Jan 2005    GCT
   Added code to GFIT for estimating the doppler stretch/shift
   between the solar and atmospheric lines. This is based on the
   spectral residuals and the known solar and atmospheric spectra.
   Basically, the new code calculates separately the shifts of
   the atmospheric and the solar lines. These two shifts have
   opposite signs since GFIT has already fitted the average
   shift for all lines. The desired atmosphere-solar shift
   is simply the difference between the two.
 
   This is not as accurate as actually fitting the shifts, since
   we're assuming a linear relationship between residual size and
   shift. But since we only want this information for diagnostic
   purposes (to tell whether the suntracker was pointing at the
   axis of solar rotation or not) this is probably good enough.

   Estimating the atmosphere-solar shift in this manner has
   several advantages over fitting it:
 1) Simplicity.  Doesn't increase the number of variables to be
   fitted nor does it change the answers (for CO2, O2, etc).
 2) Robust. Fitting shifts introduces secondary minima to the
    cost function.
 3) Speed. Fewer variables per iteration. The shift is calculated
   only at the end, after the fitting has already converged. 

  This code was tested by adding a known perturbation to the
  solar spectrum by adding:
         dopp=dopp+2.E-06
  immediately before the call to the solar_spectrum subroutine.
  This caused a shift in all the solar lines and a worsening of
  the rms fit. The difference in the solar_minus_atmosphere shifts
  with and without the DOPP perturbation was verified to be equal
  (to within 5%) to the window center frequency multiplied by the
  perturbation.

GFIT  Version 2.20.4    13 Aug 2004    GCT
   Hartmut found a bug in solar_spectrum.f, and also the older
   versions of this subroutine (e.g. sunspect). The bug causes
   the solar line to appear one grid point to the left of their
   position in the solar linelist.

   I never spotted this bug myself because I use GFIT to create
   the solar linelist in the first place, and then GFIT again
   to use it, so the error cancels. Hartmut discovered the error
   by comparing the GFIT output with that from the OCO code.

   After fixing this, I shfited every line in  solar_dc.101
   by 0.66E-06*freq so that the solar lines would remain in
   the correct location.

GFIT  Version 2.20.3    24 Jun 2004    GCT
   I fixed a bug that was making GFIT very slow. As I suspected,
   the problem was related to the representation of the HCl cell.
   
   The slowness problem was related to the statement in abscog.f
         tnulst=1.0e-7*sqrt(p(1))
   tnulst is the threshold for skipping lines. If the predicted
   equivalent width of a line is < tnulst, it is skipped.
   P(1) is the pressure of the lowest level (in atmospheres),
   or it used to be before I introduced the extra layer
   representing the cell.  With the cell, p(1)=5 mbar,
   so tnulst was 14 times smaller than it should have been
   which meant that it was doing a Voigt calculation for
   nearly every line in the linelist.
   
   This raises the question, why sqrt(p) ?  Why not simply
    tnulst=1.0e-7
   I guess that this is because a line of a given equivalent
   width is narrower, deeper and hence more noticeable in the
   stratosphere than in the troposphere
 
GFIT  Version 2.20.2    24 Jun 2004    GCT
   Added the folowing to the bottom of the code fragment
   that calls solar_spectrum
      else
         call vmov(unity,0,spxv(k1),1,ncp)
      endif
   Without this, array spxv(k1), the solar transmittance spectrum,
   contains all zeros in cases when the solar spectrum isn't computed.
   This fixes a bug created in V2.19.5.

GFIT  Version 2.20.1    24 Jun 2004    GCT
   Changed all the 1.e-38 inside hfti.f (6) and vsubs.f (1)
   to 1.e-37 because the F90 compiler complained that 1.e-38
   was 'out of range'.

GFIT  Version 2.20.0    23 Jun 2004    GCT
   Fixed a bug inside abscog.f by which the FPREV array
   was initialized once at the very beginning of ABSCOG,
   whereas it needs to be re-initialized for every linelist. 
   This bug does not cause the wrong answer, it simply
   causes GFIT to stop, issuing the statement
   "STOP multiple pseudo-lines at same frequency"

RUNLOG     Version 6.5.0      3-Jun-2004   GCT
  Derived a new simpler, more general equation for the effective
  ZPD time of an OPUS spectrum.  It works for all possible cases:
  single scans (forward or reverse) or multiple scans forward-only
  or forward-reverse).  It also seems to work for different flavors
  of OPUS (120M, 120HR, 125HR) and for different sampling rates per
  laser fringe.
        gmtstart = gmtoff+dble(hh+(mm+ss/60.)/60.)  ! Scan start time
        t_s = 0.9*lasf*(1/res+1/phr)/vel/1000       ! Single scan duration
        gmt = gmtstart + (dur/2 + t_s*(dfloat(pkl+prl)/nip-0.5d0))/3600
  This equation assumes that:
  1) prl=0 for forward-only scans
  2) pkl=0 for reverse-only scans
  3) pkl+prl=nip/2 for forward-reverse scans
  Note that for forward-reverse scans the equation simplifies to
       gmt = gmtstart + dur/2/3600
  Note that this equation is independent of NSS (the number of scans)
  The equation assumes that NSS=NGFW+NGBW, so it won't work if
  there were bad scans that were omitted from the average.

  To do this I had to change rdopushead.f to be able to handle
  the different ways that the VEL parameter is written into the
  OPUS header. In the older Brukers, VEL is an integer code that
  points to the correct element of the array
      data velocity/0.0,0.0,4.0,5.0,7.50,10.0,20.0,40.0,60.0,80.0/
  For example, in the Lauder 120M, VEL=7 means 20.0 kHz.
  But in the Caltech 125HR, VEL is the actual velocity (e.g. 10.0 kHz).
  The following if-statement looks for a '.' in the first 4 characters
  of the velocity field. If it finds one, it assumes that the value
  is the actual velocity. If it doesn't gfind a '.', it assumes that
  it is an integer code value.
             call getopusparval(luns,ipoint(i),'VEL',iend,mrs,i2val,rs)
             ldot=index(cval(:4),'.')
             if(ldot.gt.0) then       !  new Brukers
                read(cval(:4),*) vel
             else                     ! old Brukers
                read(cval(:4),*) ivel ! Velocity Code
                vel=velocity(ivel)
             endif
  This way, the programs that call rdopushead don't have to worry
  about the velocity.

RUNLOG     Version 6.4.0     22-May-2004   GCT

  Implemented JFB's improvements into getparval
  1) Pass MRS as an argument
  2) Read data type (allows byte reveral inside getparval)
  3) Changed PARAM from C*4 to C*3
  4) Re-named it as getopusparval
  5) initialized loop-variable HEAD

  Also, reversed some of the changes made in version 6.1.4.
  Namely, we now have only one option in rdsphead.f for all
  OPUS files. The parameters that vary from instrument to
  instrument are now all collected into an if-then-else block.

  Removed the option of triggering the interferogram runlog
  by typing the instrument type in upper case. Now you invoke
  this option by using uppercase in the name of the sunrun
  and the files inside.

RUNLOG     Version 6.3.1     10-May-2004   GCT
  Implemented the option of creating a runlog pointing
  to the Bruker interferograms (rather than the spectra).
  To implement this option simply type "CA" rather than "ca".
  This makes it trivial to browse the Bruker interferograms
  using the newspect.pro IDL program.


GFIT  Version 2.19.6     9 May 2004    GCT
   Changed GFIT to add an additional layer to the .mav file that
   represents the HCl gas cell internal to the Bruker IFS125HR.
   This extra level is assigned an altitude of -9.9 km.

RUNLOG     Version 6.3.0     24-Apr-2004   GCT
  Worked with Torstens in Bremen to define separate code
  sections in rdsphead.f for the Bremen (bm) and the
  Spitsbergen (sp) spectra.

  Also included two additional arguments to rdopushead.f
  NIP is the number of interferogram points
  PKL is the interferogram peak location.
  This allows use of the equation
    zpd_time=start_time+dur*pkl/nip
  for forward scans (Bremen does fast-return scans).

  Note: Bruker defines two NPT parameters in the spectrum
  headers. Depending on the data block, NPT can mean the
  number of spectral points OR the number of interferogram points.


GFIT  Version 2.19.5     9 Apr 2004    GCT
   Changed the subroutine solar_spectrum.f to output
   the solar transmittance spectrum instead of the
   solar optical thickness spectrum. This was so that
   I could try to do the Minnaert correction to the
   solar lines, as suggested by Frank Hase.

   At the same time, I fixed GFIT to separately output
   the solar and the non-target gas transmittances,
   so that they can be separately plotted by PFIT.
   This required changes to fm.f and gfit.f

   This is computationally less efficient since the
   solar spectrum must be exponentiated separately
   from the non-target gases, whereas previously they
   were exponentated together. Also, the new way uses
   additional memory, to separately save the solar
   and non-target gas transmittances/absorptions.

GFIT  Version 2.19.4     6 Apr 2004    GCT
   Included the integer variable "solar_flag" in gfit.
   This changes the frequency calibration of the .spt
   output files.

   When solar_flag=0, GFIT presents the spectral fits in the
   rest frame of the atmospheric lines, so that the lines
   appear at the frequencies cited in the HITRAN linelist,
   even though a large frequency shift might have been applied.
   This makes it easier to identify which line is which.

   When the solar lines are the primary interest, setting
   solar_flag=1 is recommended. This way, all the solar lines
   appear to lie at the right frequencies (those listed in
   solar.h92), even though they might actually be substantially
   shifted (e.g. due to Earth-Sun doppler shifts).

   Note that, in general, it is impossible to display a
   spectrum with both the telluric and solar lines at their
   rest frequencies. You have to choose which one you want.

RUNLOG Version 6.2.0    14 Mar 2004    GCT
   Decided that the variables LASF and WAVTKR should be part of the
   runlog. LASF is now needed by GFIT to perform the air-to-vacuum
   correction (previously, it was hard-wired to 15798 cm-1). WAVTKR
   is needed by GSETUP to do the ray-tracing properly (refraction
   depends on the tracker wavelength) and was hard-wired to 9900 cm-1.

   The addition of these two parameters to the runlog will generalize
   the GGG code to accomodate instruments that don't have lasers at
   15798 cm-1 or Si detectors for their active trackers (e.g. TES,
   ACE, LWBI).

   Since I was adding new variables to the runlog, I decided to
   re-format it slightly to reduce the risk of successive numbers
   running into each other. An additional character was allowed
   for both latitude and longitude.

   At the same time, I decided to convert all the real variables
   that pass through read/writrunlog to double precision. This is
   part of the OCO philosophy that all scalar variables should be
   double preciosion -- only large array are stored as R*4. On a
   64-bit computer there no speed advantage to R*4.

   While doing this I also decided to move all the MkIV-specific code
   from rdsphead to a new subroutine (rdmkivhead) that is called by
   rdsphead. Eventually, I hope to have separate subroutines for all
   instruments and spectral formats, considerably simplifying rdsphead.

GGGAVG    version 2.4.0    11-Mar-2004   GCT
   Added an additional auxiliary parameter: pins
   So now naux=15.

GGGAVG    version 2.3.1    23-Feb-2004   GCT
   Now calls the new readrunlog subroutine, which necessitated
   various variables the were previously declared as R*8 to be
   changed to R*4.

GFIT  Version 2.19.2    10 Mar 2004    GCT
   Bhaswar fixed the Makefile such that you no longer have
   to "cd ../comn" in order to compile the common files.
   Now it can all be done from the source (e.g. gfit) directory,
   even under Linux. 

GFIT  Version 2.19.1     2 Feb 2004    GCT
   While fitting the Caltech Bruker spectra, I noticed that quite
   large frequency shifts were needed, and that these changed by up
   to 24 mK depending on whether the instrument was evacuated or not.
   The problem was that the air-to-vacuum frequency correction was
   not being done properly. The air-to-vacuum frequency correction is
   zero at 0 cm-1 and at 15798 cm-1, and has a maximum at ~8000 cm-1,
   where it can reach 0.024 cm-1, which is more than 1.5 points in a
   typical spectrum. Over the 0-4000 cm-1 region covered by MkIV, the 
   vacuum-to-air correction increases fairly linear with frequency,
   so I had been taking it into account by simply fudging the spectral
   point spacing in rdsphead.f.  I got away with this for 15 years, until now.
  
   Unfortunately, over the 4000-15000 cm-1 region, the vacuum-to-air 
   correction is far from linear with frequency, so a more complicated 
   correction scheme is needed in which the correction is actually
   performed in GFIT because it depends on the window being fitted.
   To do this properly, you must store in the runlog the T/P/H inside
   the instrument, in addition to the outside T/P/H.

   Adding extra columns to the runlog means changing the two subroutines 
   readrunlog.f and writrunlog.f and all the other programs that call them.
   At the same time that I was making this change, I made a several others:
   runlog now creates separate files for the InGaAs and Si detectors. This 
   prevents GFIT from wasting time trying to fit the A-band in InGaAs spectra, 
   or CO2 in Si spectra. And since runlog does the Si spectra first, and 
   remembers the date and time, the absence of this info in the InGaAs spectra 
   isn't a problem (no more cut-and-paste anomalies :).
   
   I also changed the format of the sunrun files so that the T/P/H info can 
   be entered here. This avoids having to edit the runlog to enter this 
   information. It also means that you only have to do it one per scan, rather 
   than twice (once for InGaAs and once for Si).
   
   I also changed rdsphead so that it has separate code sections for the 
   Caltech,  Lauder, and Spitsbergen. This avoids having to remember to 
   edit the hardwired latitudes, longitudes, etc, inside rdsphead.f each time 
   we switch our analysis from one instrument to another. It also means that 
   instead of entering 'op' as the instrument type there are now separate 
   mnemonics for Caltech (ca), Lauder (ld) and Spitsbergen (sp). Then I 
   packaged together all the duplicated OPUS-specific code into a new 
   subroutine called rdopushead.f, which is called by rdsphead.f
  
   To check that the air-to-vacuum correction was being done correctly,
   I analyzed Caltech Bruker spectra acquired on Jan 5, 2004.
   In particular, I looked at scans 12-17 during which the pressure
   inside the Bruker was allowed to increased from 0.25 mbar to ambient,
   while keeping all the other acquisition parameters unchanged.
   These runs provide a good test that GFIT is performing the
   air-to-vacuum frequency correction correctly.

   The two tables below show the retrieved frequency shifts (mK) for
   various windows with and without the air-to-vacuum corrections.
   The column labeled "Pres" contains the pressures (mbar) inside
   the Bruker.  The columns on the right are labeled with the
   center frequencies (cm-1) of the windows that were fitted.

   Retrieved shifts With air-to-vacuum correction:
   Spectrum             Pres  4039  4250  6076  6339  7880 13082 14465
   ca20040105s0aa0x.12  0.25  -1.2  -0.3   0.6  -0.1  -2.0   0.1   8.5
   ca20040105s0aa0x.13  0.42  -1.2  -0.3   0.6  -0.1  -2.0   0.1   8.5
   ca20040105s0aa0x.14 320.0  -0.9  -0.7   0.0  -0.7  -2.6  -0.2   8.3
   ca20040105s0aa0x.15 325.0  -1.0  -0.8  -0.1  -0.8  -2.8  -0.4   8.3
   ca20040105s0aa0x.16 992.7  -1.0  -0.2   0.7  -0.1  -2.0   0.2   8.2
   ca20040105s0aa0x.17 992.6  -1.0   0.0   1.0   0.3  -1.5   1.0   8.8


   Retrieved shifts Without air-to-vacuum correction:
   Spectrum             Pres  4039  4250  6076  6339  7880 13082 14465
   ca20040105s0aa0x.12  0.25  -1.2  -0.3   0.6  -0.1  -2.0   0.1   8.5
   ca20040105s0aa0x.13  0.42  -1.2  -0.3   0.6  -0.1  -2.0   0.1   8.5
   ca20040105s0aa0x.14 320.0   2.6   3.0   4.9   4.3   2.9   3.7  10.5
   ca20040105s0aa0x.15 325.0   2.6   3.0   4.9   4.3   2.9   3.6  10.5
   ca20040105s0aa0x.16 992.7  13.3  14.7  20.3  20.1  20.5  15.9  17.1
   ca20040105s0aa0x.17 992.6  13.3  15.0  20.6  20.5  21.0  16.7  17.7

   Ideally, with the air-to-vacuum correction, all the shifts should
   zero.  In practice, the air-to-vacuum correction reduces the
   frequency shifts from over 20 mK to less 2mK, with two exceptions:
   1) The B-band (14465 cm-1) appears to be shifted by about +8 mK with
     respect to the other bands. This is probably just a systematic
     line position error within this band, although it is suspicious
     that the pressure shifts of each of these O2 lines is ~-8 mK/atm.
   2) The 7885 cm-1 O2 band is shifted by about -2 mK.

   So if in future (using the new GFIT) you see any frequency shifts
   that exceed 2 mK (apart from the B-band), then something is amiss.

   Now you are probably thinking that I'm a bit fussy about these
   frequency shifts. Why not simply fit them and then we don't have
   to worry?  Well, it is true that GFIT could fit a shift of 20 mK,
   provided that we have good initial guess for everything else.
   But in my experience, most of the cases that I've encountered
   where GFIT misbehaved (e.g. didn't converge) have involved poor
   initial guesses for the frequency shift. So I'm now a firm
   believer that if you can improve the initial estimate of any
   of the retrieved parameters, you should do so. 

RUNLOG     Version 6.1.4     29-Jan-2004   GCT
   Removed the ability to re-create the runlog without
   overwriting various parameters (e.g. zero level offset).
   This capability was rarely used, yet greatly complicated
   the source code.

   Also added the cabability of creating two runlogs in parallel
   for the Bruker InGaAs and Si detectors (similar to how the
   HgCdTe and InSb detectors are handled in the MkIV spectra).

   Decided to have separate entries for the CIT spectra and the
   Lauder spectra.  This avoids having to edit rdsphead.f every
   time that I want to switch from processing a batch of Lauder
   spectra to a batch of Caltech, or Spitsbergen spectra. This
   means that we no longer use the designation "op". Instead we
   use "ca" for Caltech, and "ld" for Lauder.

   To avoid unnecessary duplication of source code for the various
   OPUS format instruments, I created an new subroutine (RDOPUSHEAD)
   which is called from inside RDSPHEAD.

   Changed RDSPHEAD to return both the month (IM) and day of month
  (ID) instead of the doy of year (DOY). This provides more
   flexibility to change the content of the runlog.

RUNLOG     Version 6.1.3     21-Jan-2004   GCT
   Added the line zpoff=0.0  to runlog.f
   after Zhonghua noticed that the undefined variable was
   taking on non-zero values on his Linux machine.

RUNLOG     Version 6.1.2     11-Jan-2004   GCT
   Changed the statement
      delwav=delwav*0.9999946
   to
      delwav=delwav*0.9999946d0
   The former produced different answers on the Sun and Tiamaria.

 
GFIT  Version 2.18.1    11 Jan 2004    GCT
   Modified subroutine rbyte in two ways:
   1) To use a byte variable instead of a character
   2) to use a 2-dimensional byte array internally
     rather than 1-dimensional.
   These two things simplify the indexing, but still produce
   warnings due to data-type mis-matches.

GFIT  Version 2.18.0    22 Nov 2003   GCT
   I finally got fed up with using the linelist.siz file to
   keep track of the sizes of the various linelists.
   So I now use the Unix system command "statb" to return
   the size of the file in bytes, from which I can figure
   out the number of records.

   The downside with this is that the code will be less portable.
   Although it works on Sun Fortran and the Linux G77 compilers,
   there are probably others that are incompatible.
   This may cause problems on MS Windows environments, unless
   they have a similar command for determining file size.

   Switched from subroutine sunspect to solar_spectrum.
   The latter has an improved solar lineshape function and
   doesn't need the linelist.siz file any more.

RUNLOG     Version 6.1.1     30-Oct-2003   GCT
   Changed RUNLOG to allow the names of the sunrun and runlog files
   to be longer than 14 characters. This required changes to readmenu.f


GFIT  Version 2.17.0    22 Sep 2003    GCT
   Earlier this year, Dave Griffith made alot of changes,
   especially to GSETUP, Here's a summary of what he did:

Melding of Wollongong and GCT versions of GGG,  27 Jan 2003,  DG.
History.
During 2002 I made a number of changes to GGG to accommodate Wollongong
spectra and analysis.  I summarised these in August 2002 (see attached Email,
7 Aug 2002).  In Sept 2002 I melded my version with GCT's, sent to me 7 Aug 2002.
I had a hiccup with Gsetup which I couldn't trace (see below) and let
the whole thing slide, so I never finished it off and sent it.  Now (Jan2003) I have found
that problem, fixed it, and incorporated further GFIT changes from a newer version
sent by GCT in Jan 03.

The problem was with my Fortran compiler, Gsetup works fine if no optimisation
(or only local optimisation within program units is used, but gives problems
with full optimisation.  I have simply turned off optimisation to fix this. 
My F90 compiler is stricter and fussier about subroutine arguments etc.,
and therein probably lies the problem.

Comparison Aug02 - Jan 03 versions:
I found following routines had changes between Aug02 and Jan 03:
COMN - abscog (14Jan03), newdec (19Jun02), profzl (02Nov02)
 (note profzl is also in GFIT).
RUNLOG - rdsphead  14Nov02
GSETUP - readvmrFC (20Dec02)
GFIT- gfit (20Dec02), ietspe (03Nov02)

Changes to GCT Jan03 version to accommodate Wollongong changes
This includes the changes I made in Sept 02 plus GCT's update in Jan 03,
and should bring our two working versions together.
I have changed the version string in Runlog, Gsetup, GFIT and GGGAVG

COMN:  Abscog
line 106      &   xx,zz,               !DG Jan03 - removed vv, also declared as array
line 343-     zz=float(nprime)-3.0*delta_n         !DG Jan03 - delta_n is float

RUNLOG 
37:	root='g:'//dl            !DG Jan03
56:	1235 format(' Enter Spectral Format (e.g. "m4","op", "ws"): ',$)
	use "ws" for "Wollongong Solar"

rdsphead
itype is declared twice, removed one (line 32)
157-175:	Added block of variable declarations for ws spectra
300-467:	"ws" block completely rewritten
1176-end	subroutine rbyte uncommented.  RBYTE has a variable length parameter
                list which gives problems with my compiler if rbyte is linked from comn,
                but is ok if linked from the same file.

GSETUP
(Temporary:  I have commented out the writing of the cia.h92 filename to the *.ggg file
 until I have a copy of cia.h92)

19:	parameter (mspeci=150)      ! DG Jan03:  GCT has 134
25:	logical*4 newmod,newvmr,monthlymod,monthlyvmr           !DG Jan03
67:	$mavname*48,         ! output mav file name (for monthly Wollongong mav files)  
83-85:	$amonth*2,           ! month                         !DG Jan03
    	$datestring*8,       ! string to hold date for model and vmr filenames
     	$vmrext*4, modext*4  ! filename extension for model and vmr files
100:	 root='g:'//dl            !DG Jan03
223:	c  location of spt files
if(platform.le.1)then                                !DG Jan03
if(index(user,'toon').gt.0) then
         			write(19,88) root(:lrt)//'spt'//dl//'z'
  		else if(index(user,'sen').gt.0) then
write(19,88) root(:lrt)//'spt'//dl//'sen'//dl//'z'
else
write(19,88) root(:lrt)//'spt'//dl//'guest'//dl//'z'
endif
else
write(19,88) 'spt'//dl//'z'
endif

295-412, 442-448:  
Numerous changes to incorporate FASCODE format profiles including an option
to use monthly mean profiles. FASCODE profiles are distinguished by their
extensions, *.zpt and *.ref.   Gsetup gives a "monthly" menu choice if the
model/vmr for the requested day is not present.  Monthly models and vmrs are
called nn.zpt and nn.ref where nn is the month number, 01-12.  Gsetup then
selects the zpt/ref for the month of the requested spectrum.  When processing
several spectra, GFIT only recalculates absorption coefficients when the month changes.

readmodfc
41-76:	      if(index(modname,'.mod'.gt.0)then           !DG Jan03
Model format selected by extension of filename.

readvmrfc
14	parameter (mg=150,minlvl=250)     !DG Jan03
Increased minlvl to allow use of Arndt's 205 level input files
	Requirement that mg<minlvl is unnecessary since no longer equivalenced

27	if(index(vmrpath,'.vmr').gt.0)then          !DG Jan03
vmr profile format selected by extension of filename.
92-136:
elseif(index(vmrpath,'.ref').gt.0)then                       !DG jan03
minor changes cf Feb 2002 version in reading fascode profiles.

GFIT:

611-619:
        elseif(runlog(ir:ir+2).eq.'gws') then                 !DG Jan03
           newmav=runlab(2:6)//'.mav'
	     inquire(file=newmav,exist=newmav_exist)
	     if(.not.newmav_exist)then
	       read(runlab(4:4),'(Z1)')jj
	       write(newmav(1:2),'(I2.2)')jj
	       newmav=newmav(1:2)//'.mav'
	     endif
This code selects monthly profiles if day file is missing

End - I have added code for GASDEV and RAN1

GGGAVG
297-299:  Cosmetic format change which fell along the wayside from earlier version.
write(lunt,*)'=================================='
write(lunt,'(a,3f9.4)') 'Means     ',tsc/twt,1/sqrt(twt),tew
write(lunt,*) 

I believe all these changes should be transparent to you using Mk4 spectra,
and mostly the changes to code are in clear blocks.  In summary, the cahnges
I have made (and will add to the relvant descriptions with the source code) are:

ALL:  (actually Runlog and Gsetup only)
I have changed the root directory for PC opertation to simply "G:\"  (was D:\ggg\).
The idea is that the user maps the logical drive G: to the real ggg home directory
(eg. D:\ggg\) in windows, and it then doesn't matter where the ggg home directory
really is.  this way if it moves the changes are made on the user machine, not on
the software, or by re-mapping G: to another installation of ggg, the user can use
a different version.  (We have used some wierd vmr profiles for fire spectra,
for example, and its good to keep them separate from normal profiles.)

Runlog/rdspchead:
1. Changed the 2-character neumonic for Wollongong to 'ws' for Wollongong Solar.
  'gr' can be reserved for "standard" Grams, but our files have quite a bit of
   customised header and footer information in them which runlog reads.
2.  Many changes to the 'ws' section of rdsphead to get all the runlog info
    more reliably.
3.  I have defined the actual bandpasses where there is usable signal, so that
   GFIT will not attempt to fit regions at the edge of the bandpass where there
   is no signal.  This is essentially whay justus's program t.f did.

GSETUP:
1. A few changes to the existing readvmrFC and readmodFC to make reading
  our local format files and names more reliable.  Wollongong/fascode
  format files are now distinguished from JPL ones by *.zpt and *.ref
  extensions.  (You could use these too if you wanted.)
2. For Fascode files, I have included the option of taking monthly mean
  ZPT and VMR profiles and creating only monthly mean MAV files.
  The rationale for this is largely so we can do quick fits to spectra
  immediately after collection, before we have gathered together the
  radiosonde data and made daily ZPT files.  (This takes time.)  One
  purpose is real time quality control, the other is ENVISAT, where
  Martine wants columns reported weekly,before we have our radiosonde-based zpt profiles.
3. SPT directory is changed (for PC users) to be within the working
  output directory.  I find this more logical, also keeps the output
  separate from the G: directory. The output can be anywhere you like.

GFIT:
The only change is to recognise monthly mav files and, if they are used,
not recalculate the absorption coefficients until the month changes.
-------------------End of DG comments--------------------------------
 

GFIT  Version 2.16.0    16 Sep 2003    GCT
   Fixed a bug in abscog.f by which if the linelist
   contained an extra isotopomer of the last gas in the
   isotopomer.dat file, it produced a garbage value of
   ispeci, which in turn cased a segmentation violation
   when evaluating trat(lmax) where lmax=maxlev(ispeci)
   This is because the existing test only checked the
   gas number -- it didn't check the isotopomers. This
   was fixed by replacing the statement
          if(kgas.gt.ngas) go to 7749   
  by
          if(ispeci.lt.0 .or. ispeci.gt.nspeci) go to 7749


RUNLOG     Version 6.1.0     16-Sep-2003   GCT
   Changed RUNLOG to accomodate spectrum names up to 20 characters
   in length.  This makes the runlog records longer. This change
   also necessitated changes to all the other programs that read
   the runlog (GFIT, GSETUP, GGGAVG).


RUNLOG     Version 5.2.1     25-May-2003   GCT
   Made a minor change to rdsphead.f to accomodate the spectra
   from Paul Wennberg's IFS125HR, which runs OPUS 4.2.7 (20030313).
   There are now 19 data blocks per header, so I increased parameter
   MC to 20.

   Also changed the format on the delwav write from "1x,f13.11" to
   "f14.11 " because Baron Vazindel had measured spectra with a
   point spacing of -1.9 cm-1 (low resolution and in reverse
   frequency order).


GFIT  Version 2.15.0     5 May 2003    GCT
   While fitting synthetic Mars spectra, I noticed that for some
   gases whose vmr was very small (e.g. 1.E-15) at high altitudes,
   the retrieval would become rank-deficient at the higher altitudes.
   This happens when the small size of the partial differentials
   causes the Trace of the PD matrix to fall below tau=6E-6. When
   this happens, the vmr scale factor remains at 1.000 and its
   uncertainty depends on the a priori uncertainty in the file:
        home/toon/ggg/config/gfit_ap.orb

   The problem is that with a wide window, an apriori error of 10^6
   produces an uncertainty of only 2.E+04 in the vmr scale factor.
   If the vmr is very low, the absolute size of the retrieved vmr
   uncertainties at these high altitudes can actually become less
   than that at lower altitudes, where the gas is really being
   detected. This can result in the occultation-average MDA being
   dominated by the high altitudes where there is no gas, which is crazy.

   There are three ways to alleviate this problem.
 1) Don't let the vmrs fall to low values at high altitudes.
 2) Decrease the parameter TAU
 3) Increase the a priori uncertainty in gfit_ap.orb

  Option (2) delays the onset of rank deficiency to higher altitudes
  but makes the retrieved vmr scale factors do crazy things.
  So I chose (3), increasing the priori uncertainty from 10^6 to 10^9.

  The real solution is to define the a priori uncertainty in slant
  column space, rather than vmr scale factor space. But this will
  take alot more thought/work than I've got time for right now.

GGGAVG    version 2.3.0    23-Apr-2003   GCT
  In response to the change in the GFIT output format (replaced
  cl_err by Zoff), I changed the parameter list (and format) for
  reading the .col files.

GFIT  Version 2.14.0    20 Mar 2003    GCT
   Changed the format and content of the .col output such that
   the retrieved zero level offset is written instead of cl_err.
   This changes the order of the coulumns from
 Spectrum   Nit  CL  CL_err  Tilt Shft  RMS   Zmin
   to
 Spectrum   Nit   CL  Tilt Shft  Zoff  RMS/CL  Zmin


RUNLOG     Version 5.2.0      7-Mar-2003   GCT
   Edited rdsphead.f to make it work with both the old and the
   new version of OPUS. This was necessary because Justus Notholt
   has recently upgraded his version of OPUS.  The changes necessary
   to accommodate this were quite significant. This is because the
   previous version took a short-cut which relied on the parameters
   in the header blocks being in a particular order.  To make
   rdsphead sufficiently general, I had to make a new subroutine
   (getparval) to extract the values of the various parameters
   from the Bruker header.

   Here are the main differences that I have noticed between
   the new and the old OPUS spectrum header formats:
1) There are now 16 data blocks instead of 10.
2) The order of the data blocks is now different
3) The parameter FOC (focal length of collimator)
   is missing in the new OPUS header.
4) The date is formatted differently (2002/12/11
   instead of 17/ 7/1998)

Also, I found a bug in the old version of rdsphead.f:
The variable, DUR was defined as R*4 when it should
have neen R*8. Also, a few of the early OPUS spectra
produced a value:  DUR (REAL64): -1.#QNAN
This cause the following expression to yield gmt=NaN
for these runs.
        gmt=hh+(mm+((ss+dur*mod(ext,2))/60.))/60.
However, changing the expression to
        gmt=hh+(mm+ss/60.)/60.
        if(mod(ext,2).gt.0) gmt=gmt+dur/3600.
circumvented this problem since the problem runs were
all forward (ext=0,2,4,6,...)

Also, I noticed that one of the very early NIT Kitt Peak
spectra has no value of RESN in its header. This causes
RDSPHEAD to compute an OPD of 0.5/0.0 = Inf. This was fixed by:
      resn=0.02  ! In case value is not found in spectrum header



GFIT  Version 2.13.0     5 Mar 2003    GCT
   Fitting low-pressure N2O gas-cell laboratory spectra, I noticed
   alot of ringing in the measurements that extended far from the
   centers of the spectral lines. These measured spectra were
   unapodized and of 0.02 cm-1 resolution. The ringing in the 
   calculated spectrum died off more rapidly and stopped a few
   cycles from line center. To help improve agreement I therefore
1) Changed the weak apodization function that is used to allow
   an ILS of finite width from
      a(k)=a(k)*sngl((1.d0-(xx/(hwid+0.0d0))**2)**2)  ! apodize weakly
   to
      a(k)=a(k)*sngl((1.d0-(xx/(hwid+0.0d0))**4)**2)  ! apodize weakly
2) Increased the parameter nscycle from 18 to 36.

This helped alot, but does not explain why the apodization of the
measured spectrum did not kill its ringing.

GGGAVG    version 2.2.1    20-Dec-2002   GCT
  Justus was having problems with the GGGAVG under the G77 compiler.
  This was due to the arrays cl_av and cl_sw not being initialized.
  They were already full of garbage as soon as GGGAVG tried to execute.
  Fixed this problem by adding the loops:
       do i=1,1200
         cl_av(i:i)=' '
       end do
       do i=1,9600
         cl_sw(i:i)=' '
       end do


GFIT  Version 2.12.3    19 Dec 2002    GCT
   Justus Notholt had a few problems in porting GFIT to Linux:

  1) The variable vshift was not initialized in readvmrFC.f.
   On the Sun compiler this was never a problem, because it
   always initializes all variables to zero. And usually
   this is also the case with the G77 compiler under Linux.
   But on Justus's computer, the G77 compiler would occasionally
   initialize vshift with a large, non-zero value. This condition
   seemed to be triggered by very long .mod files.  Perhaps the
   part of memory reserved for the vshift variable was somehow 
   over-written while reading the long .mod files. I didn't have
   time to investigate the exact mechanism by which it was caused.
   Anyway, initializing vshift to zero fixed this problem.

 2) Justus was seeing NaN's in the error bars for certain fitted
   variables.  This was traced to a -ve value of ex(jfp), which
   is subsequently SQRT'd.  I'm not sure how ex(jfp) ever got
   to be -ve. For all the MkIV, ATMOS & Kitt peak spectra that
   I have analyzed, I've never seen this before. But it is easy
   to fix: simply replace the statement in gfit.f
          ex(jfp)=sqrt(ex(jfp)
   by
          ex(jfp)=sqrt(abs(ex(jfp))

 3) The variable lr in dayav.f was also not initialized.


GFIT  Version 2.12.2     4 Nov 2002    GCT
   Made minor modifications to the code to improve the sensitivity
   analysis features.

GFIT  Version 2.12.1    15 May 2002    GCT
 
   Moved the code lines:
       if(nfp*ncp.gt.msp) then
          write(6,*)'Increase dimension of MSP from ',msp,' to ',ncp*nfp
          stop
       endif
   c
   earlier in GFIT so that the test is performed BEFORE the call to ABSCOG,
   avoiding the fustration of getting this error message after a long wait.

GFIT  Version 2.12.0    28 Apr 2002    GCT
   Replaced the code:
         if(frqcen.gt.1850.0D0)then
            rect=frqcen*(fovi**2)/8 + 2100.D0*(amal**2)/8
         else
            rect=frqcen*(fovi**2)/8 + 800.D0*(amal**2)/8
         endif
   by
       if(runlog(ir+1:ir+2).eq.'in') then
          rect=frqcen*(fovi**2)/8 + 2100.D0*(amal**2)/8
       elseif(runlog(ir+1:ir+2).eq.'hg') then
          rect=frqcen*(fovi**2)/8 + 800.D0*(amal**2)/8
       else
          rect=frqcen*(fovi**2)/8
       endif
 
   This is because the former assumes that if the central
   frequency. frqcen > 1850 cm-1 the InSb spectra are being
   used and that if frqcen < 1850 the HgCdTe spectra are
   being used. This is not necessarily true. There are times
   when you want to look at the 1850-1950 cm-1 region with
   both HgCdTe and InSb spectra to examine their consistency
   on the exact same spectral lines.

GFIT  Version 2.11.0    14 Apr 2002    GCT
  Switched from subroutine SOLARSPEC to SUNSPECT.
  The latter has two main differences. 
  1) The solar lineshape is modified by the factor
            yy=yy/SQRT(1+(yy/Smax)**2)
     which prevents the lines from even exceeding an optical
     thickness of Smax. This makes little difference for weak
     solar features but improves the fit to strong solar lines.
  2) The linelist.siz file is not read inside SUNSPECT.
     It is read externally and NLINES and RECLEN are passed
     to SUNSPECT in the parameter list. This makes the
     subroutine simpler (11 lines of code which read and
     decode linelist.siz are removed) and more flexible
     (it may be used without linelist.siz at all). This
     will make SUNSPECT easier to use for non-GFIT programs.

  Since SUNSPECT has different calling parameters from 
  SOLARSPEC (LLSIZE is replaced by NLIMES & RECLEN) it
  was given a different name.

GFIT  Version 2.10.0    01 Apr 2002    GCT
  Linda pointed out to me that the expression that GFIT was
  using to compute PBHW 
       PBHW=(1-V)*ABHW+V*SBHW
  was incorrect in the cases of O2 and N2.

  The correct expression is
     PBHW = ( (1-V)*ABHW + (V-Vair)*SBHW ) / (1-Vair)
  ABHW is the Air-Broadened Half-Width (as tabulated in HITRAN)
  SBHW is the Self-Broadended Half-Width (as tabulated in HITRAN)
  V is the vmr of the gas in the sample/atmosphere
  Vair is the vmr of the gas in air (implicit in the definition of ABHW)
       Vair = 0.79 for N2, 0.21 for O2, and 0.00 for all other gases

  the equation for PBHW can be re-written as

       PBHW = ABHW + (V-Vair)*(SBHW-ABHW)/(1-Vair)

  If the vmr of the gas sample is the same as that assumed in
  the derivation of the ABHW, then V-Vair=0 hence PBHW = ABHW.
  The following FORTRAN code implements this new expression:
       if(kgas.eq.7) then
          pbhw=abhw+(vmr(ispeci,i)-0.21)*(sbhw-abhw)/(1-0.21)
       elseif(kgas.eq.41) then
          pbhw=abhw+(vmr(ispeci,i)-0.79)*(sbhw-abhw)/(1-0.79)
       else
          pbhw=abhw+vmr(ispeci,i)*(sbhw-abhw)
       endif
  The difference between the new and old PBHW's is pretty small.
  It only makes any difference at all for O2 and N2 lines, and
  only to the extent that their ABHW and SBHW differ. Since (SBHW-ABHW)
  tends to be pretty small for O2 and N2 lines, this new formulation
  doesn't change things much, except for the very highest J lines.
  But at least it is now mathematically correct.

  Changed the expression for the grid spacing from
         grid=1.0002d0*grid*(nva+ncp)/mva
to
         grid=1.0022d0*grid*(nva+ncp)/mva
  after I discovered that the former expression does not work
  properly in one situation.


GFIT  Version 2.9.3     3 Mar 2002    GCT
  Created a new linelist named cia.h92 which contains only
  the lines that have a pressure-squared absorption behavior.
  Subroutine abscog.f now searches for the string "cia" in the
  linelist name and if found, the line strength gets multiplied
  by the pressure (in atm).

  Previously, abscog did this extra pressure scaling
  for O2 and N2 lines that had an isotope number = 0.
  But this caused a problem in the 1.27 micron O2 band
  where the continuum absorption has two components: one
  proportional to presure and one to pressure-squared.

  This changes actually simplifies the subroutine abscog.f
  The lines
        if(kiso.eq.0) then  !  O2 and N2 Collision Induced Absorption (CIA)
            if(kgas.eq.7 .or. kgas.eq.41) sx=sx*p(i)
        endif
  are replaced by
        if(cia) sx=sx*p(i)

  This change also and makes it more general, making it easier
  to include continumm absorptions of other gases that vary as
  pressure or pressure-squared. If the isotope number is 0
  the doppler width is set to the pseudoline spacing.
  If the linelist name contains "cia", scale by an additional
  factor of pressure.

  As part of this change, all the O2 and N2 lines were
  removed from gct.h92. The magnetic dipole lines
  were added to atm.h92, and the CIA lines to cia.h92.
  The new monomer pseudo-lines o2_7885_mon.h92 were
  added to gct.h92 and the new binary O2 lines
  (o2_7885_mon.h92) to cia.h92

GFIT  Version 2.9.2    10 Dec 2001    GCT
   Replaced the following 5 lines of code in abscog.f
   since the ClNO3 linelist of Bell is no longer used
c          if(kgas.eq.27) then
c            tnulst=1.e-9
c          else
c            tnulst=1.0e-7
c          endif

GFIT  Version 2.9.1     9 Dec 2001    GCT
  Replaced the code
        rect=frqcen*(fovi**2+amal**2)/8
  with
        if(frqcen.gt.1850.0D0)then
           rect=frqcen*(fovi**2)/8 + 2100.D0*(amal**2)/8
        else
           rect=frqcen*(fovi**2)/8 + 800.D0*(amal**2)/8
        endif
David Griffith thought that this parameterization
gave a better fit to the ILS (seen at high altitude
where the pressure broadening is narrow. It makes
the effect of misalignment (AMAL) independent of
frequency, whereas previously it was directly
proportional to frequency as per theory. Note that
at 800 cm-1 in HgCdTe and 2100 cm-1 in InSb, the
new equations gives exactly the same result as the
old ones.

GGGAVG    version 2.2.0     7-Dec-2001   GCT
  Changes the meaning of the numbers which are printed in the
  wincomp file. The 3'rd column is now the standard error on
  the scale factor. Previously, this was multiplied by the
  error weight (4'th column).
  Also decreased parameter EPS in t_fit.f from 1.e-4 to 1.e-5.

GFIT  Version 2.9.0     4 Sep 2001    GCT
I reproduced the NaN problem in GFIT using the
window that Zhiming emailed to me last week.

I think that I understand the nature of the problem.
Basically, in fitting windows with very strong H2O lines
at low tangent altitudes, you are pushing GFIT into a
strongly non-linear regime for which it was not designed
nor adequately tested.

I believe that the fundamental problem is that I was
constraining the maximium allowed changes (dx) to the
scale factors for the fitted gases, but I was not
constraining the changes to the continuum level or tilt.
I reasoned that since the latter were linearly related
to the residual, there was no reason to constrain them.
But this is a mistake: it allows the fit to move in a
direction that is not toward the minimum and in which
the residual could actually INCREASE in some highly
non-linear situations.  This was fixed as follows:

c        do jtg=1,ntg
c        do jtg=1,ntg
c        dxlimit=0.2+abs(cx(jtg))
c        if(abs(dx(jtg)) .gt. dxlimit) dx(jtg)=sign(dxlimit,dx(jtg))
c        end do
c        call vadd(cx,1,dx,1,cx,1,nfp)
c  Limit maximum step size for fitted gases (non-linear).
        fr=1.0
        do jfp=1,nfp
           dxlimit=0.2+abs(cx(jfp))
           xfr=abs(dxlimit/abs(dx(jfp)))
           if(xfr.lt.fr) then
              fr=xfr
              kfp=jfp
           endif
        end do
        if(fr.lt.1.)write(*,*)'Limited step size: kfp,fr=',kfp,fr
        call vsma(dx,1,fr,cx,1,cx,1,nfp)

Now, if any of the (NFP) fitted parameters (not just the gases)
has to be trimmed, the changes to all of the fitted parameters
are scaled by the same amount (FR). This means that the direction
of the iteration step toward the minimum is preserved, only the
step size is shortened.

This change does not guarantee that the problem will never recurr.
A shortened step in the direction of the minimum might still cause
an INCREASE in the rms residual. So I implemented another change
which is more tactical rather than strategic. I inserted the line
        rms=sqrt(sumr2/nmp)
        if(abs(rms).gt.1.E+15) rms=1.E+15
I found that the actual failure mode for the NaNs was that the rms
would become Inf, which happened shortly after the rms exceeded
1.E+15. The above IF-statement prevents this and also forces a
convergence if rms should persist in trying to exceed 1.E+15 on
the next iteration.


GFIT  Version 2.8.4     6 Aug 2001    GCT
  Abscog.f now calls the subroutine lloc.f which returns the
  location of the last occurance of a character in a string.
  This is used to detach the filename from a path name, e.g. 
          lfs=lloc(linfil(lfile),'/')
          read(lunr,*,end=70) llname, nlines, reclen
          if( linfil(lfile)(lfs+1:).eq.llname) go to 71
  This allows a more rigorous check that linelist is really
  the one specified in linelist.siz. Previously, it only
  checked if llname was a substring of linfil.

GFIT  Version 2.8.3    31 Jul 2001    GCT
  Added the line:
           if(zmin.gt.999.999)zmin=999.999
  to prevent format overflow when fitting spectra with
  tangent altitudes > 1000 km (e.g. Titan).

GFIT  Version 2.8.2    24 Jul 2001    GCT
  Increased the maximum number of spectral lines that can be
  read from a linelist not listed in "linelist.siz" from
  999999 to 9999999. This allows stripped versions of the
  HITRAN2K linelist to be read to the end of file.

GFIT  Version 2.8.1    19 Jun 2001    GCT
  Fixed a bug in abscog.f:
  When using pseudo-linelists with large line spacings (e.g.
  mars_dust.h92 = 5 cm-1), the very first pseudoline has to be
  used.  Previously, the contribution from the first pseudo-line
  was ignored because its Doppler width was based on freq-fprev.
  This problem was alleviated by initializing fprev=nu1-1
  instead of zero.
     Also, the very wide pseudolines which are ~ 15 cm-1 beyond
  the edge of the window can still have significant absorption.
  This problem is especially acute for Mars spectra (p(1)=0.005).
  Even in a 100 cm-1 wide Mars windows, NUOFF was only 7 cm-1.
  in the windows. Therefore I increased nuoff from 
     nuoff=10.D0*dsqrt(grid*ncp*dble(p(1)))   ! see 1992 Toon MEMO
  to
     nuoff=10.D0*dsqrt(1+grid*ncp*dble(p(1)))   ! see 1992 Toon MEMO
  The new expression guarantees that NUOFF always > 10 cm-1

GFIT  Version 2.8.0    19 Jun 2001    GCT
  Major revision to GFIT. Included the capability to fit the
  zero level offset. Also made the commands "cl", 'ct', 'fs',
  and 'zo' user-selectable from the .ggg command line. 
  Now the user has complete control of all the fitted parameters.

  This change required extensive modification to fm.f. The
  string "winfo" is now passed to FM so that the subroutine knows
  which parameters to compute partial differentials for.....

  Also make so changes to the code that handles the iteration
  of the spectral fits. Previously there were several goto
  control statements (e.g. go to 111) which handled the
  misbehavior (e.g. non-convergence). Now these have been
  eliminated and a more structured approach has been implemented
  which will hopefully be easier to maintain.

  
GFIT  Version 2.7.0    17 May 2001    GCT
  Found a bug in abscog.f: a statement in there which says
        pbhw = abhw*(1.-vmr(ispeci,i)) + sbhw*vmr(ispeci,i)

  Unfortunately, in the old version of the HITRAN linelist
  that we have been using, sbhw=0.0 for all the O2 lines, and
  so the above statement calculates a pbhw which is only ~80%
  of the true value. This was fixed by adding the statement
        if(sbhw.le.0.0) sbhw=abhw
        pbhw=abhw*(1.-vmr(ispeci,i)) + sbhw*vmr(ispeci,i)
  We also fixed this problem by getting a new O2 linelist
  with non-zero sbhw, but the if-statement remains just in
  case there are other linelists with sbhw=0.

GFIT  Version 2.6.0    27 Apr 2001    GCT
  Made a few modifications  in response to Justus Notholt's
  suggestions. The file "m4part.lst" is now named "data_part.lst"
  and is NOT included in the tar file. This way it is not over-
  written each time the software is upgraded. Made changes to
  GSETUP, RUNLOG to accomodate this file name change.

  Also fixed a bug in fetch.f by which the the Spitsbergen
  spectra were divided by 8000000, which resulted in a tiny
  continuum level and hence a large uncertainty. This bug was
  a consequence of a previous modification (see Version 2.0.0)
  which had never been tested on Spitsbergen spectra.

  Increased the parameter MINLVL in readmodFC.f from 2000 to
  4000 at the request of Justus Notholt.

GFIT  Version 2.5.3    18 Apr 2001    GCT
  Added F142b back into the file isotopomers.dat. This increases
  the number of entries to 122.

GFIT  Version 2.5.2    25 Mar 2001    GCT
  Added the capability for GFIT to return .col files containing
  the total column of air. To make this happen, simply define
  a window with "air" as a target gas. This capability is useful
  for defining approximate vmrs direct from the slant columns,
  for example, when defining the fractionation in isotopic studies.

GFIT  Version 2.5.1     5 Mar 2001    GCT
   Changed llformat from
      llformat='(i2,i1,f12.6,e10.3,10x,f5.0,f5.4,f10.4,f4.2,f8.6,a24)'
   to
      llformat='(i2,i1,f12.6,e10.3,10x,2f5.0,f10.4,f4.2,f8.6,a24)'


GFIT  Version 2.5.0     4 Mar 2001    GCT
   Made an important change to "isotopomers.dat".
   Every gas for which we have made a pseudo-linelist
   must now have a seperate  entry in "isotopomers.dat"
   with iso=0. This has several advantages:
   1) Pseudo-gas absorptions can now be fitted seperately
    from the parent isotopomer. This is convenient if you
    want to fit the N2 quadrupole absorption lines without
    the result being influenced by the underlying N2 CIA
    (which is represented by pseudolines). Or if you want
    to fit the O2 lines at 7900 cm-1 separately from the
    underlying CIA.
   2) In "abscog.f" the statement
          ispeci=specindex(kgas)+max0(kiso,1)
      is simplified to
          ispeci=specindex(kgas)+kiso
   3) In "abscog.f" the curvature correction statements e.g.:
          is=specindex(26)+1
      are simplified to
          is=specindex(26)
   4) Improved consistency: every isotopomer represented
    in the linelist MUST have an entry in "isotopomers.dat"

GFIT  Version 2.4.2     26 Feb 2001    GCT
   Noticed that the compiler at Caltech was finding errors
   - undeclared variables - that the caesar compiler was not.
   Apparently, on caesar the compiler default is not to flag
   undeclared variables, unlike mark4sun, nereid, etc.
   So I introduced the statement:
         implicit none
   into all the gfit subroutines (gfit.f already had it),
   including those in /ggg/src/comn/

GGGAVG    version 2.1.0    12-Feb-2001   GCT
  Re-defined the cl_av and cl_sw arrays to avoid null characters
  being written to the column labels (which causes XYPLOT not to
  be able to read anything following them.

GFIT  Version 2.4.1      8 Feb 2001    GCT
   Fixed a bug introduced in version 2.2.0 such that
   when a spectrum was missing from the disk, GFIT
   continued to use the last good spectrum, but with
   the runlog parameters of the missing spectra.

   This fix was achieved by defining a new variable
   KSPECFLAG which is normally zero, but which is set
   to 1 if either the spectrum is missing from disk, or
   if the requested spectral interval extends beyond
   the limits of the spectrum.

   Now, spectra are skipped if both MIT and KSPECFLAG
   are > 0.  This allows synthetic spectra to be
   calculated even if there are no files on disk.
   
GFIT  Version 2.4.0     15 Jan 2001    GCT
   Made some minor changes to GFIT to cater for the additional
   gases (e.g. C2H4) and isotopomers defined in HITRAN2K.PAR
   This required expanding the file isotopomer.dat and the IF
   statement in abscog.f.

GFIT  Version 2.3.1      5 Jan 2001    GCT
   Fixed a bug. The statement in GFIT which used to say
      if((ntg+3)*ncp.gt.msp) then
         write(6,*)'Increase dimension of SPXV to ',nfp*(ntg+3)
   has been corrected to
     if(nfp*ncp.gt.msp) then
         write(6,*)'Increase dimension of MSP to ',nfp*ncp

GFIT  Version 2.3.0      4 Jan 2001    GCT
   Changed the default apodization for the measured spectra.
   Now, if the measured spectra already have some apodization
   applied (i.e. not "BX") 
         apo_m=-1
   instead of 
         apo_m=0 
   An apodization of -1 produces a delta dunction ILS, which
   induces no additional apodizations, in contrast to apo=0
   which produces weak apodization. This change allows synthetic
   apodized spectra to be re-analyzed getting exactly the same
   answer and with an essentially perfect spectral fit.

   Increased MVA to 45000000 to allow synthetic spectra to be
   calculated over very wide intervals e.g. from 9100-16100 cm-1.
   Had to increase parameter msp from msp=mva/20 to msp=mva/18.

GFIT  Version 2.2.0      3 Jan 2001    GCT
   Removed the lines
        call gindfile(dplist,runlab,specpath)
        if(lnbc(specpath).eq.0) go to 121
   which occurr twice in gfit.f. This means that there
   need not be a physical spectrum on disc in order to
   compute a synthetic spectrum. Previously, the spectrum
   had to be there, but covering the wrong spectral region,
   in order for a synthetic spectrum to be calculated.

GFIT  Version 2.1.2     20 Dec 2000    GCT
   Shortened by one decimal place the isotopic ratios in
   "isotopomers.dat". This required modifying the format
   statement in "abscog.f" from
77     format(2i2,1x,a8,a24,f11.9,i3,f5.2,i3,20(f6.0,i2))
   to
77     format(2i2,1x,a8,a24,f10.8,i3,f5.2,i3,20(f6.0,i2))

RUNLOG     Version 5.1.0      2-Dec-00     GCT
   Edited rdsphead.f to accomodate FITS format spectra
   from the Kitt Peak web-site.


GFIT  Version 2.1.1     16 Nov 2000    GCT
   Included the code
        call zenaz(2,obslat,obslon,zobs,iyr,1,iset,
     &    zpdtim/24.0d0,dasza,dazim,eorv,ervc,tplat,tplon,tpalt)
         dopp=(eorv+ervc)/3.e+08
   into GFIT so that when "so" is specified, the positions of
   the solar lines are adjusted to account for the Doppler shifts
   due to the Earth's rotation and the ellipticity of the Earth's
   orbit about the Sun.

   Also realized that the path to the solar linelist i.e.
      /ggg/linelist/solar.h92
   was still hardwired into solarspec.f, as was its
   length (nlines=16117). To fix this problem required
   passing two additional parameters to SOLARSPEC.F,
   the file containing the names and sizes of all the
   linelists, and the path to the chosen linelist.

GFIT  Version 2.1.0     14 Nov 2000    GCT
   Changed abscog.f to allow self broadening to be included.
   This is negligible when the vmr << 1, but starts to be
   important for H2O in the lower troposphere, and for
   laboratory measurements on pure gas samples. This was
   accomplished by re-naming the variable PBHW to ABHW,
   and the defining a new variable PBHW as follows:
            pbhw=sbhw*vmr(ispeci,i)+abhw*(1.-vmr(ispeci,i))
            y=pbhw*p(i)*trat(i)**tdpbhw/dopw
            sx=sngl(stren)*vpf(ispeci,i)
  A new array VFP was also defined in which the vibrational
  partition functions are calculated, to avoid overwriting
  the VMR array, as was done previously.

  Thus, ABSCOF no longer changes the values of the elements
  of the VMR array. 

RUNLOG     Version 5.0.0      2-Nov-00     GCT
   Made several changes to improve the portability of RUNLOG:
   I have taken findfile out of gethead.
   Instead, gindfile is called in RUNLOG and path is passed
   to rdsphead (the new gethead). Hence, path is now an input
   parameter instead of an output parameter. This way, we
   avoid having to pass the data-partition list to rdsphead.
   I decided that this was a sufficiently important change to
   warrant re-naming the subroutine, and since path is now an
   input rather than an output parameter, I moved its position
   to the front of the parameter list.


GGGAVG    version 2.0.0     1-Nov-00     bs
  Make changes to accomodate the new format of the .col files
  produced by GFIT.


GFIT  Version 2.0.2     30 Oct 2000    GCT
   Renamed the file
        /ggg/config/isotopes.dat
   to
        /ggg/config/isotopomers.dat
   and added an additional line for the 5'th OCS isotopomer (634).
   It now contains 107 records.  Changed gsetup accordingly.

   Also removed the format statement that use to read in the
   microwindow information (frqcen, wid, mit, apo, intrp,...)
   in fixed format. These parameters are now read free-format.

   Changed the format of the .col files:
       Added the continuum level uncertainty CL_err.
       Increased RMS by 2 decimal places.
       Reduced the airmass by 1 decimal place.
       Reduced the VF's by 1 leading digit.
   Also, the first five floating point numbers (Cl, CL_err, Tilt,
   Shft, RMS) are all now forced (inside GFIT) to take values
   between -9.99 to 99.99 and are written in a (1x,f5.2) format
   so that these fields are always space delimited

   Made several changes to improve the portability of RUNLOG:
   I have taken findfile out of gethead.
   Instead, gindfile is called in RUNLOG and path is passed
   to rdsphead (the new gethead). Hence, path is now an input
   parameter instead of an output parameter. This way, we
   avoid having to pass the data-partition list to rdsphead.
   I decided that this was a sufficiently important change to
   warrant re-naming the subroutine, and since path is now an
   input rather than an output parameter, I moved its position
   to the front of the parameter list.

GFIT  Version 2.0.1     29 Oct 2000    GCT
   Changed the cross-section curvature code in abscog.f so that
   it no longer needs to be edited each time a new isotopomer is
   defined. Instead of adressing the isotopomer by its species
   number directly (e.g. N2O5 = 70), which increases every time
   a new isotopomer is defined in front of it in isotopes.dat, it
   now used the SPECINDEX array to address it as a gas. So instead
   of addressing vmr(70,k), we now address vmr(specindex(26)+1,k). 

   During the course of doing this, I realized that the code
   which initializes specindex could be simplified. Instead of
      integer*4 specindex(mgas+1)
      specindex(1)=0
      do 33 jspeci=1,nspeci
        read(lunr,77)kgas,iso,gas,speci_id(jspeci),fa,molewt(jspeci),
     &  tdrpf(jspeci),nmode,(vibfrq(j),dgen(j),j=1,nmode)
        specindex(kgas+1)=jspeci
        .......

   we now have
      integer*4 specindex(mgas)
      do 33 jspeci=1,nspeci
        read(lunr,77)kgas,iso,gas,speci_id(jspeci),fa,molewt(jspeci),
     &  tdrpf(jspeci),nmode,(vibfrq(j),dgen(j),j=1,nmode)
        specindex(kgas)=jspeci-iso
        .......
   which I find easier to comprehend and produces exactly the same
   result (apart from not calculating the never-used ngas+1'th element) 

GFIT  Version 2.0.0     13 Sep 2000    GCT
   Made changes to GFIT, GSETUP, GGGAVG and RUNLOG to improve
   portability of code. In the past, people who use the GGG
   software had to spend a significant amount of time making
   changes to the code just to make it work in their environment
   and with their compiler. Even worse, these changes all had
   to be repeated every time a new version of the code came out.

   During David Griffith's visit to JPL, the code was ported to
   his laptop running Compaq/Digital Fortran (formerly known as
   Powerstation Fortran). David pointed out that virtually all
   of these changes could be avoided with a little bit of work.

   These changes included removing filenames which were hard-
   wired in the code (e.g. m4part.lst, gfit.ap, llsize.dat,
   averaging kernel filenames) and including them in the .ggg
   file instead.  Unfortunately, this added four extra lines
   to the .ggg file, which resulted in the new version of GFIT
   not being backward compatible: it won't run on the old .ggg
   files and the old GFIT won't run on the new .ggg files.
   Additionally, subroutines had to be modified to bring these
   new file names to where they were needed:
       ABSCOF now has an additional parameter in the call list:
           the path to the m4part.lst file
       FINDFILE also has an additional parameter in the call list:
           the path to the m4part.lst file
       HETSPE is now called with the full path to the spectrum,
           rather than just the name of the spectrum. This
           avoids having to call findfile from inside HETSPE
           (which would have required an additional parameter).
    The new versions of these three subroutine are called
       ABSCOG, GINDFILE, IETSPE respectively. Their names were
    changed because of their non-compatibility with the previous
    versions.

   In parallel with improving the portability of the code, I
   also made some additional changes:
    - The GSETUP version string is now included at the top of
         all of the .ggg files
    - The number of header lines is now included at the top of
         all of the .ggg files. 
    - KINT replaced by KINTPC to avoid conflict with the
         Digital Fortran instrisic function KINT
    - The scale factors were removed from IETSPE and moved to FETCH
    - Defined BPW = +-3 for I*4 binary data to avoid confusion with
         R*4 binary data.
    - Named the multiggg file to "multiggg.bat" irrespective of
         the computer system. This way I don't need the ROOT,
         USER, DL, or PLATFORM variables inside GGGAVG. 
    - Changed GGGAVG so that it gets the runlog name from the .col
         file, so the user doesn't have to type it it.

   The new version of the code will compile and execute on
   under the Sun, Linux and the Compaq Digital Fortran compilers
   without any changes. GFIT now has no platform dependence at all,
   since all input and output files are specified in the .ggg file.

GFIT  Version 1.6.4      3 Aug 2000    GCT
    Introduced the following statement int abscof.f

          if(index(linfil,'hitran96.par').gt.0) then ! Re-map HITRAN gas numbers to the ATMOS
             if(kgas.eq.1 .and. iso.ge.4) then !    HDO
               kgas=49
               iso=iso-3
             else if (kgas .eq. 25) then            !H2O2
               kgas  = 23
             else if (kgas .eq. 23) then            !HCN
               kgas = 28
             else if (kgas .eq. 24) then            !CH3Cl
               kgas = 30
             else if (kgas .eq. 29) then            !COF2
               kgas = 36
             else if (kgas .eq. 27) then            !C2H6
               kgas = 38
             else if (kgas .eq. 26) then            !C2H2
               kgas = 40
             else if (kgas .eq. 22) then            !N2
               kgas = 41
             else if (kgas .eq. 32) then            !HCOOH
               kgas = 46
             else if (kgas .eq. 31) then            !H2S
               kgas = 47
             else if (kgas .eq. 30) then            !SF6
               kgas = 50
             endif
        endif

This is to allow use to use the HITRAN96.PAR linelist and still get the
molecule number right.
  
GFIT  Version 1.6.3      2 Aug 2000    GCT
   Introduced the statement
          if(kgas.eq.2) flinwid=dmin1(flinwid,21950.d0)  ! Sub-Lorentzian CO2
   into abscof.f, in an attempt to crudely represent the sub-Lorentzian
   lineshape of the CO2 lines, so that I can better fit the spectra in
   the 2400 cm-1 region (especially the N2 CIA).

RUNLOG     Version 4.1.1     26-Jul-00     GCT
   Introduced a new character*3 variable (ext) to account for the changes in
   the sunrun and the runlog directories. The variable can take the following
   values: air, bal, gnd, lab, orb, and syn. The change was made by BS on
   26-Jul-2000.


GFIT  Version 1.6.2     20 Jul 2000    GCT
   Made some minor corrections to the linelists, based on spectral
   fits to the MkIV spectra in the 2620-2663 cm-1 region.
   Two duplicated CH4 lines, at 2646.27 and 2655.85 cm-1 were deleted.
   Two additional N2 CIA lines were created at 2635.0 and 2640.0 cm-1
   to smooth out the wing of the N2 CIA band, which was previously
   decreasing to zero at 2630 cm-1 too abruptly, according to
   MkIV tropospheric limb spectra.

GFIT  Version 1.6.1     20 Jul 2000    GCT
   Fixed a minor bug in the gct_humlik.f subroutine based on an email
   from Bob Wells who wrote it. These changes are supposed to give minor
   speed improvements. The ESMOS III benchmark still takes 46-49s.

GFIT  Version 1.6.0     20 Jul 2000    GCT
   Fixed a bug that was causing an incorrect temperature dependence
   of pseudoline absorptions via the "curvature correction" that is
   hard-wired into ABSCOF.F. This problem arose because we have
   defined additional isotopomers over the past few months. Whereas
   SF6 (for example) used to be isotopomer 100, it is now 105.
   Unfortunately, the code in ABSCOF defines each isotopomer by
   its line number in the file "isotopes.dat", so when we added
   additional lines, everything got screwed. This also applies
   to all the other freons.

GGGAVG    version 8.2.0    19-Jul-00     bs
  Added if statements to read the right files in the case of ATMOS
  and to read the TAB delimited ATMOS runlogs.

GFIT  Version 1.5.0     18 Jul 2000    GCT
   Made several changes to allow it to read ATMOS runlogs, which are
   Tab delimited and which contain two extra parameters (zerr and scalf)
   This require changing all of the runlog READ statements to if-then-else
   structures.

   It also required making substantial changes to FETSPE which previously
   also read the runlog records. The new version (HETSPE) is passed the
   individual runlog parameters, rather than the string of the runlog record.

   Also made changes to ATSETUP so that the vmr model and mav files
   would be named  e.g. at3ss02.vmr, at3ss02.mod, at3ss02.mav
   whereas in the MkIV case the mav files are named from the spectra.

RUNLOG     Version 4.1.0     29-May-00     GCT
   Found a bug by which spectra IPP'd on Tiamaria and transferred
to the Sun incorrectly produced bytepw=+2 (instead of -2)
This was because we had previously assumed that RUNLOG would only
ever be used on the computer which wrote the spectra. This was easily
fixed by replacing the line
       bytepw=2-4*iend
with
       btyepw=2*iend
       if(ialias.gt.256) then
         bytepw=-bytepw
This should now work in all possible situations, including the
never tested sun spectra on the PC.

At the same time, I also called getendian (instead of endian).


GFIT  Version 1.4.10     22 May 2000    GCT
   Merged the O3 line list of Alain Barbe, covering the 4537-4700
   cm-1 region with 3544 lines, with atm.h92

GFIT  Version 1.4.9      8 May 2000    GCT
   Fixed a bug in GFIT.F by which NCP additional array elements
   beyond the end of array VAC were initialized to zero by the
   statement
           call vmov(zero,i0,vac,i1,ncp*(2+nlev*nnt))
   This was causing variables beyond the VAC array in memory to be
   zeroed. This was not detected by array-bound checking because
   the arrays are defined as (*) in sobroutine vmov (in vsubs.f).
   This was corrected by simplifying this statement to
            call vmov(zero,i0,vac,i1,nva)
   This corrects an error made on 29-Nov-99 when modifying
   the gct_humlik routine.
.
GFIT  Version 1.4.8     13 Apr 2000    GCT
   Fixed a bug in abscof.f by which strong lines way outside the
   measured interval would cause values of KV1 to exceed NCP, or
   values of KV2 to be less than 1. Either of which would result
   in NV = -ve and would call an array-bound violation in the call
   to HUMLIK

GFIT  Version 1.4.7     22 Feb 2000    GCT
   Introduces two new error terms:
     - a term equal to 10x the last change in DX (DXWAS)
     - a term equal to (cx-ax)**2/cl
   The former increases the error bar significantly for
   cases in which the iteration has not converged
   The latter increases the error bars in cases where
   the CX is far from its a priori value (AX), especially
   if the continuum level (CL) is small.

   Also made some changes that were necessary to analyze ATMOS
   spectra: 
      Removed the 'at3' from the statement newmav='at3'//runlab(4:k2)

GFIT  Version 1.4.6     14 Jan 2000    GCT
   NaNs were being written to the .col files when "other"
   gases were rtrieved for occultations which did not have
   a CFC113 profile in the .vmr file. This is because CFC-113
   is the last gas in the "isotopes.dat" file and so its vmr
   profile is used in the computation of the vertical and
   slant column amounts, which were both zero.

   The quick fix for this problem was to reverse the loop
   over species, i.e.
       do jspeci=nspeci,1,-1
   so that the vmr profile of the 1'st (rather than last)
   "other" gas was used.

GFIT  Version 1.4.5     17 Jan 2000    GCT
   Wrote a new version of endian.f called getendian.f which returns
   +1 on big-endian computers, and -1 on little endian computers.
   I thought that this was more logical than returning 0 and 1.
   Plus it avoids having to do (1-2*iend) every time you use it.

GFIT  Version 1.4.4      8 Jan 2000    GCT
   Due to the fact that the size of the main linelists was hard-
   wired into the source code of several different programs, each
   time the size of one of the main linelists changed, I had to
   edit about 8 different programs of suffer the consequences.
   This is because there is no standard Fortran method of determining
   the size of a file. In Lahey Fortran you can do it with an inquirw
   statement, and in Sun Fortran you can do it with system calls,
   but these methos are not in the Fortran standard and therefore
   anre not portable.

   T get around this difficulty, we therefore created the file
   llzize.dat inside the /ggg/linelists sub-directory, along with
   all the linelists. each time
   the size of one of the main linelists changed.

GFIT  Version 1.4.3      7 Jan 2000    GCT
   Updated the files containing the isotopomer information (m.out)
   so that it now contains the isotopomer code (e.g. 636) and the
   isotopomer abundances assumed in normalizing the line strengths.
   This is not used for anything (yet): I just thought that it
   would be a good idea to keep all of the isotopomer information
   together in one file.

   At the same time I corrected the TDRPF values of NO, ClO and OH
   to match the partition function temperature-dependence obtained
   from HITRAN. This required increasing all three TDRPF constants
   from 1.0 to 1.23, 1.23 and 1.05 respectively. This will have the
   effect of increasing the line strength (which is proportional
   to (296/T)**TDRPF) and hence decreasing the retrieved NO and ClO
   amounts (by up to 9% at 200K).

   It is still a mystery why the TDRPS value of NO was incorrectly
   tabulated in ODS (and hence GFIT) despite being correct in the
   1990 Norton and Rinsland paper.

   This new file is named "isotopes.dat" and the format statement
   in abscof.f which reads it had to be changed to account for
   for the additional fields. GSETUP was also changed so that it
   reads the new file and writes the new file name into the .ggg
   files.

GFIT  Version 1.4.2      4 Jan 2000    GCT
   Updated the gct.h92 linelist with a new ClNO3 linelist, which was
   actually generated in May 1999 from Ballard's cross sections, but
   was not integrated into the gct.h92 linelist until now due to
   uncertainties in how best to merge the psuedolines with the
   quantum mechanical linelist of Bell that we like to use for 
   the 780 cm-1 Q-branches. The new ClNO3 linelist has the
   following improvements in comparison to the old one:
   - The 1280 cm-1 and 1670 cm-2 bands are included
   - The pseudolines for the 780 cm-1 band now extend to 840 cm-1
     (previously 830 cm-1) which reduces the size of the discontinuity
     when the pseudolines end.
   - The discontinuities at 775 and 785 cm-1 (due to the switch from
     the pseudolines to the linelist of Bell) have been eliminated.
     This was done by adopting pseudolines of constant strength of
     3.250E-21 across the 777 to 781 cm-1 region where Bell's linelist
     is now used.

GFIT  Version 1.4.1     21 Dec 1999    GCT
   Fixed two bugs which were causing NaN's in the output files
   when fitting channel fringes in blacked out spectral regions.

   1) There were cases when  amax = dp = dm  so that the statement
             xi=0.5*(dp-dm)/(2*amax-dp-dm)
      produced xi=NaN
      This was fixed by replacing this statement by
             denom=2*amax-dp-dm
             if(denom.eq.0.0) return
             xi=0.5*(dp-dm)/denom

   2) In extremely blacked out spectral regions, all elements
      of the vector CALCUL become zero. TCBAR also becomes zero.
      However the channel fring amplitude added to OBSRVD is
      CFAMP/TCBAR, which becomes Inf when TCBAR=0.0.
      This was fixed by defining  tcbar=tiny+tcbar/nmp

GFIT  Version 1.4.0     15 Dec 1999    GCT
   Merged the o2_cia.h92  and  n2_cia.h92 linelists with  gct.h92.
   Updated abscof.f with the new size (116605).

GFIT  Version 1.3.0     29 Nov 1999    GCT
   Modified  fastest.humlik.f to eliminate the array of x-values.
   Since our x-values are always equally spaced, they can be easily
   defined internally to the humlik subroutine as  X(i)=X1+i*DX
   The new modified version is named  gct_humlik.f.
  
GFIT  Version 1.2.0     15 Nov 1999    GCT
  Made various minor changes to grfit and its associated sub-routines
  to get them compiled by G77 under LINUX. These changes mainly involved
  replacing the <mlev>f8.2 style format statements with numbers 100f8.2.

GFIT  Version 1.1.0     1  Nov 1999    GCT
  Instead of the DEBUG variable being hard-wired inside GFIT,
  it may now be specified in the pars2fit string. This way, 
  the debug statements may be invoked without having to
  recompile the program.

GFIT  Version 1.0.0     1  Nov 1999    GCT
  Four major changes have been made to the linelist atm.h92
    1) The CH3D lines in the 2039-3188 region have been replaced with
       the prediction of Nikitin et al. (from the file hi.remerged)
    2) The CH4 lines (all isotopes) have been replaced with a prediction
       of Hilico et al., which have been massaged by L.R.Brown to better
       fit laboratory spectra in the 3354-4938 cm-1 region (from the
       file hi.ch4.2000).
    3) The N2O line list has been completely replaced by the prediction
       of Toth over the 527 - 7796 cm-1 region (from the file n2o_toth.h92,
       40417 lines).
    4) The H2O linelist has been replaced over the 500 - 2820 cm-1 region
       by that of Toth 99.

GFIT  Version 0.3.0
  Now uses the subroutine  fastest.humlik.f (Wells, 1999)  to calculate the
  voigt function.  This is slightly faster than the old voigt.f function, and
  determines the whole Voigt profile with just one call, eliminating the inner-
  most loop in ABSCOF.F.  Unfortunatly, two extra arrays are required to store
  the x-values and the calculated Voigt profile. Since the VAC array already
  had the correct dimensions, I simply extended it by 2*NCP additional points.
  This is more efficient in memory usage (although more confusing) than defining
  separate arrays.
  
GFIT  Version 0.0.0     8  Apr 1999    GCT
  Brand new version of GFIT which recognizes each isotopomer as a seperate
  and distinct species. Requires a completely different format command line
  in the .ggg file to specify which species to fit. Now the species names are
  rentered as ascii strings (e.g., hcl, ch4) with specific isotopes being
  designated by a integer prefix (e.g., 2hcl). This change was necessary
  because it was not possible to fit all 100 species onto one line of the
  window file in the old manner. It required substantial
  modification of GSETUP and ABSCOF. In particular, the .mav files now have
  100+ columns (one for each species) rather than just 60 (one for each gas).

  Additionally, the initial values of the fitted parameters and their uncertainties
  which used to be hard-wired into GFIT (arrays AX and RAE) are now read from
  a file "gfit.ap", allowing the user to change them without needing to re-compile.

  Despite all of these changes, the benchmark produces identical results to
  those previously at about the same speed (42-47 s).

GFIT  Version 9.9.33   22  Mar 1999    GCT
  Realized that the use of frac=0.0001 was preventing me from consistently
  calculating the far wing effects in CO2 lines of the v3 band. Therefore
  removed frac, which is equivalent to setting it to zero. 
  Reduced frac to 1.0E-5 in order to  investigate the sub-Lorentzian
 line wings in the v3 band of CO2.

GFIT  Version 9.9.32   11  Feb 1999    GCT
  Changed GFIT to support the new runlog format with the '+','-' or ' '
  symbols in the first column. This was done in such a way that it should
  still work with the old runlog format.

GFIT  Version 9.9.31    2  Feb 1999    GCT
  Changed ABSCOF to allow it to use the pseudo-lines derived by Frank
  Mills to represent the O2 and N2 collision induced absorptions (CIA).

  The existing code wich assumed a Doppler Width (1/e half-width) of 0.667
  of the line spacing, produced a 5% peak-to-peak ripple in the calculation.
  While this ripple would not effect retrievals of O2 itself (for example,
  to derive tangent altitudes) it would be undesirable for trying to fit
  weak absorptions in this interval. I therefore set the Doppler Width (HWEM)
  to 0.83255 times the line spacing. In other words, I now set the Doppler
  Width (HWHM) to equal the line spacing, since 0.83255=sqrt(ln(2)).

gggavg    version 7.3.0    14-jan-99     bs
  - the variable "record" is now a 163 characters string (increased
        from a 162 character string).
  - gsetup reads the records in a runlog file even when a retrieval
        delimiter (' ' & '-' & '+') is placed at the beginning of the
        line.
  - added a new character array of size mrow and named it sign. the
        array stores the retirieval delimiters from the runlog records
        (when present) and outputs to the average files (.av and .sw).
  - the auxiliary variable yaux(4,mrow) is now initialised in an
        if..elseif..endif statement to account for the presence of
        (lack of) the retrieval delimitar character.

RUNLOG     Version 4.0.0     08-Nov-98     GCT
   Changed GETHEAD so that it no longer reads the MkIV spectral headers
as an I*2 array which is equivalenced to (misaligned) I*4, R*4 and R*8
arrays from which the individual variables are read. Instead the variables
are read directly in a single read statement.

The avoids the need to use the -misalign switch to get GETHEAD to compile
which was causing a problem on the GNU F77 compiler under LINUX.


GFIT  Version 9.9.30   19  Oct 1998    GCT
  Make various changes to the code to get it to compile under the
  new LINUX F77 compiler on JCUERVL.
  Also included FBC.F as a seperate subroutine in MAKEFILE.

GFIT  Version 9.9.29   12  Oct 1998    GCT
  Changed the format of the version string to make it consistent with
  those in GGGAVG and DAYAV.
  Also the debug option now prints out the upper triangle of the
  correlation matrix.

GFIT  Version 9.9.28   15  Sep 1998    GCT
  Wrote the subroutine READMAV in order to simplify GFIT.
  Also wrote the subroutine SKIPREC to skip records when reading
  sequential access files. 

GFIT  Version 9.9.27   20  Aug 1998    GCT
  In porting GFIT to Justus Notholt's computer in Potsdam, we had to
  make a few minor changes to the code to make it work properly:
  Whereas previously it just gave a warning if FETSPE could only
  find a part of a requested spectral interval, this has been changed
  to skip the spectrum unless the whole interval is present. This
  was necessary because some of Justus's early spectral start at 900
  cm-1, close to the right hand edge of the 896 cm-1 HNO3 window.

  In ABSCOF, parameter MISO was increased from 130 to 230 to allow
  Justus to define pseudo-gases for use in profiling.

GFIT  Version 9.9.26   10  Jun 1998    GCT
  Made some major changes to NEWDEC:
1)The code for deciding on the first points to be used for the dot
  products has been completely redone, making it simpler to understand
  and avoiding discontinuities in its behaviour.
2)The dimension of the input array FIN is now included in the parameter
  list for the subroutine call. This allows FIN to be declared in the
  NEWDEC subroutine with an appropriate dimension, instead of FIN(*),
  so that array bound violations within NEWDEC can now be caught.
  Note that this changes the calling parameter list and makes the new
  version of NEWDEC incompatible with the previous versions.
3)For cases where array-bound checking is not done, NEWDEC can now
  perform explicit tests (at the beginning) to check that FIN won't be
  addressed outside its limits during the subsequent loops. Previously,
  this couldn't be done because NEWDEC had no knowledge of the size of FIN.
4)Included IF statements so that if FR=0 or FR=1 only one of the VDOT
  calls is made. This will be the case if SH and RDEC are integers,
  such as when NEWDEC is called from FETSPE.

  In order to get identical results using GFIT with this new version of
  NEWDEC I had to make two changes, the first good and the second bad:
  (i) In FETSPE,  I now call
        call newdec(yobs(k1),mpts,a,nii,interp,1.d0/interp,0.d0,yobs,nmp)
      instead of
        call newdec(yobs(k1),mpts,a,nii,interp,1.d0/interp,1.d0,yobs,nmp)
  (ii) In GFIT I now define
      ax(ntg+3)=sngl((startm/grid-ncp1+nsh-1+nhwmax-nhw)/rdec)
      instead of
      ax(ntg+3)=sngl((startm/grid-ncp1+nsh+nhwmax-nhw)/rdec)

The ESMOS benchmark now executes in 44-45s, about the same as previously.

GFIT  Version 9.9.25    8  Jun 1998    GCT
  Changed profzl.f so that tha first and last points are both zero.
This was achieved by changing the weak apodization from
      a(k)=a(k)*sngl((1.d0-(xx/(hwid+0.5d0))**2)**2)  ! apodize weakly
to
      a(k)=a(k)*sngl((1.d0-(xx/(hwid+0.0d0))**2)**2)  ! apodize weakly
This may seem like a waste, but it simplifies the subsequent indexing of
the SLIT array by making the number of points used during a decimated
dot product independent of the point index. Previously, if the first
point of SLIT was used, then so was the last point and so the operation
count was 1+NII/ODEC, whereas in all other cases the operation count
was NII/ODEC, the general expression being  nele=(nii-kop-1+odec)/odec.
With the last point now being zero, setting NELE = NII/ODEC works in
all cases.
   This change has been implemented in FETSPE and NEWDEC and resulted
in very small changes to the benchmark results (1 or 2 parts in 10000).
 
GFIT  Version 9.9.24    7  Jun 1998    GCT
  Simplified the code that convolves the measured spectrum with the
slit operator in order to interpolate, apodize of even degrade its OPD.
Whereas previously, this convolution was done explicitly by the code
      k=kstart
      j=interp*m1-i1+1
      do i=1,nmp
         kk=k
         dtot=0.0d0
         do jj=j,nii,interp
             dtot=dtot+dprod(a(jj),yobs(kk))
             kk=kk+1
         end do
         yobs(i)=sngl(dtot)
         if(j.le.1) then
            j=interp
            k=k+1
         else
            j=j-1
         endif
      end do
It is now performed by a single call to the NRWDEC subroutine:
      call newdec(yobs(kstart),1.d0/interp,a,interp,1.d0,nii,yobs,nmp)
which seems to produce identical results.

GFIT  Version 9.9.23    6  Jun 1998    GCT
  Streamlined the code that normalizes the slit operator in FETSPE.
      do k=1,interp
         dtot=0.0d0
         do j=k,nii,interp   !  Compute normalizing factor
            dtot=dtot+dble(a(j))
         end do
         rnorm=sngl(1/dtot/scale)
         do j=k,nii,interp   !  Apply normalizing factor
            a(j)=a(j)*rnorm
         end do
      end do   ! k=1,interp
Is replaced by
      do k=1,interp
         nele=1+(nii-k)/interp
         call vdot(a(k),interp,unity,0,tot,nele)
         call vmul(a(k),interp,1./tot/scale,0,a(k),interp,nele)
      end do   ! k=1,interp
which gives identical results

GFIT  Version 9.9.22   13  May 1998    GCT
  Moved the close(19) statement from before the read to after the continue
  as follows. This should prevent empty fort.19 files being created in future.
            read(19,*,end=888) dum
            write(*,*)'Warning: NLEV differs in .OBS & .MAV'
888         continue
            close(19)

GFIT  Version 9.9.21   11  May 1998    GCT
   Converted FNBC.F, LNBC.F, SUBSTR.F and FBC.F to handle delimiters
   other than blank or space. Recognized delimiters now include
            nul            (ASCII character # 0)
            horizontal tab (ASCII character # 9)
            space          (ASCII character # 32)
            comma          (ASCII character # 44)

GFIT  Version 9.9.20   30  Apr 1998    GCT
   Fixed a bug in SLPATH.F which caused the part of the ray path between
   the observer and the tangent point not to be traced whenever
   the level separation was less than 4.0*cos(theta). This was fixed
   simply by replacing the following statement in GETSP
      IF(DS*ABS(DCOS(TH)).GT.DZ/2) DS=DZ/2/DCOS(TH)
   by
      IF(DS*ABS(DCOS(TH)).GT.DZ/2) DS=DABS(DZ/2/DCOS(TH))
   I discovered this bug while trying to use slpath with a layer
   thickness of 0.2 km. It worked fine for zenith angles of less than
   93 deg, but returned garbage for greater angles. It also worked
   fine for a layer thickness of 0.5 km

   Also fixed a problem by which the SLPATH was not returning the
   correct value for BEND, even though this is not used by GSETUP.
   Also increased the maximum number of levels in GSETUP (but not
   in GFIT) from mlev=150 to 250.

   Note that even though GFIT does not call SLPATH, I have nevertheless
   updated the GFIT version number and that of GSETUP.

GFIT  Version 9.9.19   28  Apr 1998    GCT
   Replaced the following code in newdec.f
           dtot=0.0d0
           do jop=kop+1,nii,odec
              dtot=dtot+dprod(oper(jop),fin(kin))
              kin=kin+1
           end do
 by
           nele=(nii-kop-1+odec)/odec
           call vdot(oper(kop+1),odec,fin(kin),1,tot,nele)
   which produces virtually identical results.

GFIT  Version 9.9.18   19  Apr 1998    GCT
   Made minor changes to GFIT.F, ABSCOF.F and MOLPARAM.F to support NO3
   as the 64'th molecule.

GFIT  Version 9.9.17   14  Apr 1998    GCT
   Discoved a bug in the channel fringe implementation when fitting the
   CF4 window at 1282 cm-1 which, at low tangent altitudes, contains
   several blacked out lines. Since the fringes were being fitted to
   RESIDS/CALCUL, the noise underneath the strong lines was greatly
   magnified and some very large amplitude channel fringes were derived,
   which only made the spectral fits worse. 

   This problem was fixed by defining a TCBAR, the average calculated
   transmittance across the window, and fitting the fringes directly
   to the residuals. The resulting channel fringes were then scaled
   by TC/TCBAR prior to subtraction from the measured spectra.

GFIT  Version 9.9.16   27  Mar 1998    GCT
  A major revision of fringes.f was performed:
  (1) Replaced the statement 
        power=resids(2*i-1)**2+resids(2*i)**2
      by
        power=cabs(cmplx(resids(2*i-1),resids(2*i)))
      This is much less susceptable to overflow or underflow, which was
      previously causing NaN's to be output by fringes.f in nearly blacked-out
      windows where RESIDS = RESIDS/CALCUL contained very large values.

  (2) Also changed the espression for the calculation of CFPHASE from
        cfphase=(phasm*pm+phasi*pmax+phasp*pp)/(pm+pmax+pp) ! old method
      to
        cfphase=phasi+xi*((0.5+xi)*(phasp-phasi)+(0.5-xi)*(phasi-phasm))
      This new expression does not require the calculation of any powers
      (pm,pmax,pp) which involve squaring the amplitudes and was therefore
      susceptible to over/underflow.

  (3) Also improved the logic by which the phase is changed by PI or 2PI
      and the amplitudes made -ve. This seems to improves the results for
      low frequency channel fringes.

  (4) If a true fringe cannot be found, FRINGES now prints a warning and
      returns zeros for CFAMP, CFFREQ, and CFPHASE.


GFIT  Version 9.9.15   17  Mar 1998    GCT
   I have simplified ABSCOF to get rid of an irritating bug. Previously,
   ABSCOF would give warnings that the Doppler widths for CF4 pseudolines
   were less than GRID, when I knew that they weren't. This was because
   the warning was based on the real CF4 Doppler width whereas pseudolines
   are assumed to have a Doppler width equal to 2/3 of GRID. To avoid this
   inconsistency I have removed all references to 
      dopp(molno)=4.3e-7*sngl(cen)*sqrt(T(lmax)/molewt(mwindx(molno)+1))
   This means than whereas I used to compute
        linwid=2*sqrt(alor**2+0.693*dopp(molno)**2)
   I now use
        linwid=2*sqrt(alor**2+grid**2)
   which assumes that the Doppler widths of all gases are approximately
   equal to GRID. Since LINWID is only used to decide whether to skip
   very weak lines or not (tnu=sx*exp(eprime*tfac(ll))/linwid/pi), and
   is not used in the actual LBL calculation, I don't think that this
   change will make any discernable difference. It can only have an
   effect for gases for which DOPP differs from GRID and both are much
   larger than ALOR. Since, for most gases ALOR > DOPP at the altitude
   at which the number density peaks.

   Since DOPP is no longer computed in ABSCOF, the screen output in
   ABSCOF has been modified not to include D-wid and L-wid. Instead,
   additional parameters from the linelist are included.

GFIT  Version 9.9.14   10  Feb 1998    GCT
   Replaced the CCl4 data in GCT.H92 with the latest data from Nemtchinov
   and Varanasi which is 9% stronger and extends from 750-812 cm-1 as
   compared with 770-810 for the old stuff from NCAR ? This required
   that ABSCOF.F be changed to reflect the larger size of GCT.H92
   
GFIT  Version 9.9.13    9  Feb 1998    GCT
   Introduced "err=66" into the write and open statements for the .spt file.
   Hopefully, this will prevent GFIT crashing when the SPT sub-directory fills.

GFIT  Version 9.9.12    3  Feb 1998    GCT
   I noticed that for very narrow windows (NMP=1) I kept getting NaNs.
   This problem was traced to the following line of code in the vramp
   subroutine in vsubs.f, which divides zero by zero:
        vec(k)=+float(i-nop)/(nele-1)
   The following change fixed the problem
        vec(k)=+float(i-nop)/((nele-1)+1.e-38) ! 1e+38 prevents NaN when nele=1

GFIT  Version 9.9.11   27  Jan 1998    GCT
   Previously, whenever the rms fit was < -9.99 or > 999.99 GFIT would
   exceed the f6.2 format and write ****** in the .spt file. This would
   cause NEWGAS to crash on this spectrum. Now, we test the values of
   rms/cx(ntg+1) and if it exceeds a limit (-9.99 to 99.99) it is set
   to that limit.

GFIT  Version 9.9.10   20  Jan 1998    GCT
   Found a couple of errors by running FTNCHEK. RESN was declared both
   as R*4 and R*8 and so I chose the latter and made it consistant
   throughout. Also promoted RESMAX and OPD to R*8 since these were
   related to RESN.

GFIT  Version 9.9.9    12  Jan 1998    GCT
   Increased RAE(ntg+2) from 0.1 to 10.1 on 29-Dec-97. This considerably
   tightens the constraint for the continuum tilt to be zero, but was
   found to bring better convergence on David Griffith's OCS spectra
   which have a saturated H2O line just outside the edge of the window.
   Previously, GFIT was trying to fit the H2O absorption by changing
   the tilt rather than the H2O abundance, which often resulted in the
   tilt reaching its maximum permitted value, after which convergence
   could never be achieved because of the similarity between the TILT
   and H2O partial differentials. 

   This change slightly altered the Vfacts from the ESMOS II benchmark by
   .0001 for 3 of the spectra and by .0002 for one spectrum, sp4000.co2.
   The other 6 spectra had no discernable change.

   Also increased the threshold for the iteration retrace from a 6x to
   a 9x increase in rms. This seemed to provide better convergence for
   OCS fits to MkIV spectra.

GFIT  Version 9.9.8    21  Dec 1997    GCT
   Changed FETCH.F so that it could read I*4 spectra from the UOW Bomem.
   This means that GFIT cannot currently read byte-reversed R*4 spectra.
   [Need to find a better way to distinguish between these two cases.]

   FETSPE now calls the subroutine /ggg/src/comn/ENDIAN.F  instead of
   having the code to determine the computer byte order inside FETSPE.
 
GFIT  Version 9.9.7    19  Nov 1997    GCT
   Fixed a buf in FETSPE by which there was no check that NII.le.MII
   which caused "Subscript out of range" problems when the MkIV spectra
   were degraded to 1 cm OPD. 

GFIT  Version 9.9.6     6  Nov 1997    GCT
   Reorganized the iteration loop to allow multiple convergences to be
   achieved, which may be important when fitting channel fringes, since
   it permits multiple channel fringes (of different frequencies, phases,
   and amplitude) to be fitted and then subtracted from the measured spectra.

GFIT  Version 9.9.5     5  Nov 1997    GCT
   Changed GFIT to allow the non-target transmittances to be calculated
   and outputted as the last column of the SPT file. This allows NEWGAS
   to plot the non-target transmittances just like any target gas.

GFIT  Version 9.9.4    22  Oct 1997    GCT
   Changed the way that the zero error (ZERR) is added to the residuals.
   previously the expression
           call vadd(resids,1,zerr*(1.+abs(cx(ntg+1))),0,resids,1,nmp)
   was employed which had the unfortunate effect, when cx(ntg+1) ~ 1,
   of doubling the effect of ZERR. This was remedied as follows
           call vadd(resids,1,zerr*amax1(1.,cx(ntg+1)),0,resids,1,nmp)

GFIT  Version 9.9.3    11  Oct 1997    GCT
   Changed MOLNUM.F so that it is now case sensitive. This required that
   all the .vmr files be checked that the gas names are correct e.g. HCl
   (not HCL or hcl), HBr (not HBR or hbr).

   Also removed the call to MOLNUM in GSETUP since the result was never used.

GFIT  Version 9.9.2    10  Oct 1997    GCT
   Changed the format of all of the GFIT data files so that they are
   now plottable by AMESPLOT. This includes the VMR, OBS, and MAV files.
   The required that the format statement of the .mav file be changed from
   (a14,5f9.4,150f7.3) to (a14,5f10.4,150f8.3) so that the ZOBS and POBS
   fields and the SP values themselves are always space delimited from
   eachother, otherwise AMESPLOT will not be able to plot them properly.
   Previously this was the case whenever POBS exceeded 1000.0 or the SP's
   exceeded 100.0 km.

   GSETUP now checks that the number of columns is equal to the number
   of column labels and stops if it is not.

GFIT  Version 9.9.1     2  Oct 1997    GCT
   Since we decided to use the LINKEY string in the .ggg file to
   indicate whether or not to fit the channel fringes, it is no
   longer necessary to append a "cf" to the last line of the .ggg file.
   Also, reduced the length of LINKEY from C*6 to C*3.

GFIT  Version 9.9.0     1  Oct 1997    GCT
   Uses FFT methods to determine the amplitude, frequency and phase of
   the largest channel fringe present in the residuals after convergence
   of the logarithmic iteration (mode=1). The resulting cosine wave is
   then subtracted from OBSRVD and the linear iteration proceeds as
   normal, with no futher adjustments of the channel fringe parameters.

   To enable the channel fringe fitting capability, simply append a "cf"
   to the last line of the .ggg file. Otherwise it won't bother.

GFIT  Version 9.8.7    30  Sep 1997    GCT
   Introduced the variables NFP and MFP to replace NTG+3 and MTG+3.

GFIT  Version 9.8.6    26  Sep 1997    GCT
   Changed the vramp subroutine in VSUBS.F such that the ramp
   is zero at point (NMP+1)/2 instead of being perfectly symmetrical.
   Thus if NMP is odd, VRAP will behave exactly as previously. However,
   if NMP is even it will not set point  1+(NMP+1)/2 to zero

GFIT  Version 9.8.5     5  Sep 1997    GCT
   Changed the definition of the forward model (FM) such that
     f = continuum.(1+tilt.ramp)*exp
   rather than
     f = (continuum+tilt.ramp)*exp
   This simplifies the FM subroutine.

GFIT  Version 9.8.4     4  Sep 1997    GCT
   Promoted the variables RESN and RECT to R*8 to simplify things.
   Also promoted the variable SH (in GFIT, FM, NEWDEC) to R*8.
   Changed the name of array SPVAC to SPXV (in GFIT & FM)

GFIT  Version 9.8.3    24  Jul 1997    GCT
   Installed the new version of SUBSTR (which returns the array of
   substrings instead of their indices) into ABSCOF.  This change
   should make absolutely no difference to the results and negates
   the change introduced in the previous version (9.8.2).

GFIT  Version 9.8.2    23  Jun 1997    GCT
   Wrote a new cleaner version of SUBSTR.F which actually will continue
   counting the number of sub-strings, even after it has exceeded the
   dimension of the indexing array, without causing array bound violations.
   This allows the calling program to detect the error condition simply by
   testing whether NLF.gt.MLF .

GFIT  Version 9.8.1    31  May 1997    GCT
   Included the following code in abscof.f to overwrite the PBHW of NO2 with
   the air-broadened expression from Dana et al. (JSQRT 57, 445-457, 1997).
        if(molno.eq.10) then  ! Set NO2 widths to Dana (JQSRT 57, 445-457, 1997)
           tdpbhw=.75
           read(rotate,'(15x,i2)')nprime2
           pbhw=0.001*( 84.1 - .753*nprime2 + .0059*nprime2**2 )
        endif
   After performing test run to evaluate the magnitude of the effect,
   this code was then commented out. However, it is left in place in case
    we ever decide to activate it in the future.

GFIT  Version 9.8.0    31  Mar 1997    GCT
   Reduced TAU from 6E-5 to 6E-6. This is the parameter which tells
   GFIT how hard to try to fit the absorption and hence when to give up.
   Previously, after the uncertainty in the TOTCON had exceeded 50,
   GFIT would no longer try to fit the absorber amount; instead it
   would simply return a TOTCON of unity. This behavior was common
   in gases which decrease rapidly with altitude, e.g. F11 and C2H2.
   for which it would often produce a discontinuity in the TOTCONS.
   Although this discontinuity would be below the calculated error,
   it could nevertheless impart an undesirable feature to the retrieved
   vmr profile. With the new reduced TAU value, GFIT should continue
   to fit the spectra until the uncertainty in TOTCON exceeds 500. 

GFIT  Version 9.7.0    29  Mar 1997    GCT
   Fixed a bug in GFIT by which the first element of array SPVER was never
   initialized to zero. For ground-based spectra and sunset spectra this
   bug had no effect because SPVER(1) would either be zero or would be set
   to the correct value. However, for ascent spectra, after being set to a
   non-zero value for the first (and lowest) spectrum, SPVER(1) would never
   be set to zero for the later higher spectra, leading to an overestimate
   of the vertical column, and consequently, and underestimate of the airmass.
   Fortunately, the product of the airmass and the vertical column is still
   OK because the line-of-sight slant paths (SPLOS) are all correct, so the
   vmr profiles retrieved from the ascent spectra are all fine.

GFIT  Version 9.6.8    18  Mar 1997    GCT
   Reduced the reciprocal a priori uncertainty in the TOTCON from 0.0001
   to 0.000001. This increases the reported uncertainties in situations
   where the spectra contain no information from 1.00E+04 to 1.00E+06.
   Previously, this would occasionally cause the errors in the retrieved
   profiles to start decreasing with altitude when the slant column
   abundances became very small, because even though the totcons had
   uncertainties of 1.0E+04, if the vmr is rapidly decreasing with
   altitude, 1.0E+04 times something tiny is still something small.
   This problem was particularly acute for ATMOS spectra for which
   the dynamic range of slant column values is very large.

GFIT  Version 9.6.7     4  Mar 1997    GCT
   Changed GCT.H92 so that Bell's ClNO3 linelist is only used over
   the 775 - 785 cm-1 region, whereas previously Bell's list was
   used out to 797.7 cm-1. The reason for this change was to prevent
   the discontinuity in the ClNO3 absorption coefficients (where we
   switch from Bell to Ballard) from falling inside the CCl4 window
   (787.5 - 805.5 cm-1). This change reduces the number of lines
   in GCT.h92 to 104139, and ABSCOF.F was changed accordingly.

GFIT  Version 9.6.6    19  Feb 1997    GCT
   Included the statement
                 if(runlog(ir:ir).eq.'s')dummav=mavfile
   to allow GFIT to analyze synthetic spectra (e.g. hbr_cell.syn).

   Also, increased the parameter NMMAX from 7000000 to 14000000 for
   a 61 Mbyte executable.

GFIT  Version 9.6.5     7  Feb 1997    GCT
   Made two changes to try to increase the size of the uncertainties
   reported for windows that are completely blacked out:
   1) The residuals are now perturbed by ZERR*(1+ABS(CX(NTG+1))) rather
   than ZERR*CX(NTG+1) previously. In the cases when the continuum level
   CX becomes small, the new formulation does much better.
   2) An amount 3*RMS/CX(NTG+1) is added in quadrature to the uncertainties
   rather than RMS/CX(NTG+1) previously. Where the spectral fits are good
   (~0.3%) this changes doesn't really have much impact since the error bars
   are normally > 1% anyway. However, where CX is small, as is often the case
   in blacked out lines, this change can significantly increase the reported
   error bars.

GFIT  Version 9.6.4    20  Nov 1996  GCT
   Hardwired the TDPBHW=0.75 for NO2. Previously, the 2900 cm-1 band
   was set to 0.5, which HMP thought was way off.

   Also, if E"=-1 in the linelist, it is now set to 999, instead of 222.
   This produces much better NO2 fits in the 2891 cm-1 region.
   This reverses the action taken in version 9.4.2.

GFIT  Version 9.6.3    20  Nov 1996  GCT
   Changed the expression for the approximate Lorentz width from
        alor=pbhw*p(ll) ! HWHM
   to
        alor=pbhw*p(ll)*trat(ll)**tdpbhw ! HWHM
   where ll is the layer having the maximum absorber concentration.
   Note that this expression is only used to decide whether to completely
   ignore a line or not, so it does not effect the forward model at all.

GFIT  Version 9.6.2    22  Oct 1996  GCT
   Found that very strong lines would prodeuce a Verr = NaN at low tangent
   altitudes. I traced the cause of this problem to the diagonal elements
   of the upper triangular matrix produced by SHFTI having values like 1.e-42.
   These are apparently not recognised as being zero, but when you try to
   divide a relatively large number by them you can get NaN. I have therefore
   changed all of the statements of the form IF(AA.EQ.ZERO) to
   IF(abs(AA).lt.1.e-38) and this seems to fix the problem,

GFIT  Version 9.6.1     6  Aug 1996  GCT
   Simplified and improved FINDFILE so that it now implicitly searches
   the partition where the last spectrum was found as the first attempt
   of the systematic search loop. This completely eliminates the need
   for a seperate code fragment to search the last partition. 
      The old FINDFILE also appeared to have a bug in that it would only
   conduct the search over NP-1 partitions, which is fine if it has already
   explicitly searched the partition where the last spectrum was found,
   but not if it is the first spectrum. In the latter case, the last
   partition in the list would be omitted. ESMOS benchmark now takes 42-43s.

GFIT  Version 9.6.0    21  Jul 1996  GCT
   While waiting in Lynn Lake, I compiled GFIT using the F2C compiler
   under LINUX, and also ran it through the FTNCHEK code checker.
   Although it did compile and execute correctly, several warnings
   were issued, which I decided really ought to be cleaned up:
   The function NSUBSTR was converted into a subroutine (SUBSTR)
   because it changes one of the input parameters (the index array)
   and functions are not really supposed to change the inputs.
   I also raised several of the REAL*4 variables to REAL*8 to avoid
   instances of mixed precision arithmatic and unnecessary conversions.
   In perhaps the most important instance, PROFZL.F was changed so that
   the frequency offset parameter is now R*8 instead of R*4. This makes
   it consistent with the convention that all frequency variables be R*8.
   However, the innermost DO LOOP which calls VOIGT and builds the
   VAC array was kept as single precision for greater speed.
   Also, since VOIGT, SUBSTR, and POSNALL are only ever called from
   ABSCOF, I declared them as INCLUDE files, rather than define them
   in the MAKEFILE.

GFIT  Version 9.5.0    18  Jun 1996  GCT
   For pseudo line-lists (ISO=0) ABSCOF now sets the 1/e Doppler half-width
   equal to 2/3 of the line spacing, which reduces the "ripple" to 2%. This
   allows the actual Doppler widths to be used in "molparam.dat" so that
   gases (e.g. ClNO3) which have merged proper and pseudo-line lists can
   be correctly handled. ESMOS benchmark now takes 43-44 s.

GFIT  Version 9.4.6    17  Jun 1996  GCT
   Realized that the test used to check that JISO < MISO was ineffective
   because it was performed after the "molparam.dat' file had been read
   and several variables might already have been trashed. To avoid the
   complication of passing MISO to the VIBPAR subroutine, I decided to
   bring the VIBPAR code up into the main program.
      At the same time I tidied ABSCOF up; converting most of the upper case
   code to lower case, and simplifying the code and eliminating unnecessary
   variables.  Also changed the definition of DOPP to be the half-width at
   1/e maximum instead of 1/2 maximim.
      None of these changes made any difference to the results produced by
   GFIT. The ESMOS benchmark now takes 44-45 s.

GFIT  Version 9.4.5    13  Jun 1996  GCT
      Fixed a bug in VIBPAR whereby JISO was not initialized. This meant
   that the second time VIBPAR was called JISO continued to be incremented
   from its value at the end of the previous call. This would cause it
   to exceed the array dimansions and start overwriting other variables.
   Finally, when it trashed the loop variable (NN or NISO) the program
   would stop. This bug was fixed by a simple JISO=0 statement at the
   beginning of VIBPAR.
      Removed the array TDV (temperature-dependence of VACS) from the
   parameter list of the call to ABSCOF.
      Also, changed the format of the Vfact column from E10.3 to F10.4
   to allow more precision when computing averaging kernels.

GFIT  Version 9.4.4     3  Jun 1996  GCT
      Introduced a curvature correction for N2O5 , and introduced the new
   linelist into gct.h92, and updated the length in ABSCOF.F

GFIT  Version 9.4.3    21  May 1996  GCT
   Increased the size of the GCT.H92 linelist to 114861 after adding
   additional CHF2Cl lines in the 1080 to 1335 cm-1 region.

GFIT  Version 9.4.2    18  May 1996  GCT
   Changed the statement in ABSCOF.F from
        if(eprime.lt.0.0) eprime=999.     ! CH4 lines with E"=-1 are common
   to
        if(eprime.lt.0.0) eprime=222.     ! CH4 lines with E"=-1 are common
   The latter gives a much better fit to the 2966 cm-1 CH3Cl region.

GFIT  Version 9.4.1     8  Apr 1996  GCT
   Changed the format of the slant path file from
      (a14,5f8.3,150f7.3)
   to
      (a14,5f9.4,150f7.3)
   in order to retain the full precision of the solar zenith
   angles (the pointing offsets are stored to 4 decimal places
   in the runlog). Similar changes were made to GSETUP, GGGAVG
   NNRET,BATRET, and ZENANG. This allows the SOLZEN=ASZA+POFF,
   to be tested to detect a spectrum mis-match (the spectrum
   name would be better, but it is not present in the .lav
   file because IDL cannot read mixed, unformatted, records).

   This change means that all of the old intermediate files
   (e.g. .in .hg, .lav) are incompatible with the new software.
   The .col and .mav files are still OK.

GFIT  Version 9.4.0     5  Apr 1996  GCT
   Re-introduced the array AIRMASS(MTG) which is the ratio of the
   slant to vertical columns. This is now tested and if it exceeds
   999.999 (as can happen if the original vertical profile has
   large discontinuities) then it is written as 999.999, avoiding
   the ******* in the .col file which otherwise upsets GGGAVG.

GFIT  Version 9.3.9     4  Apr 1996  GCT
   Included the counters MAVFOUND and MAVMISSING to summarize the
   usage of the .mav files. This should allow the user to tell if
   any desired .mav files were not found, or if any unwanted .mav
   files were found, without having to inspect every line of the
   screen output.

   Fixed a bug which was causing the measured and calculated
   spectra to be apodized differently whenever an unknown
   apodization function (e.g. 'XX') ws used. Now, GFIT stops
   when this occurs after giving a error message.

GFIT  Version 9.3.8     1  Apr 1996  GCT
   Increased the retrace threshold from 5x to 6x

GFIT  Version 9.3.7    28  Mar 1996  GCT
   replaced the code
       call scov2(pd,nmt3,ntg+3,ip,var,ierr)
       call vmov(pd,nmt3+1,ex,i1,ntg+3)
   with
       call scov2(pd,nmt3,ntg+3,ip,var,ierr)
       if(ierr.eq.0) then
          call vmov(pd,nmt3+1,ex,i1,ntg+3)
       else
          call vmov(1/tau**2,0,ex,i1,ntg+3)
       endif
   so that when SCOV2 fails (e.g. extremely strong lines) a reasonable
   error estimate is made, rather than whatever garbage happened to be
   in EX at the time. 

GFIT  Version 9.3.6    21  Mar 1996  GCT
    Changed variables STREN, SOPI & TNU from REAL*4 to REAL*8 in order
    to avoid floating point exceptions (underflow) when reading linelists
    (e.g. HITRAN92) containing strengths less than 1.E-39.
    Increased all file/path names to 80 characters for compatibility with FWI.

GFIT  Version 9.3.5     7  Mar 1996  GCT
    In order to allow me to do Aaron Goldman's NDSC exercise.
      - disabled pressure shifts 
      - if E"=-1 then E"=0 (instead of E"=999cm-1)
      - increased width of line search from
              nuoff= 5.D0*dsqrt(grid*nc*p(1))
        to
              nuoff=10.D0*dsqrt(grid*nc*p(1))

GFIT  Version 9.3.4     4  Mar 1996  GCT
    The frequency shifts was being underestimated on Aaron Goldman's
    spectra, due to the fact that with  gint=0.25 mk; grid=1.9 mk;
    rdec=0.126, so that the previous expression for the a priori weight   
                rae(ntg+3)=0.5/rdec
    was giving far too much weight to the a priori estimate. Fixed this
    problem by setting
                rae(ntg+3)=0.5/(1.+rdec)

GFIT  Version 9.3.3     3  Mar 1996  GCT
    In order to allow Bhaswar to analyze Aaron Goldman's pre-apodized
    weak Norton-Beer synthetic spectra, I have changed GFIT so that
    there are now two variables, APO_M and APO_C, representing the
    apodization to be applied to the measured and calculated spectra
    respectively. If APF (in the runlog) is 'BX', then APO_M and APO_C
    will both be set to the default apodization in the .ggg file.  On
    the other hand, if APF is anything else, APO_M=0 and APO_C=code(APF)
    so that the calculated spectrum will be apodized to match the measured
    spectrum, irrespective of what the .ggg file says.

GFIT  Version 9.3.2    27  Feb 1996  GCT
    Fixed a bug in SLPATH which occasionally caused all the slant paths
    to be returned as zero when asza=90 degrees. This was due to rounding
    error in the statement
        IF( (TH-PIBY2)*(TH-PIBY2-DT) .LE. 0.0D0) THEN
    causing the value to be -ve and hence terminating the ray tracing
    even though TH-DT = 90. This was fixed by defining THWAS=TH before
    TH=TH+DT and then replacing the earlier statement by
        IF( (TH-PIBY2)*(THWAS-PIBY2) .LT. 0.0D0) THEN

    Also defined a variable BEND1 to be used for the GETSP calls in the
    loop over the FOV so that the total bending angle of the chief ray
    would not be overwritten.

    Finally, fixed a slight inconsistency in the value of PI between SLPATH
    and GETSP. None of these changes should make any difference to the
    absorber columns returned by GFIT, since a ASZA of exactly 90 degrees
    is rarely seen on practice.

GFIT  Version 9.3.1    13  Feb 1996  GCT
    Changed the a priori continuum level from the mean OBSRVD value
    across the entire window, to 0.5*(obsrvd(1)+obsrvd(nmp)).

    Decreased TAU, the rank deficient threshold for SHFTI, from 6e-04
    to 6e-05 in order to allow the retrieval of ClO from McMurdo spectra.
    Previously, it had complained of rank deficiencies.

    Also, reduced the parameter NTERM from 6 to 4 in FM to try to
    increase the damping on the frequency shift which currently is
    prone to oscillate.

GFIT  Version 9.3.0    12  Feb 1996  GCT
    Made two changes to try to make the elements of the PD matrix
    more similar in size. Hopefully, this will prevent the occurrence
    of "Rank Deficient".

    Changed the units of frequency shift from GRID to GINT, reversing
    the change made in version 8.1.3, which was intended to maintain
    the relative importance of the a priori and the measurement between
    spectra with different values of GINT. An unfortunate side-effect
    of this change was that since GINT was nearly always larger than
    GRID, it increased the size of the elements of CX(NTG+3) and hence
    decreased the size of its PD's, which led to rank deficiencies when
    analyzing shallow lines in noisy spectra. However, by expressing
    the a priori covariance RAE(NTG+3)=0.2/RDEC instead of 0.1, its
    relative importance will be the same as 8.1.3, but without the
    problem of the rank deficiencies.

    Multiplied the TILT PD's by a factor CX(NTG+1), so that now all the
    PD's scale with PD(NTG+1). This require that the statement
              dx(ntg+2)=dx(ntg+2)*fs
    be replaced by
              dx(ntg+2)=dx(ntg+2)*cx(ntg+1)*fs
    to compensate.

GFIT  Version 9.2.9     2  Feb 1996  GCT
    Fixed four minor bugs:
    1) When fitting laboratory spectra (without running GSETUP) the name
    of the user-supplied .mav file is often not the one that GFIT searches
    for. Previously, if it did not find it, ABSCOF was not called. Now it
    searches for the .mav file named in the .ggg file.
    2) When fitting a spectrum with SNR=0, ynoise became inf, which screwed
    everything up for that spectrum and all the subsequent ones. Now, SNR
    is set to 1 if it is 0.
    3) When trying to fit a bad spectrum with an OPD=0.01, GFIT must
    calculate a very wide slit function and therefore precompute VACs over
    a very wide interval, which causes the primitive grid to be stretched
    to fit in the available memory. Now it give a warning when OPD < 1.0.
    4) Defined the parameter MSP=MVA/20 to avoid having to change the code
    in two places (the parameter statement and the test on MSP) whenever the
    denominator (20) needs adjustment.

GFIT  Version 9.2.8    22  Jan 1996  GCT
    While fitting CO2 at 2300 cm-1 for ATMOS, I noticed that when the very
    strong CO2 lines became extremely saturated (at low altitude) they
    where underestimated in width by the FM calculation. This was remedied
    by reducing parameter FRAC in ABSCOF from 0.001 to 0.0001, so that now
    the line wings are computed out until they capture 99.99% of the line
    absorption (instead of 99.90% previously). Of course, this will slow
    down the FM calculation slightly, but not the spectral fitting.

GFIT  Version 9.2.7    16  Jan 1996  GCT
    Fixed a bug in PROFZL which caused the ILS of a triangularly apodized
    interferogram to be computed incorrectly as SINC(T)**2.  This caused
    the ILS to be too narrow for Justus's 1993 Spitsbergen spectra. The
    correct expression is SINC(T/2)**2. The ILS of a "box-car" is SINC(T).

GFIT  Version 9.2.6    15  Jan 1996  GCT
    The 3161 cm-1 CO2 window was not converging due to the iteration
    repeatedly retracing its steps. Increasing the retrace threshold from
    4x to 5x worse eliminated this problem.

GFIT  Version 9.2.5     9  Jan 1996  GCT
    A problem came to light when retrieving to3 in the 0.07 cm-1 wide
    989 cm-1 window in which only 4 spectral points reside for 0.015 cm-1
    resolution spectra. Occasionally, the rms fit would be 0.00% which
    would result in a calculated error of only 0.6% (from the zero offset). 
    To prevent this, the uncertainty in the VFACTs are now divided by a factor
          (0.1+nmp-ntg-3)/(nmp+0.1) = 1-(ntg+3)/(nmp+0.1)
    in order to correct for the fact that since we are fitting NTG+3 variables,
    the number of degrees of freedom is reduced to NMP-NTG-3.  The extra 0.1
    avoids a zero-divide when NTG+3=NMP.  This change will increase the size
    of all uncertainty estimates, especially for very narrow windows.

    Further increased the number of different allowed gases to 63 to support
    Bhaswar's HCl retrievals.

GFIT  Version 9.2.4     8  Dec 1995  GCT
    Changed GFIT & GSETUP so that the .mav & .in files are named consistently.
    For ground-based observations they will be called gndyydoy.mav, whereas
    for balloon observations they will be balyydoy.mav. The models all have
    similar prefixes as do the vmr sets. The latter also now have the extension
    .vmr instead of .set or .oss.

GFIT  Version 9.2.3    30  Nov 1995  GCT
    Increased the dimension of MGAS and MISO in ABSCOF.F so that Bhaswar can
    do ground-based profile retrievals using dummy gases to represent various
    altitude segments.

GFIT  Version 9.2.2    27  Nov 1995  GCT
    Corrected a bug which allowed +ve frequency shifts to exceed the range of
    the NCPTOT points precomputed in VAC. Frequency shifts are now limited to
    a maximum of 2*(resn+grid). Also, included an IF statement to limit the
    TILT if it ever exceeds the continuum level.

GFIT  Version 9.2.1    25  Nov 1995  GCT
    For the early iterations, a logarithmic form of the residuals is now
    employed. This gives much faster convergence in the case when the initial
    guess is far from the actual solution. After convergence has been achieved,
    the iteration is re-started from this point, but using the linear form
    of the residuals.

GFIT  Version 9.2.0    25  Nov 1995  GCT
    I now use a more elegant method of calculating the error contribution to
    the columns due to uncertainty in the zero level. After convergence has
    been achieved, I now simply add ZERR to the residuals and compute DX,
    which is then added in quadrature to EX.

GFIT  Version 9.1.5    25  Nov 1995  GCT
    The computation of the forward model and the PD's is now all performed
    inside the subroutine FM. This considerably simplifies the main program.
    It also allows the arrays PTSPEC and PTSVAC to be eliminated since FM
    uses the last two columns of SPVAC for work space. ESMOS3 benchmark now
    executes in 33s, giving results virtually identical to those previously.

GFIT  Version 9.1.4    16  Nov 1995  GCT
    Cleaned up some of the code in GFIT and NEWDEC relating to the handling of
    the slit operator. Previously, PROFZL was called with 1+2*(NHW*LDEC+LDEC/2)
    as the full width of the operator. This caused problems if LDEC were odd
    as I discovered when testing it with LDEC=1, RDEC=1, which should be a
    do nothing operation.

    Now PROFZL is called with 1+2*NHW*LDEC. Moreover, PROFZL now has the
    capability to compute a slit function containing an even number of points,
    althout we corrently always calculate an odd number. 
    This change makes no difference to the results produced by GFIT.

GFIT  Version 9.1.3    14  Nov 1995  GCT
    In preparation for an upcoming major revision of GFIT, I have introduced
    the array SPVAC which contains the SP.VAC product summed over all levels.
    This is only calculated once for each new spectrum, since the observation
    geometry does not change as we iterate the absorber amounts (CX). So SPVAC
    can then be used to directly compute all the transmittances and the PD's,
    eliminating the need for subroutine GETVAC or array VFSP. The pre-
    computation of this intermediate product (SPVAC) speeds up the fitting
    of the spectra significantly. The ESMOS exercise, which is dominated by
    the pre- computation of VAC, nevertheless went from 50.4s to 43.6s. For
    runlogs in which larger numbers of spectra are computed from the same
    VACs, the improvements should be greater. The only penalty is the need
    for an extra array of dimension (MVA/60 = 1 Mbyte). The results produced
    by this new program version should be identical to those previously.

GFIT  Version 9.1.2     9  Nov 1995  GCT
    Added curvature correction for CCl4 to VIBPAR.

GFIT  Version 9.1.1    15  Oct 1995  GCT
    ??

GFIT  Version 9.1.0    10  Oct 1995  GCT
    Changed the hardwired parameter LDEC=8 to be a free variable. LDEC is
    the factor by which the ILS is oversampled with respect to GRID. This
    change allows a more optimum value to be chosen avoiding overcomputation
    of the slit function in cases where the spectra resolution of the
    measured spectra is already far larger than GRID (e.g. F113).

GFIT  Version 9.0.1     1  Oct 1995  GCT
    To avoid the output from ABSCOF being written to screen every time
    the VACs are recomputed, it now writes to a file named 'ABSCOF.RPT' for
    subsequent calls, so that the flow of parameters retrieved from each
    spectrum is not interrupted.

GFIT  Version 9.0.0     1  Oct 1995  GCT
    A major revision in which GFIT searches the local directory for a
    YYDOY.MAV file every time the DOY increments. If it finds one, it
    uses it to recompute the absorption coefficients. if it fails to find
    one it simply continues to use the previous one.

GFIT  Version 8.3.8    22  Sep 1995  GCT
    Re-introduced the variable NLOW into GFIT so that it automatically
    skips any unused levels when it reads in the .obs and .mav files.
    This simplifies NNRET and GSETUP; the latter previously had to create
    a temporary file, which was re-read after determining NLOW. it also
    avoids having to add an extra lower level to the insb files just in case
    the wider HgCd FOV requires it. This change should produce no different
    in the results and is fully compatible with earlier versions of GSETUP.

GFIT  Version 8.3.7    20  Sep 1995  GCT
    Replaced the statement (in ABSCOF.F)
              flinwid=3+min0(y/frac,sqrt(y*sxopidw/tnulst))/godw
    with
              flinwid=(3+min0(y/frac,sqrt(y*sxopidw/tnulst)))/godw
    in order to avoid problems when y=0 (pbhw=0) and the Doppler width
    is > 3 grid points. The latter formulation is actually more consistent
    with the old usage.

    Also, re-enabled pressure shifts (which had been set to zero for the ESMOS
    intercomparison).

GFIT  Version 8.3.6    18  Sep 1995  GCT
    Replaced all 0's and 1's in calls to VSUB routines with parameters i0
    and i1. This will stop complaints by the Microsft compiler on the PC.

GFIT  Version 8.3.5    15  Sep 1995  GCT
    Changed FINDFILE to look for Justus's spectra in /mk4data6/spit/
    also, to improve efficiency when reading a sorted list of spectra
    spread over several CDROMS, FINDFILE now searches partition IP+1
    instead of 1  after failing to find a spectrum at the location (IP)
    of previous success.

GFIT  Version 8.3.4    10  Sep 1995  GCT
    Made changes to PROFZL, FETSPE and GFIT to correctly support the 'TR'
    apodization functions employed by some of Justus's early spectra.
    This was not completely straight-forward due to the fact that the
    measured spectra must not be apodized whereas the synthetic spectrum
    must. It is now assumed that if APF='TR', no further apodization will
    be applied to the measured or synthetic spectra, even if the user-
    supplied default APO (in the .ggg file) says otherwise.

    This change should make absolutely no difference to the results
    obtained under APF='BX'.

GFIT  Version 8.3.3     8  Sep 1995  GCT
    Placed an empirical temperature correction in VIBPAR specifically for F22.

GFIT  Version 8.3.2     6  Sep 1995  GCT
    Fixed another bug discovered when fitting Varanasi's CFC-22 Q-branch
    spectra, which only extend from 828.95 to 829.16 cm-1, this time with
    a window of width 67 cm-1: I got the warning 
       write(6,*)'Window will be clipped for this particular spectrum.'
       write(6,*)'To avoid future clipping increase parameter MMP to'
    Of course, GFIT assumed that the Varanasi TDLS Q-branch spectra of
    point spacing .0002 cm-1 extended over the entire 67 cm-1 interval,
    and so it though that array parameter MMP was insufficient. 
    
    So I simply deleted the test in the early part of GFIT: When it calls
    FETSPE it will find out for sure whether it can read the whole spectrum.

GFIT  Version 8.3.1    30  Aug 1995  GCT
    Fixed a bug discovered when fitting Varanasi's CFC-22 Q-branch spectra,
    which only extend from 828.95 to 829.16 cm-1, with a window of width
    0.28 cm-1. Since the NMP returned by FETSPE was much less than that
    anticipated, the test to limit the frequency shift was improperly
    activated. This was corrected by replacing the statement
          elseif(rva+ncp+nsh.gt.ncptot) then
    by
          elseif(rva+nmp*rdec+nsh.gt.ncptot) then
    Of course, for the normal situation in which the spectrum under analysis
    is wider than the window, this will have no effect.
  
GFIT  Version 8.3.0    31  Jul 1995  GCT
    Placed an empirical temperature correction in VIBPAR specifically for F11.
    This corrects the quadratic dependence that could not be removed simply
    by adjusting the line strength and E". Now, when used in conjunction with
    the new list, GFIT will return all TOTCONS within 1% of unity for all of
    Varanasi's laboratory spectra.

GFIT  Version 8.2.1    30  Jul 1995  GCT
    Noticed that the errors returned by GFIT increased linearly with the
    continuum level, so that if I increased the ESMOS continua from 1.0 to
    1.6 by changing SCALE from 32768 to 20000, then the error bars all grew.
    This was remedied by dividing the effective noise level fed to SCOV2
    by CX(ntg+1). I then simplified the expression RMSWAS*SNR/CX(ntg+1) by
    replacing it with RMSWAS*RNOISE*CORRLD. This allowed me to define
    RNOISE = 0.4*SNR/CX(ntg+1)/CORRLD, where the factor 0.4 expresses the
    fact that that it is virtually never possible to fit a spectrum down
    to the claimed noise level - usually the final rms is 2-3 times larger.
    This way GFIT can get the right answer without offending the owner of
    the spectra.

    Note that the 0.4 has no effect (to first order) on the error bar
    returned by GFIT. It merely reduces the relative weight of the spectra
    compared with the "a priori" estimates.

GFIT  Version 8.2.0    27  Jul 1995  GCT
    Reduced the TNULST threshold in ABSCOF.F from 0.5e-6 to 1.e-8. This
    larger reduction was necessitated by the switchover to the Bell's new
    ClNO3 line parameters which has many more lines, but which are all
    much weaker than previously.

    An unfortunate side-effect of reducing TNULST is that ABSCOF would now
    compute the shape of every line over an interval which is 7.071 times
    wider than previously, which slows things down considerably. So I
    introduced an additions criterion: ABSCOF now terminates computation
    of a line wing if either (i) the absolute absorption coefficient falls
    below TNULST, or (ii) the remaining integrated absorption is less than
    FRAC of the total. Note that the former criterion is dependent on the
    strength of a particular line whereas the latter is not.

GFIT  Version 8.1.13   26  Jul 1995  GCT
    I now read the slant paths during the first loop in GFIT. This avoids
    wasting time computing VACs only to have the program subsequently crash
    duo to an error while reading the slant path file, which can easily
    occur if the file was prepared by hand. Also, GFIT now checks that the
    number of levels at the top of the slant path and the MAV files are
    identical.

GFIT  Version 8.1.12   21  Jul 1995  GCT
    Replaced subroutine SEEKFILE with FINDFILE. The latter is much simpler
    since it explicitly contains all of the pathnames to be searched.

GFIT  Version 8.1.11   18  Jul 1995  GCT
    Divided the PD's and residuals by the estimated measurement noise
    (1/rnoise), and removed the multiplication of RAE by the noise.
    This makes the solved equations conform to the written equations
    in the paper.

GFIT  Version 8.1.10   14  Jul 1995  GCT
    Realized that the RNORM returned by the SHFTI subroutine is usually
    much smaller than the actual norm calculated from the fit, and typically
    does not change much even when the actual norm is rapidly decreasing
    Therefore, RNORM is not a suitable input for the convergence criterion.
    Instead, I went back to using RMS & RMSWAS to determine when the
    convergence was completed. This reverses the change reported in the 
    second para of 8.1.0.

    Also, removed STEP, the variable which reduces the computed step size.
    This reverses 8.1.7.

GFIT  Version 8.1.9    14  Jul 1995  GCT
    Changed the runlog format to be able to support Justus's Spitsbergen
    spectra. Also took this opportunity to make some additional changes
    which will simplify the code and improve the frequency accuracy:
      expanded delta_nu to 11 decimal places and allowed it to go -ve
      expanded IYR to the full 4-digit integer e.g. 1995
      expanded BPW to I3 format so that it will always have a space before it
      included APF, the character*2 apodization function, e.g. "BX", "TR"
      expanded POSSP from I5 to I8 to cater to the long OPUS headers

GFIT  Version 8.1.8    13  Jul 1995  GCT
    Converted several variables from R*4 to R*8 to attempt to gain better
    frequency accuracy. These include FRQCEN,WIDTH,RVA,RDEC. This was in
    response to my observation that when observing the full 150 cm-1 wide
    Varanasi CFC-12 spectrum, the residuals in the 1161 cm-1 region were
    completely different from those observed when a narrow region was used
    which just covered 1161 cm-1.

    Also, changed the definition of measurement uncertainty from CORRLD*RMS to
    CORRLD/SNR. Since the latter does not change from iteration to iteration,
    convergence proceeds faster and avoids oscillation. Of course, the
    actual rms is used in the computation of the covariance.

GFIT  Version 8.1.7a   11  Jul 1995  GCT
    Realized that by setting MIT=1, GFIT would not have an opportunity to
    refine the initial forward model run, so that the residuals in the SPT
    file would therefore reflect the initialization. This is exactly what
    is needed in the GFITABS executable, and can now be done by one simple
    change, rather than having to also set RAE values, and uncomment lines
    of code as previously. Also, if MIT=1, we now skip the sections of code
    where the PD's are computed and CX is updated.

GFIT  Version 8.1.7    28  Jun 1995  GCT
    Introduced the scalar STEP which scales the adjustment to the state vector
    by between 0.5 and 1.0. If the norm of the fit gets worse, then STEP is 
    reduced. This helps kill oscillations which would otherwise prevent
    convergence.

GFIT  Version 8.1.6    23  Jun 1995  GCT
    Removed all calls to VSET and replaced tham with VMOV. This might be
    slightly slower, but simplifies VSUBS.F

GFIT  Version 8.1.5    23  Jun 1995  GCT
    Changed the definition of the continuum tilt CX(NTG+2) so that it
    is now expressed as a fraction of the continuum level rather than
    in absolute term. This makes it independent of changes in the scaling
    of the spectral values. This reverses the decision made in version 4.1.0,

    Also, changed the definition of tilt so that it now represents the
    fractional change in the continuum level across the entire window,
    rather than across 1 measured spectral grid point, as previously.
    This change makes TILT internally independent of the spectral point
    spacing, and hence INTERP, which makes for a more consistent enforcement
    of the "a priori" constraints. This required that VRAMP be modified.

GFIT  Version 8.1.4    20  Jun 1995  GCT
    Changed the initialization of CX(NTG+1), the continuum level, from
    AX(NTG+1)=1  to the mean of the measured spectral values. This is
    in general a much better guess than unity.

GFIT  Version 8.1.3    20  Jun 1995  GCT
    Changed the definition of the frequency shift CX(NTG+3) so that it
    is now expressed in units of GRID instead of GINT. This makes it,
    and hence the effect of the "a priori" information, more internally
    consistent between spectra having different point spacings. Of course,
    there is no change in the frequency shifts reported in the .col files
    since these are in units of cm-1.

GFIT  Version 8.1.2    18  Jun 1995  GCT
    Multiplied the NTG+3 equations expressing the "a priori" constraints
    by the rms residual of the spectral fit. This has two advantages:
    When the fit is poor, on the first iteration, the "a priori" gets
    more weight and therefore prevents the fit from over-reacting.
    This also makes the "a priori" values quantitatively consistent,
    so that if the measurements contain no information about a particular
    variable, their reported uncertainies will be precisely the "a priori"
    values. Previously, this was not the case.

GFIT  Version 8.1.0    16  Jun 1995  GCT
    Replaced the MINFIT subroutine with SHFTI. The latter employs QR
    decomposition using Householder transformations and is 3-4 times
    faster than SVD, although the total time per iteration was only
    10% faster because the computation of the FM and the PD's stays
    the same. The other advantage of SHFTI is that it is simpler to
    use: Fewer arrays are needed and the desired quantities dx & the
    covariances, are provided explicitly. Since all the retrieved 
    variables are constrained by "a priori" estimates, there is no
    danger that the matrix being inverted will be rank deficient,
    in which case SVD has no advantage whatsoever.

    Changed the convergenge criterion to a fractional error (10**-5) in RMS 
    rather than an absolute error in VAR. Also, I am now computing RMS from
    RNORM returned by SHFTI, rather than squaring the residuals explicitly.
    This, of course, includes a contribution from the departures of the
    solution vector from their "a priori" values in addition to the actual 
    spectral residuals, and is therefore slightly larger than it was,
    requiring that the actual spectral residuals be recomputed after
    convergence is achieved.

GFIT  Version 8.0.3    10  Jun 1995  GCT
    If parameter MVA is insufficient to accomodate all the desired VACs,
    then the program now automatically increases GRID so that MVA will suffice
    but warns the user of reduced accuracy. Previously it stopped.

GFIT  Version 8.0.1     6  Jun 1995  GCT
    Discovered that rounding to the nearest slit grid point, rather than
    interpolating between the two nearest, prevented convergence in many cases.
    Increasing LDEC to further oversample the SLIT function did not help.
    Therefore I adapted NEWDEC to do the interpolation, which requires two
    dot products instead of one, and so is significantly slower.

GFIT  Version 8.0.0     4  Jun 1995  GCT
    A major revision in which the frequency grid upon which the VACs are
    precomputed no longer needs to be an integral sub-multiple of the point
    spacings of the measured spectra. This will allow spectra of completely
    different point spacings to be analyzed together from the same VACs. It
    also simplifies the code at the beginning of GFIT in which the primitive
    grid is determined. The variable IDEC, which was an integer, now becomes
    real*8: RDEC = measured point spacing / primitive grid.

    This new version will allow me to analyze Varanasi's latest lab spectra,
    which have completely different point spacings, all together using the
    same VACs. This also will apply for Justus's Spitsbergen spectra.

    Surprisingly, there is virtually no speed penalty for ths significant
    enhancement of flexibility: While it is true that the indexing of the
    VAC array from inside NEWDEC becomes much messier, the inner-most loop,
    a dot product, remains unchanged.

GFIT  Version 7.4.0    26  May 1995  GCT
    Changed the way that the frequency shifts are performed. Previously they
    were accomodated by making SLIT asymmetrical internally, which had the
    advantage that the indexing of SLIT and the absorption coefficients was
    independent of the frequency shift. However, the disadvantages were that
    (i) for large shifts the asymmetry in SLIT became quite large, and (ii)
    the computation of SLIT had to be performed inside the iteration loop.

    With the new approach a few (NSH) extra absorption coefficients are
    computed on either side of the necessary spectral interval to allow for
    the frequency shifting. This is performed by (i) adjusting the index of
    the first primitive spectral point (LVA) to be used on the convolution
    with symmetrical SLIT and (ii) by oversampling the computation of SLIT
    so that any fractional frequency shift remaining after the adjustment
    of LVA can be accommodated by adjusting the index of the first point
    of SLIT to be used in the convolution. Note that the fineness to which
    the frequency shift can now be determined is not as good as previously
    and depends on the factor (LDEC) by which SLIT is oversampled. Note that
    the execution speed is independent of LDEC; increasing it only requires
    that more memory will be used for the storage of SLIT.

GFIT  Version 7.3.2    25  May 1995  GCT
    Changed the (arbitrary) sign convention for the frequency shifts so that
    shifts which were previously -ve are now +ve and vice versa. This involved
    replacing +OFF by _OFF in PROFZL.F and by changing the sign of RK in the
    calculation of the partial differentials inside GFIT. This change produced
    no effect on the outputs except for the sign of the shift. The new sign
    convention is more logical in that if the shift is +ve, than the spectral
    point spacing (in the runlog) needs to be increased.  It was done in
    preparation for a major change in the way the shifts are performed.

GFIT  Version 7.3.1    24  May 1995  GCT
    The statement  if(z(klev).ge.zmin) go to 777 was causing z(0) to be
    referenced in the case when the lowest model level exactly coincided
    with the observation altitude (e.g. the ESMOS comparison). This was
    fixed by changing the .ge. to .gt.

GFIT  Version 7.3.0    18  May 1995  GCT
    Fixed a bug which caused the outputted frequency of an absorption line
    always to be lower than the true frequency by one primitive grid point.
    This was caused by an ambiguity in the usage of the variable FZERO:
    Inside GFIT is was used as the frequency of the first stored VAC,
    whereas inside ABSCOF is was used as the point before the first one.
    I have now settled on the latter definition for both routines, which
    caused some minor simplifications to the definitions of NCP1 and LVA.
    This bug also previously caused the derived frequency shifts to change
    whenever INTERP was changed, which of course it shouldn't do.

GFIT  Version 7.2.5    12  May 1995  GCT
    Changed the format of the SPT output file header line to provide more
    precision in the frequencies and a larger possible number of points.
    It is now 2f12.6,i6,... instead of 2f11.5,i5,...

GFIT  Version 7.2.4     5  May 1995  GCT
    Reduced the threshold above which the spectral lines are written to
    the screen from 0.5E-04 to 0.1E-04. Thus, Lines having an EW between
    0.5 and 1.5 E-05 appear having an EW of 0.1 mK as before, but now lines
    having an 0.1E-04 < EW < 0.5E-04 will also appear with EW = 0.0 mK 
    This facilitates the identification of very weak lines.

GFIT  Version 7.2.3     3  May 1995  GCT
    Removed function POSNALL from ABSCOF so that it might more easily be
    shared by RH94. It is now referenced by an "include" statement.

GFIT  Version 7.2.2     2  May 1995  GCT
    Increased the value of parameter MMP to 65048 in order to accomodate
    JFB's ClCN spectrum, which is 140 cm-1 wide and 2.15 mK sampling.
    This increased the total executable size by 3.6 Mbyte to 65.5 Mbyte.
    Also changed MOLPAR.DAT making ClCN gas # 52

GFIT  Version 7.2.1    21  Apr 1995  GCT
    Included a loop of code, after the iteration loop, to calculate the
    transmittance spectrum (as seen through the ILS) of each individual
    target gas. These are stored in the array PD, which just so happens
    to have precisely the right dimensions, before being written to the
    SPT file to the right of the measured and computed total transmittances.

GFIT  Version 7.2.0    25  Mar 1995  GCT
    Changed GFIT and ABSCOF so that the names of the linelists to be used
    all appear on the same line of the GGG file. The function NSUBSTR then
    breaks up this line into its various sub-strings inside ABSCOF. This
    removes the limitation of there only being 3 lists that can be used.

GFIT  Version 7.1.12   24  Mar 1995  GCT
    Changed MOLEWT from I*2 to R*4 inside ABSCOF. This allows us to define
    fractional molecular weights (e.g. 0.01 for CFC-113).

GFIT  Version 7.1.11   23  Mar 1995  GCT
    Made CF3Cl3 (CFC-113) molecule # 51. This required changes to both
    molnum.f and molparam.dat.

GFIT  Version 7.1.10   22  Mar 1995  GCT
    Added CFC-22 to the list of gases for which the primative grid spacing
    is doubled. This is quite safe since the molecular weight of CFC-22 is
    reduced to 1 to limit the number of lines employed in the fudged list.

GFIT  Version 7.1.9    21  Mar 1995  GCT
    Made an improvement to PROFZL so that when the OFFSet tries to exceed
    NK-RESNOG it is limited to  OFF = SIGN(float(nk)-resnog,off)
    This prevents the horrible looking fits in the past when OFF was set
    to NK without any term from RESNOG.

GFIT  Version 7.1.8    18  Mar 1995  GCT
    Improved GFITs tolerence for spectra having different point spacings
    by defining IDEL, a correction to LVA, which previously chose the
    starting absorption coefficient based on the first spectral point
    returned by FETSPE. In cases when the point spacing of the returned
    spectrum differed from IDEC*GRID this led to a cumulative frequency
    shift across the window. By correcting LVA with IDEL, which is zero
    if IDEC*GRID=GINT, the effect is to match the central frequencies of
    the returned points instread of the first. This minimizes the
    frequency shift which has to be imposed.

GFIT  Version 7.1.7    17  Mar 1995  GCT
    Fixed bug in FETSPE which caused a -ve value for IPTS to be returned
    whenever the spectrum available on disk was narrower than the ILS.
    This was discovered while trying to analyse a 0.25 cm-1 wide slice of
    CFC-22 laboratory spectrum.

GFIT  Version 7.1.6    22  Feb 1995  GCT
    Fixed a bug which was causing the calculated vertical columns to be
    in error whenver the level spacing was non-unity. This bug was not
    present in version 6. It was instroduced at version 7.0.0 when the calls
    to SLPATH were moved out of GFIT and into GSETUP, and an alternative
    code was introduced to compute the vertical columns inside GFIT. Note
    that only the vertical columns were in error. The slant columns and the
    VFACTs were all fine, so the all the balloon retrievals are unaffected.

GFIT  Version 7.1.5    17  Feb 1995  GCT
    Simplified subroutine FETSPE so that it no longer needs to open the
    runlog and search for the requested spectrum, before reading the relevant
    parameters. Instead the character string RECORD, which is the relevant 
    line from the runlog, is passed to FETSPE. This avoids having to pass to
    FETSPE the spectrum name or the runlog name.

GFIT  Version 7.1.4    17  Feb 1995  GCT
    Also found a way of avoiding having to space out the raw spectral point
    at intervals of INTERP in order to perform the convolution "in place".
    Instead, they are placed at successive locations of YOBS starting at
    address  1+(interp-1)*(mpts-ns). This, of course, is unity for interp=1,
    but for larger values of interp the raw spectral values are written
    further down the array, so that when the final interpolated spectral
    values are placed starting at the beginning of YOBS, the raw values are
    never overwritten until thay have been completely used.

GFIT  Version 7.1.3 and 7.0.5   16-Feb-1995
    Upgraded the linelists to the new 1994 versions. This required that the
    number of lines in each list, hardwired in ABSCOF.F, to be changed.

GFIT  Version 7.1.2    29  Dec 1994  GCT
    Created PROFZL - a new version of PROFXL which nornalizes the slit function
    to unity. The input parameter AREA has gone.
    Also created FETSPE - a new version of GETSPE which allows the user to
    specify a frequency offset by which to resample the measured spectrum.

GFIT  Version 7.1.1    28  Dec 1994  GCT
    Added the line
      if(gint.le.zz/2)stop ' Spectral grid too fine - reduce INTERP'
    to prevent IDEC from being incorrectly computed when the interpolated
    point spacing was smaller than the necessary computation grid. Otherwise,
    this would cause "Unacceptable Scatter" and eventually array bound errors.

GFIT  Version 7.1.0    24  Dec 1994  GCT
    Re-organized subroutine GETSPE so that it no longer needed the internal
    array IRAW in which to temporarily store the raw data values. It now
    stores them temporarily in the array provided (YOBS) and overwrites the
    raw points during the convolution. This was made possible, for the case
    when INTERP>1, by spacing out the raw points at intervals of INTERP 
    inside YOBS.
    The new GETSPE is functionally equivalent to the old one, but now calls
    the subroutine FETCH to get the raw data from disk. To facilitate the
    interface to FETCH, the 16i5 ASCII format was redefined in RUNLOG so that
    the header length is now 1600 bytes instead of 20 lines. This is actually
    a more consistent with the usage adopted for the other (binary) formats,
    and is a more direct interpretation of the actual spectrum (in which each
    header line is in fact padded with blanks out to column 80).

GFIT  Version 7.0.5    16  Feb 1995  GCT
    Reduced the a priori weight given to the frequency shift from .005 to .002
    Otherwise the absorption of very weak lines is underestimated if the
    frequency shift is incorrect.

GFIT  Version 7.0.4    14  Nov 1994  GCT
    The term ERROFF (the uncertainty in the zero offset) is now inputted
    from the .GGG file instead of being hard-wired inside GFIT.

GFIT  Version 7.0.3    13  Nov 1994  GCT
    Defined the variable ZZ = 0.999999E-06*FRQCEN so that it can more easily
    be doubled for the heavy gases e.g. F-11, N2O5, without excessive editing.

GFIT  Version 7.0.2    12  Nov 1994  GCT
    The VFACT and VERR for target gases 2+ are no longer written to screen.
    This improves the intelligibility of the prior output.
    They are, of course, still written to file

GFIT  Version 7.0.1    12  Nov 1994  GCT
    The molecular weights of the heavy gases F11, F12 are now set to 1 inside
    MOLPARAM.DAT. This broadens the lines in the upper stratosphere which
    reduces the number of "fudged" lines which are necessary to accurately
    represent this absorption.

GFIT  Version 7.0.0     1  Nov 1994  GCT
    This is a major revision in which the functionality of computing the
    slant paths, along with the reading of the model and vmr set, has been
    removed from GGG and placed in MAKGGG. The new spectral fitting program
    is now named GFIT and the augmented MAKGGG is now called GSETUP.

    This re-organization simplifies the interface to GFIT to the point where
    laboratory spectra can now be analyzed.

GFIT  Version 6.3.0    25  Sep 1994  GCT
    In preparation to taking the calls to subroutines READMOD, READSET, and
    SLAPTH out of GGG and instead reading the appropriate information from
    disk files (RUNLOG.MAV & RUNLOG.OBS), I have included these file names
    into the .GGG driver files. Although the current version of GGG does not
    use them, this modification will allow the new and existing versions of
    GGG to use identical .GGG driver files. I also included the pathname to
    the "molparam.dat", and the scalar ERROFF into the .GGG driver file. The
    former is fed to VIBPAR (where it is read) via the ABSCOF parameter list.
    This version of GGG will therefore crash if executed on old .GGG drivers.
    Only use with drivers built using PREGGG version 6.3 or later.
    Note that the .COL files also have the 3 extra lines in their headers.

GFIT  Version 6.2.10   20  Aug 1994  GCT
    The statement write(lunt,88)(linfil(2)(:lnbc(linfil(2))) was causing
    a sub-string reference error (lnbc=0) on the PC, so I simplified it to
    write(lunt,88)(linfil(2).

    I also fixed a bug in SEEKFILE which caused illegal (on PC) sub-string
    references when 2 or more consecutive spectra could not be found. This
    was accomplished simply by inserting the line JIN=1 near the bottom of
    the file. Also changed some variable names to make it clearer.

    I removed unnecessary type statement from GGG & READMOD and also included
    the wavenumbers in the printing of the first & last linelist lines.

GFIT  Version 6.2.9    19  Aug 1994  GCT
    Included function height inside GGG.F instead of keeping it in a
    seperate file.

GFIT  Version 6.2.8    18  Aug 1994  GCT
    Changed MOLPAR.F so than the list of permissible gas names is now read
    from an internal DATA statement, rather than the file MOLPAR.DAT, which
    can now be deleted.

GFIT  Version 6.2.7    17  Aug 1994  GCT
    Changed ABSCOF.F so that it reads (from MOLPARAM.DAT) and displays the
    full isotopomer name, rather than just the gas name.

GFIT  Version 6.2.6    16  Aug 1994  GCT
    Divided VAR by CX(ntg+1) and OBSRVD by CNTUUM so that the residuals
    would be actual transmittances and the rms would be %.  Noticed that
    there was still some slight dependence of Vfact on SCALE - the default
    spectral divisor. This was particularly true for the ESMOSIII CO2
    window. There were no zero offsets, so the cause remains a mystery.

GFIT  Version 6.2.5     8  Jul 1994  GCT
    Altered the zerr= statement to make the retrieved column error
    independent of the initial vmr profile. It now reads
         zz=(cx(jtg)*cx(ntg+1))**2
        zerr=zerr*zz + (0.1+zz)/(zz+eps)
    This makes sqrt(zerr) proportional to both cx(jtg) and cx(ntg+1)
    while still giving rise to large errors when either is very small.

GFIT  Version 6.2.4     7  Jul 1994  GCT
    Doubled the decimation criterion (0.9999e-6*frqcen) for gases 26 & 33,
    allowing N2O5 & F11 to be retrieved using the standard size executable.
    This is a reasonable action for F11 because the lines are pressure
    broadened over the altitudes where F11 is measurable. It is less
    reasonable for N2O5, but unless we do it, we can't retrieve N2O5 within
    our current 128M of memory.

GFIT  Version 6.2.3     6  Jul 1994  GCT
    Corrected format error in the h92 read statement: the last value
    should be f8.6 and not f9.6

GFIT  Version 6.2.2     5  Jul 1994  GCT
    Finally discovered the true reason for the 1-2% differences between
    the computed columns when SCALE is changed from 15000 to 32768.
    It was due to the zero offsets being absolute is magnitude so that
    when an offset of 0.01 was applied this had a different fractional
    effect. I fixed this by multiplying the zero offset by CX(ntg+1)
    making it a fractional zero offset. Since the value of CX(ntg+1) is
    not known outside the iteration loop, the zero subtraction had to
    be moved inside. 
       To also make the error bars independent of SCALE I had to
    multiply ERROFF (the zero level uncertainty) by CX(ntg+1).

GFIT  Version 6.2.1     3  Jul 1994  GCT
    Changed SCALE back to 15000.

GFIT  Version 6.2.0     2  Jul 1994  GCT
    Noticed that changing SCALE between 15000 and 32768 made several %
    differences in the fts93268 runs. This has to be due to the statement
   		 zerr=zerr+1./((cx(jtg)*cx(ntg+1))**2+eps)
    because CX(ntg+1) is inversely proportional to SCALE.  So, I increased
    the a priori covariance of the continuum level from 0.0 to 0.01.  This
    should improves things indirectly by nearly eliminating occasions when
    CX(ntg+1) is close to zero. 

GFIT  Version 6.1.6     1  Jul 1994  GCT
    Increased SCALE back to 32768.

GFIT  Version 6.1.5    26  Jun 1994  GCT
    Increased size of character variables containing names of model, vmr
    level file, etc from 36 to 40. Also converted their declarations in
    subroutines from *32 to *(*) so that any future changes to the size
    of these strings will not require subroutines to be edited.

    Also changed variable SCALE in GETSPE from 32768 to 15000 in order to
    produce convergence for N2O5 and increased array dimensions to allow
    N2O5 retrievals along with CH4 and N2O.

GFIT  Version 6.1.4    26  May 1994  GCT
    Gathered together all the vector subroutines into a single file VSUBS.F
    This simplifies the MAKEFILE and reduces the number of small files
    lying around. Also renamed DOTPR to VDOT.

GFIT  Version 6.1.3    26  May 1994  GCT
    Restricted length of GGG write statements typed to the screen to include
    just the first target gas. This prevents the lines wrapping around. The
    .col files however contain the full write statements.

GFIT  Version 6.1.2    17  May 1994  GCT
    Made slight change to GETSPE to allow ASCII (ESMOS) spectra to be read
    on the PC, automatically skipping the first HEDLEN lines.

GFIT  Version 6.1.1    10  May 1994  GCT
    Decreased the value of THRESH, used to limit the influence of the
    smallest Eigenvectors, from 1e-6 to 1e-9. This produces larger error
    estimates especially at high altitudes.

GFIT  Version 6.1.0    10  May 1994  GCT
    Includes the correct (to the nearest integer) molecular weights for the
    isotopes, which are read in from a revized MOLPAR.DAT (molparam.dat).

GFIT  Version 6.0.0    30  Apr 1994  GCT
    This major revision changes the format of the output files. Instead of
		airmass,totcon,toterr,vcol,verr
    which contained redundant information, we now report
		ovcol,oscol,totcon,toterr
    so that vcol=ovcol*totcon, verr=ovcol*toterr, scol=oscol*totcon, etc.
    Additionally, we now include Zmin (the tangent or observer altitude).

GFIT  Version 5.2.3    28  Apr 1994  GCT
    Fudged the expression for the uncertainty to prevent the errors becoming
    very small when the totcon became very small (e.g. in saturated lines)
    The new equation is
   		 zerr=zerr+1./((cx(jtg)*cx(ntg+1))**2+eps)
    This differs from the old one by the factor cx(jtg)

GFIT  Version 5.2.2    13  Apr 1994  GCT
    Made changes to the code to make it more compatible with the PC version.
    In particular, the determination of the length of the linelists, performed
    using the INQUIRE statement on the PC, is now hard-wired on the SUN
    except for the personal linelists which are completely read to determine
    their size.
   
GFIT  Version 5.2.1    12  Apr 1994  GCT
   Can't remember what I did for this version.

GFIT  Version 5.2.0     8  Apr 1994  GCT
   In this revision GGG reads all the input information from the ASCII runlog
   instead of the spectrum header. This allows various AMAL, ZPOFF & ZOFF
   to be defined individually for each spectrum. Also, GGG (formerly GETINFO)
   is now not called at all, since all the necessary information is condensed 
   into the ASCII runlog. All frequency corrections are now done by the program
   (RUNLOG) which creates the ASCII runlog containing the final GRAW.

GFIT  Version 5.1.1    22  Mar 1994  GCT
   Changed the expression which limits the step size (again). It is now
		dx = dx/sqrt(1 + dx*dx/(0.01+abs(cx)))
   This allows the same initial (cx=1) step as before, but has the advantage
   that it cannot step all the way to zero from large CX values. Conversely,
   it permits larger steps when CX is close to zero.

GFIT  Version 5.1.0    19  Mar 1994  GCT
   Realized that there is no need for GGG to perform frequency
   corrections (Doppler shifts, FOV adjustments, WIFACT). These can all
   be done by RUNLOG and the resulting DELWAV written to the runlog file.
   GGG then just uses DELWAV at face value. This simplifies RRR and GETSPE
   considerably. It also reduces the breadth of the runlog file because
   LASF, DOPP, TINS, PINS, & HINS no longer need to be there.
	I also got rid of SPMAX because it was not used for anything.

GFIT  Version 5.0.6    17  Mar 1994  GCT
   Removed the statement GRAW=GRAW*(1+dopp/3.e8) from GETSPE since
   it was already corrected in RRR. With this fix I could fit the frequency
   shifts of the ATMOS Atlas 1 spectra (dopp=5 km/s) to better than 1 mK.
	Removed DOPP from the parameter lists of RRR and GETSPE, since
   there was no need for it in the main program. RRR uses it internally
   to correct the spectral point spacing i.e. [DELWAV=DELWAV*(1+dopp/3.e8)]

GFIT  Version 5.0.5    15  Mar 1994  GCT
	Implemented the pressure shift correction in abscof.f, tested it,
   and then dis-abled the feature for the time being because it was
   altering the frequency shifts on my HCl benchmark.

GFIT  Version 5.0.4    14  Mar 1994  GCT
	Changed the expression which limits the step size. It is now 
		dx = dx/sqrt(1 + dx*dx/(0.01+cx*cx))
   This better prevents CX going -ve in blacked out spectral regions which
   was previously giving rise to unrealistically small error bars.

GFIT  Version 5.0.3    13  Mar 1994  GCT
   Chenged the way the intensity offset was applied from
	ZOFF = XOFF * (obsrved(1)+obsrvd(nmp))/2
   to
	ZOFF = XOFF
   Thus it is no longer interpreted as a fraction of the local continuum.
   I changed this because in blacked out spectra regions the intensity
   offset was not having any effect.

GFIT  Version 5.0.2    14  Feb 1994  GCT
   Made changes to GGG and MAKGGG to allow it to accomodate up to 56 different
   gases. The was done to allow Bill Irion to do heavy ozone retrievals.
   Changes were made to MOLPAR.DAT, MOLNUM.DAT,.....

GFIT  Version 5.0.1    11  Feb 1994  GCT
   Enabled ABSCOF to read the HITRAN92 linelist (ascii). This required
   passing an additional parameter to POSNALL (the format) so that it can
   position in either list. To switch from one linelist to another
   requires editing ABSCOF, uncommenting the lines you want, and recompiling.
   After testing this feature on the ESMOS3 spectra I set it back to ATMOS.

GFIT  Version 5.0.0     8  Feb 1994  GCT
	In this major revision we have gone back to ASCII runlogs as the
   primary source of information about the spectrum. These runlogs contain
   all the information necessary to perform a quantitative analysis of that
   spectrum. The attached spectrum headers are therefore not read any more.
	The main reason for this change was to avoid having to re-archive
   (to CDROM) an entire set of spectra every time a parameter (e.g. ASZA or
   FOVI) was changed in value.
	A second benefit is that since the new runlog format is "universal"
   (i.e. identical for all different instruments: MkIV, ATMOS, Bruker etc.),
   GGG becomes independent of the instrument type. This simplifies the code
   (especially GETINFO) since it now only has to support one format - the new
   universal format.
	The third reason for making this change is that we now wish to
   introduce additional instrumental parameters (angular misalignment,
   zenith pointing offset, Doppler shift, intensity offset) for which no
   slots exist in the current attached header. 

GFIT  Version 4.7.7    18  Feb 1994  GCT
   Converted ABSCOF to read the linelists in HITRAN92 format instead of ATMOS
   ascii format. These new files are called *.h92 instead of *.asc.
   This has 3 advantages:
   (1) direct compatibility with the HITRAN92 linelist, allowing other users
       who do not have access to the atmos list to run GGG.
   (2) the new linefiles will be smaller (100 characters wide instead of 120).
   (3) the F11 and N2O5 PBHWs can be reformatted to avoid the ***** which
       existed in the old linelists.

GFIT  Version 4.7.6     5  Feb 1994  GCT
   Created seperate arrays for TRNSMT, CALCUL to better distinguish the
   transmittances from CALCUL (=TRNSMT*CNTUUM). This allowed the PDs for
   the frequency shifts to be calculated directly from CALCUL, rather than
   from TRNSMT and then post-multiplied by CNTUUM.
	Also, reordered some of the calls in the iteration loop to facilitate
   computation of the effective spectral resolution, even though this code
   has not yet been implemented.

GFIT  Version 4.7.5     6  Jan 1994  GCT
   Added another term in the error estimate of magnitude ZOFF/CNTUUM which
   prevents the error bar from being underestimated in completely blacked
   out spectral regions when an uncancelled zero offset is present.

GFIT  Version 4.7.4    31  Dec 1993  GCT
   Removed use of the variable CALBAR. Instead a contribution to EX from
   the uncertainty (ZOFF=0.5%) in the zero level is computed.

GFIT  Version 4.7.3    29  Dec 1993  GCT
   Moved the computation of EX to outside the iteration loop. Also, changed the
   Eigenvector rejection criterion from  IF(W(k).gt.thresh) THEN   as suggested
   in Numerical Recipes to the 'smoother' form below suggested by Lawson
            DX(i) = DX(i) + PD(i,k)*RESID(k)*W(k)/(thresh**2+W(k)**2)
            EX(i) = EX(i) + PD(i,k)*2/(thresh**2+W(k)**2)
   This made no difference to the retrieved burdens or their errors in well
   defined windows, but I expect it will in other windows. This change also
   eliminated the warning message 'Near-singular Eigenvalue rejected'.

GFIT  Version 4.7.2    28  Dec 1993  GCT
   Changed several of the variable names in GGG.F to make them more expressive
   and less confusing. For example, NN was previously the number of non-target
   gases being retrieved and NNMAX was the maximum number of storable VAC
   elements.
   I have also implemented a self-consistent naming convention whereby array XYZ
   has a declared dimension of MXYZ but only NXYZ elements are actually used.

GFIT  Version 4.7.1    20  Dec 1993  GCT
   Halved the threshold for ABSCOF to print out a spectral line (from 0.0001
   to 0.00005). These will still be expressed as E-wid = 0.1 mK

GFIT  Version 4.7.0    17  Dec 1993  SEN
   removed from ggg.f the statements allowing explicit spectral fittings
   at 1.88 mk, 0.94 mk, and 0.47 mk.

   included in the statement, in abscof, reading linelist information is a
   branch to line 3237 in case of i/o error. iostat variable 'ios' contains
   the fortran error number (zero when no error; +ve otherwise.) the fix
   allows abscof to read sup.asc in spite of bad data fields in the linelist.
   abscof will return successfully all relevant information in the frequency
   range nu1 through nu2. analysing target molecules with bad data fields will
   continue to be a problem.

GFIT  Version 4.6.8    29  Nov 1993  SEN
   included the statement "if (runlab(4:5) .eq. 92) fovi=fovi*1.2" to
   allow analysis of 1992 fts balloon spectra archieved to cdrom
   mk4.002.

GFIT  Version 4.6.7    27  Nov 1993  GCT
   Included the statement  IF(EPRIME.lt.0.0) EPRIME=300.0  in ABSCOF.F
   This was done because I noticed that the linelist contains CH4 lines
   having E"=-1, which means that it is unknown. I believe that in
   cases when E" is unknown, 300 will be a better guess than -1.
   When tested in the HCl 2963 window this modification improved the
   rms fit from 0.70 to 0.66.

GFIT  Version 4.6.6    26  Nov 1993  GCT
   Increased the default InSb Intensity offset from 1% to 2%.

GFIT  Version 4.6.5    25  Nov 1993  GCT
   To further discriminate against blacked-out spectral lines where
   CALBAR*CX(NT+1) is small, I now divide the error estimate by this
   quantity rather than its square root. This should make no difference
   to the retrieved burdens, only their errors will change.

GFIT  Version 4.6.4    24  Nov 1993  GCT
   Limited the maximum step size to DX/SQRT(1+4*DX**2) instead of
   DX/SQRT(1+DX**2) to further limit the step size for DX > 1.
   Note that for DX < 1 the limited step size tends to DX. 

GFIT  Version 4.6.3    23  Nov 1993  GCT
   Redefined the variable CALBAR as CALBAR/SQRT(1+(CALBAR-1)**2) thus
   preventing it ever exceeding unity. This was necessary to avoid very
   small error estimates whenever the absorber amount became -ve and
   the calculated transmittances became >> 1.

GFIT  Version 4.6.2    14  Nov 1993  GCT
   GGG now recognizes runs labeled as OBR, MER and LSI as being MkIV data.
   Previously it only recognized INT.

GFIT  Version 4.6.1     5  Nov 1993  GCT
   Corrected a problem in SLPATH whereby WAVMIC was not used in the
   final tracing of the ray path (WAVTKR was used instead). I do not
   expect this will make a noticable difference to the results.

GFIT  Version 4.6.0     1  Nov 1993  GCT
   Fixed a bug in READSET which caused the vmrs of the last gas in the
   set (usually SF6) to be ignored. This led to GGG not computing any
   absorptions for the last gas, and caused eigenvalues to be discarded
   if it were made a target gas.

GFIT  Version 4.5.9     5  Sep 1993  GCT
   Decreased the dimension of array CONC, which holds the original
   concentration profiles of the target gases, from NLMAX to NTMAX.
   This will not change the retrieved values, it will just save memory.

GFIT  Version 4.5.8     1  Sep 1993  GCT
   Decreased the step size from 5 to 2 km in GETSP which is part of SLPATH,
   and increased MAXSTEP to 3333. This reduced the scatter in the slant paths.

GFIT  Version 4.5.7    28  Aug 1993  GCT
   Hardwired FOVOUT to 3.6 (mrad) in GETINFO for all MkIV spectra. This
   was done to prevent changes to FOVR, made to better represent the ILS,
   affecting the slant paths. Also, this ensures that the HgCd and InSb
   slant paths are identical, so that it does not matter which .OBS file
   GGGRET reads.

GFIT  Version 4.5.6    26  Aug 1993  GCT
   Increased CO2 molecular weight from 44 to 45 in MOLPAR.DAT.
   Most of the lines that we use are actually heavy isotopes (45 or 46).

GFIT  Version 4.5.5    25  Aug 1993  GCT
   Changed the -C (array bound checking) compiler option in the MAKEFILE
   to -O (optimize). This ran 3.4 times faster to produce identical results.

GFIT  Version 4.5.4    24  Aug 1993  GCT
   Implemented an intensity offset subtraction currently hardwired to 1% of
   the local continuum for MkIV InSb spectra and 0% for everything else.

GFIT  Version 4.5.3    21  Aug 1993  GCT
   Now limit the step size to dx/sqrt(1+dx**2) to prevent really large steps.
   Also, included the logical variable DEBUG which, when true, prints out the
   diagnostics each iteration.

GFIT  Version 4.5.2    20  Aug 1993  GCT
   ABSCOF now warns the user whenever a line is found whose width is less than
   that of the primative grid.

GFIT  Version 4.5.1    20  Aug 1993  GCT
   Moved the  IF(nsvac.gt.nsmax)STOP  statement outside the spectrum loop (77)
   so that if several spectra will have slit functions exceeding NSMAX, it
   will only report the largest, and not stop at the first exception (which
   may not be the largest).
 
GFIT  Version 4.5.0    19  Aug 1993  GCT
   Replaced subroutine PROFWL with PROFXL. The latter does the convolution
   of the SINC and the RECT in real (frequency) space rather than Fourier
   (displacement) space, thus avoiding all the FFT routines. Whereas previously
   the SLIT array had to be larger than the actual slit function width in
   order to accomodate padding with zeros to the next power of 2, it now need
   be no larger than the silt operator (2*NK+1), which means that PROFXL does
   not need to know the externally declared dimension of SLIT. It also allows
   NSMAX to be reduced in size from 4098 to 2048 for the same job.

GFIT  Version 4.4.51   16  Aug 1993  SEN
   call to readmod subroutine now checks for value of eqrad (=6378.0 km.)
   this allows ggg to inform user of inappropriate data format in the
   models file before computational error, improper abort, or programme
   "hangup" occurs. 

GFIT  Version 4.4.5    16  Aug 1993  GCT
   Improved the error estimation by taking into account the linear
   dependence of neighboring spectral points by scaling the variance by
      CORRLD = sqrt( rect**2 + ((1.+0.4*APO)*resn)**2 )/gint
   Previously, the variance had been scaled by just INTERP, which had
   assumed that all the points in the original raw spectrum were
   independent (resn=gint and rect=0) and that no apodization was applied.
   In all cases version 4.4.5 will produce larger error estimates than
   previously. This will be especially true at the high wavenumber ends
   of each detector where the width of the RECT approaches that of the
   SINC, and in 30 cm runs where the interferogram size is only 80% of
   the FFT size.

GFIT  Version 4.4.4    13  Aug 1993  GCT
   Improved function height so that it now takes account of temperature
   gradients between the model levels that it is interpolating between.
   As expected, this made no noticable difference to the benchmark, but
   for models with >> 1 km spacing it will provide a more marked improvement.
   Function height is now a seperate file.
 
GFIT  Version 4.4.3    10  Aug 1993  GCT
   Discovered bug in profwl.f which caused the peak of the sin(x)/x
   to miss the center of the SLIT array by one grid point. Since the
   apodization of the slit function was correctly centered on the array,
   the resulting ILS was slightly assymetrical, even when OFFSET=0 .
   With this corrected, the ifudge=1 can be removed from GETINFO.

GFIT  Version 4.4.2     5  Aug 1993  GCT
   We now limit the size of changes to retrieved quantities by the 
   expression  cx = cx + dx/sqrt(1+abs(dx))
   For small dx this has little effect, but for dx > 1 it becomes
   appreciable. Note that it limits both +ve and -ve changes. Without
   this improvement, large (>20) changes in gas amounts was observed
   in nearly blacked out windows when the continuum was close to zero.

GFIT  Version 4.4.11    5  Aug 1993  SEN
   changed a write statement to include the tangent height as a part of
   the first data line in the sptfiles. this allows the idl programme to
   to print both zobs and tang as part of the plot title.

GFIT  Version 4.4.1     4  Aug 1993  GCT
   changed the convergence criterion to  IF(abs(var-varwas).lt.1.e-10)
   This allows large increases or decreases in the rms fit, but ends
   the iteration if the changes become very small. For HF it was found
   unavoidable that VAR would occasionally increase, and we did not want
   this to end the iteration.
  
   Also, removed the statement fr=1.-1/jit/jit which had been intended
   to limit the step size early in the interation. It was not effective
   in preventing increases in VAR.

   We now limit the size of -ve changes in SCALE by using EXP(dx)-1
   like we have always done for the target gases. 

GFIT  Version 4.4.0    29 July 1993  GCT
   Fixed an indexing error which caused the non-target VACs to be
   multiplied by the continuum level i.e. cx(nt+1), in loop 56.
   In most cases this had little effect. Only when the continuum
   is very different from unity AND strong non-target absorptions
   were present was the error appreciable. It manifested itself by
   all of the calculated spectral values being substantially lower
   than the measured ones. Since the RMS was enormous little weight
   was attached to the retrieved burden. Occasionally, in severe
   cases positive feedback caused the continuum value to run away.

GFIT  Version 4.3.4    11 July 1993  GCT
   Changed READSET so that the molecule names at the top of the vmrset
   are now deciphered using the function MOLNUM.F. The code was further
   simplified by using the integer function FNBC.F (First Non-Blank Char)

GFIT  Version 4.3.3     5 July 1993  GCT
   Two changes to the .col output file: (i) The name of the file
   containing the fitting levels (LEVFILE) is now included in the
   .col output file. (ii) The number of header lines is now written
   at the top, so that programs which automatically read the data
   know immediately how many lines to skip.

GFIT  Version 4.3.2     3 July 1993  GCT
   Modified subroutine READSET so that only one logical unit need be
   open at any one time. The number of this LUN is now passed to
   READSET in the parameter list. Previously two logical units had been
   opened simultaneously inside READSET; one for reading the actual vmr
   profiles and one for reading MOLPAR.DAT.

GFIT  Version 4.3.1    29 May 1993   GCT
   The name of the file of fitting levels e.g. '/ggg/levels/levels.orb'
   is now included in the .ggg file, instead of being hard-wired.

GFIT  Version 4.3.0    29 May 1993   GCT
   Removed parameters APO and INTERP from param.inc and included
   them in the .ggg file. They are now hard-wired inside MAKGGG but
   the user may change them simply by editing the .ggg file, without
   any modification or recompilation of GGG.

GFIT  Version 4.2.1    25 May 1993   GCT
   Replaced the line in the vmr sets that used to say 'km vmr vmr vmr...'
   with the quantity VSHIFT, the vertical shift in kilometres. VSHIFT is
   added to the altitudes when the vmrs are read in by READSET. It is
   alot easier to change one value (VSHIFT) than all of the altitudes.
   VSHIFT=0.0 should give identical answers as previously.

GFIT  Version 4.2.0    24 May 1993   GCT
   Replaced the HYDADD subroutine by READMOD and READSET. This allows
   more flexibilty in choosing the fitting levels, model levels and
   vmr levels. These quantities are now completely independent.

GFIT  Version 4.1.5    23 May 1993   GCT
   Multiplied a priori covariances (RAE) by INTERP, after it failed to
   converge on some HF lines with INTERP=2, which it had sucessfully
   fitted with INTERP=1.

GFIT  Version 4.1.4    22 May 1993   GCT
   Fixed a bug in GETSPE whereby whenever VSET was called with a -ve
   increment with NELE GT 1, an array bound error was caused. This was
   fixed simply by keeping the increment +ve. This bug was only discovered
   when I tried to run GGG with INTERP > 1.

GFIT  Version 4.1.3    21 May 1993   GCT
   Changed the file '/ggg/src/molpar.dat' to allow multiple entries
   for gases having different names e.g. ClNO3 & CLONO2. This will now
   permit either form to be used. Consequently, subroutine VIBPAR in
   'abscof.f' had to be changed to make multiple read attempts.

GFIT  Version 4.1.2    20 May 1993   GCT
   Substituted NGAS for NG throughout GGG and ABSCOF. Previously, with
   NG=46 NGAS=50, the VMR(NGAS*NLMAX) array had been treated as (NG,NL),
   which had the effect of using it contiguously, but with no saving in
   overall storage. Now it is treated as (NGMAX,NL). The variable NG is
   now only used in HYDADD to help read the lines of vmrs.

GFIT  Version 4.1.1    19 May 1993    GCT
   Changed HYDADD to read read the physical model from the xxx.mod  files
   instead of the xxx.mdl. The former are in the format (P,T,Z,W) instead
   of (Z,T,W). This change is a stepping stone towards having models in the
   format (P,T) with a seperate file containing (Z,W).

GFIT  Version 4.1.0
   Changed the definition of TILT such that the continuum is given by
   (scale+tilt*(j-c))  rather than scale*(1+tilt*(j-c)) as previously.
   I hope that will prevent very large tilts being retrieved when SCALE
   becomes very small. This change also simplifies the PDs for the 
   continuum, tilt, shift, and the gases. In fact, it allowed the DO 57
   loop to be replaced entirely by vector calls, which made the code
   more concise.

GFIT  Version 4.0.1
   Increased the a priori covariance of the TILT from 0.0 to 0.2. This
   had two advantages in the case of strong blacked-out lines: (i) it
   prevented very large tilts being retrieved in order to try to fit -ve
   observed values, and (ii) it prevented temporary increases in VAR
   which would terminate the iteration loop.

GFIT  Version 4.0.0
   Changed the convergence criterion so that convergence is now achieved
   whenever the variance of the residuals increases. Previously, when
   the changes to the VFACTs was used, it would not converge at all when
   very weak or very strong absorbers were retrieved because small changes
   to the absorber amount would have no effect on the calculated spectrum.


 GETSPE HISTORY LOG

GFIT  Version 2.7.0   GCT   14 Apr 93
   Implemented direct-access FORTRAN reads of the spectral header/runlog
   information in subroutine GETINFO, instead of calling GETHED and/or
   reading the IHEDR. This eliminates the need to equivalence the
   header/runlog variables to the IHEDR array which caused misalignment
   problens on the MIPS. It also removes the need for the GETHED subroutine
   and the C library routines READFH. Thus, the entire GGG package is now
   entirely FORTRAN and is completely independent of any libraries.
   As a further bonus, GETINFO now positions in the Atmos runlog without
   using the key, with no loss of efficiency (provided it is sorted). This
   avoids the confusion which occurs when the key contradicts the actual runlog

GFIT  Version 2.6.0   GCT   10 Mar 93
   To make the unformatted direct-access read work on the MIPS, where the
   miminum record length is 4 bytes, I now read the spectra into the R*4
   array RAW instead of the I*2 array IRAW. This halves the total number
   of reads required which recovers alot of the speed lost by dumping the
   C routines in the previous revision, but makes the code more complicated
   to cater for cases when an odd number of points must be skipped or read.

GFIT  Version 2.5.0   GCT   30 Jan 1993
   To make the code more portable I now read the spectra using Fortran
   direct-access read, instead of the C routines OPENFH, READFH, POSNFH
   CLOSFH. This is slower: my HCl benchmark now takes 104s instead of
   100 s, but it does considerably simplify the code (GETRAW has been
   completely eliminated) and makes compiling & linking easier.

GFIT  Version 2.4.0   GCT    9-MAR-92
   All the sections of code which deal with accessing and reading
   the spectral disk file have been gathered together and placed in a
   subroutine called GETRAW.F
   The raw spectral values are now saved in an internal array RAW so that
   whenever just INTERP, APO, or OFF are changed, the measured spectrum may
   be recomputed whenever without re-reading the disk. The disadvantage of
   this is that the amount of raw data may exceed ITERP, the dimension of RAW.
   
GFIT  Version 2.3.0   GCT   26-DEC-91
   Changed the code so that I*2 data are converted to R*4 in place
   immediately after they are read in. All subsequent arithmetic is R*4,
   which means that the precision of KP spectra is not degraded by conversion
   to I*2 like it used to be.
   This change also avoids having to have special VMOV and DOTPR subroutines
   to operate on the I*2 variables; the VECLIB versions can now be used.

GFIT  Version 2.2.2   GCT    3-DEC-91
   Put the code which accesses the spectrum header/runlog into a seperate
   subroutine called GETINFO, which is called from GETSPE.
   Also, considerably simplified the subroutine PROFWL.

GFIT  Version 2.1.2   GCT,   29-NOV-91
   Included the capability to read KP and JJ data in R*4 binary format.

GFIT  Version 2.0.1   GCT,   2-NOV-91
     during convolution (and will be marginally slower for INTERP>1) 
   - The Doppler shift DOPP is now passed to GETSPE, allowing the requested
     spectral interval to be adjusted without having to reinitialize NUS & NUE.
   - The subroutine PROFWL is a simplified version of PROFIL. The parameter
     list is simplified as are some of their definitions. The name was changed
     to prevent the two from ever accidentally being mistaken.
   - The following bugs were also fixed:
     1) A typographic error in the value of pi (3.141526..) in PROFIL;
     2) When INTERP>1 the slit function returned by PROFIL was not
        independently normalized for each subset, resulting in the
        multiplication of the spectra by a saw-tooth of 1 part in 10000;
     3) The laser semi-frequency (7899.0015 cm-1) was used in the air-to-
        vacuum correction, instead of the true laser frequency. This produces
        a spurious frequency shift (0.01 @ 3000 cm-1) in air filled instruments
     4) The previous GETSPE returned points from beyond the requested interval.
     5) The previous GETSPE failed to return interpolated points which lay
        between the edge of the requested interval and the first/last real
        data point. 
     6) Array bound error in PROFIL when IDECIM=8 (NCAR spectra) caused
        first element of slit function to be trashed.
     None of these bugs have a serious impact for ATMOS SL3.

   Usage.
   The user specifies the name of a spectrum and a spectral interval
   and the routine will figure out which points it has to read from
   the disk file in order to fulfil the request. If apodization
   or interpolation is to be performed, the raw spectrum has to be
   convolved with an operator, returned by the subroutine PROFWL.
   In this case, an extra portion of raw spectrum must be read on each
   side of the requested interval, to accomodate the width of the operator,

   GETSPE has to be able to calculate the exact wavenumber of any point
   in the disk file. This requires knowing the FFT size, the sampling
   interval, and the number of points by which the disk file was truncated.
   Additionally, the various frequency corrections (finite field of view,
   gas inside instrument, Doppler effect, etc) must be performed. All of
   this instrumental information is stored in a binary runlog in the case
   of ATMOS, in an attached binary header in the case of MkIV spectra,....

   GETSPE uses an internal buffer (dimension IPMAX=2048) for temporary
   storage of raw data. With a point spacing of 0.007533 cm-1 it will
   hold 15 cm-1 of data.  If more than this is needed, GETSPE will
   automatically perform multiple reads, apodizing, interpolating and
   scaling the data (with the convolution operator returned by PROFWL)
   after each read, before sending the final data into the user-supplied
   buffer YOBS. Although it would have simplified the code to make IPMAX
   larger than any conceivable read, this would have wasted memory on the
   numerous occasions when only a narrow spectral interval was requested.
